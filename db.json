{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","path":"fancybox/jquery.fancybox.min.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","path":"js/script.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.4.1.min.js","path":"js/jquery-3.4.1.min.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","path":"fancybox/jquery.fancybox.min.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff2","path":"css/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/404.html","path":"404.html","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/css/clipboard.styl","path":"css/clipboard.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/dist/main.css","path":"dist/main.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/css/custom.styl","path":"css/custom.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/dist/report.html","path":"dist/report.html","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/dist/main.js","path":"dist/main.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/404.jpg","path":"images/404.jpg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/alipay.jpg","path":"images/alipay.jpg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/beian.png","path":"images/beian.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/ayer.png","path":"images/ayer.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/cover1.jpg","path":"images/cover1.jpg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/ayer-side.svg","path":"images/ayer-side.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/ayer.svg","path":"images/ayer.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/cover3.jpg","path":"images/cover3.jpg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/cover2.jpg","path":"images/cover2.jpg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/cover7.jpg","path":"images/cover7.jpg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/cover4.jpg","path":"images/cover4.jpg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/cover5.jpg","path":"images/cover5.jpg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/forkme.png","path":"images/forkme.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/mouse.cur","path":"images/mouse.cur","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/cover6.jpg","path":"images/cover6.jpg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/wechat.jpg","path":"images/wechat.jpg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/js/busuanzi-2.3.pure.min.js","path":"js/busuanzi-2.3.pure.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/js/clickBoom1.js","path":"js/clickBoom1.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/js/clickBoom2.js","path":"js/clickBoom2.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/js/clickLove.js","path":"js/clickLove.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/js/dz.js","path":"js/dz.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/js/jquery-2.0.3.min.js","path":"js/jquery-2.0.3.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/js/lazyload.min.js","path":"js/lazyload.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/js/tocbot.min.js","path":"js/tocbot.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/sponsor.jpg","path":"images/sponsor.jpg","modified":0,"renderable":1},{"_id":"source/images/js基础类型/boolean-rule.webp","path":"images/js基础类型/boolean-rule.webp","modified":0,"renderable":0}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"acad91ace80b80295b11a9b7ad4c29a2dcfdd8fb","modified":1613310020102},{"_id":"node_modules/hexo-theme-landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/_config.yml","hash":"b608c1f1322760dce9805285a602a95832730a2e","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/scripts/fancybox.js","hash":"c857d7a5e4a5d71c743a009c5932bf84229db428","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/README.md","hash":"d2772ece6d4422ccdaa0359c3e07588834044052","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/en.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/package.json","hash":"77cc61e7d8751457727b116f6bc23b41799945b1","modified":1613310191612},{"_id":"node_modules/hexo-theme-landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/mn.yml","hash":"2e7523951072a9403ead3840ad823edd1084c116","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/hu.yml","hash":"284d557130bf54a74e7dcef9d42096130e4d9550","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/it.yml","hash":"89b7d91306b2c1a0f3ac023b657bf974f798a1e8","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/tr.yml","hash":"a1cdbfa17682d7a971de8ab8588bf57c74224b5b","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/zh-CN.yml","hash":"1efd95774f401c80193eac6ee3f1794bfe93dc5a","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/layout.ejs","hash":"0d1765036e4874500e68256fedb7470e96eeb6ee","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/footer.ejs","hash":"3656eb692254346671abc03cb3ba1459829e0dce","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/after-footer.ejs","hash":"414914ebb159fac1922b056b905e570ac7521925","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/gauges-analytics.ejs","hash":"21a1e2a3907d1a3dad1cd0ab855fe6735f233c74","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/google-analytics.ejs","hash":"2ea7442ea1e1a8ab4e41e26c563f58413b59a3d0","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive.ejs","hash":"7cb70a7a54f8c7ae49b10d1f37c0a9b74eab8826","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/article.ejs","hash":"dfd555c00e85ffc4207c88968d12b219c1f086ec","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/head.ejs","hash":"f215d92a882247a7cc5ea80b241bedfcec0ea6ca","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/header.ejs","hash":"c1acd247e14588cdf101a69460cb8319c18cd078","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/recent_posts.ejs","hash":"60c4b012dcc656438ff59997e60367e5a21ab746","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","hash":"998ed4c5b147e1299bf62beebf33514474f28112","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_variables.styl","hash":"581b0cbefdaa5f894922133989dd2d3bf71ded79","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/date.ejs","hash":"f1458584b679545830b75bef2526e2f3eb931045","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","hash":"9c451e5efd72c5bb8b56e8c2b94be731e99db05b","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/title.ejs","hash":"4d7e62574ddf46de9b41605fe3140d77b5ddb26d","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/article.styl","hash":"80759482d07063c091e940f964a1cf6693d3d406","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.4.1.min.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/.gitattributes","hash":"2e08e93c6f6790b02ab7f81a6191ed097b20cbf9","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/.postcssrc","hash":"c171a60205840e3dcd3825d5bbb6b2d19d48ee76","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/index.js","hash":"a144d64baec7130267f64272fb256a9be3aa7cd5","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/.travis.yml","hash":"3e7e1618cc72c269e5fdc28e97cafb8b7b90ccd9","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/package.json","hash":"cc2c861b25dd70e3931dd4cbf2e51aac9372d101","modified":1615534490322},{"_id":"node_modules/hexo-theme-ayer/.stylintrc","hash":"eec4e824067be1a223745ca426aa367c8d482673","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/move_config.js","hash":"9fde64d58714990bf93ba877bbc3b48f6b8fb7d9","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/LICENSE","hash":"d7308ddbd63bf372429401e188a906c52622f62e","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/README.md","hash":"f796204bb2ac2065b35ab9e0e1937f3cbd4a6d30","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/scripts/default_config.js","hash":"617c2614d8bd8ffda2f2f84ab54fb18866e39b33","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/main.js","hash":"e42992bf24b2864e33ea5fdfab122b5d41851066","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/logo.png","hash":"16fbb131601570b21890a922cd6e596691ccff42","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/404.html","hash":"b1395f87d2b6eaaed6eee6f0673e724e20a439c2","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/favicon.ico","hash":"473ba682e828a7e34f24fae320e77b6bed4260c7","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/languages/default.yml","hash":"44e16cb5f43b5e17521a052d36fb7f66faf80c95","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/languages/de.yml","hash":"7b516d228f6175a079e260f1d5eb105644bacd15","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/languages/en.yml","hash":"44e16cb5f43b5e17521a052d36fb7f66faf80c95","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/languages/es.yml","hash":"7d44c39c9ab9c6f0b2e592e9f02a0b6b1b35daa8","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/languages/fr.yml","hash":"deb03585d492faac20c360b3d96a1a7331dc0f78","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/languages/ja.yml","hash":"e6849a6c716b588bb17e19f72a61965c74570421","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/languages/ko.yml","hash":"6d645ed779b8427e5bb5c87c5989f3013c613baf","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/languages/nl.yml","hash":"86518a4aa58bdbd57361eb2340b2d5e9a684a035","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/languages/no.yml","hash":"2faf5999099765bd662d0979e35e0d43d06bd63c","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/languages/pt.yml","hash":"8ec0eacefc2ca124bafc86fe4fb23bd2b9cad8ab","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/languages/zh-CN.yml","hash":"14d1fa64b52a252e2ed54a682c5d47b128780dcd","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/languages/zh-TW.yml","hash":"68ddd866f1e74515cfe92faa5a37a067d9308142","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/languages/ru.yml","hash":"22f2e2310d7025b03950f450865a6c3ae66fe677","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/languages/vi.yml","hash":"768ed9dc0161990dcdfdc4054ec281dda4d7a33e","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/scripts/filters/index.js","hash":"e0c3b821ecd1cb614569282fb4f6e6f555545f8b","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/scripts/filters/meta_generator.js","hash":"46f6461a2bdc509837c36ede4d32c8b12e3d49b9","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/scripts/helpers/ayer-plus-vendors.js","hash":"611f3bcd8220312f92c11fa6a5dad02f011068d2","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/scripts/helpers/wordcount.js","hash":"2014b5c5053ad737887b61014a045cc1b08799cd","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/scripts/lib/core.js","hash":"00509e97554914e5b0a20e0843dc90bcf53461aa","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/categories.ejs","hash":"b2deae0c31dd7fbf42a124db1b4c8c28d435c8e5","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/index.ejs","hash":"c40a98c0a6f55c27959e44c9e8e4f2619fc2ad3f","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/js/share.js","hash":"e8fd85622f774be877438421c182cd37eb15196e","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/plain-page.ejs","hash":"d351ff4aadd020a1960cc00f17fdd91a17e0cc54","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/friends.ejs","hash":"2a4c0bfdf189ebae720f1325786a87c7cac51d37","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/page.ejs","hash":"75879224e47b3329d7accfc2403580a2412dce25","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/post.ejs","hash":"75879224e47b3329d7accfc2403580a2412dce25","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/tags.ejs","hash":"e7c9f93c6f7041a7d2aa95e85cc131b22aa426b7","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/layout.ejs","hash":"363fd530b1a455992f93ff7163518d30413caadd","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_darkmode.styl","hash":"eda0bf55d64f2cdeb75f9489818c34635bc85c00","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_extend.styl","hash":"996ed7faa5ebf69af1f14f90f774dc7a53774537","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/js/ayer.js","hash":"acc2b740765f8fc3b0e8c27f3226cc74b865f127","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_variables.styl","hash":"2fdb4425b6213fed28921f53179e825aee0500cf","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_mixins.styl","hash":"e4804d78ded3714495f8ac9cebdbd2871ed97549","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/style.styl","hash":"6106e6f53be4bbc13fe8a69ed6d40052bdeb49f8","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/css/clipboard.styl","hash":"145f335d6369744a75c2c39a50f63a88f720f85b","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_normalize.styl","hash":"b90386215434cc76549c046e7f67392049492a6a","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/dist/main.css","hash":"252d84915d54235b3f3780d6b0d81819b1f29151","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/css/custom.styl","hash":"3753c4505761a66faccf736816f053e1e3489982","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_remixicon.styl","hash":"78f4dd8c613df005d6ecf6a073d96d38bbbe531e","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/dist/main.js","hash":"68b1b6cd15f6038d757fa280281073128162b5ce","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/images/404.jpg","hash":"4f36a8d378712427cded03f5166949f5e0ba754c","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/images/beian.png","hash":"29c400bc3b89f6085766dac4e0330ded5cb73d52","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/images/ayer.png","hash":"0466c05244273f645d239cd27513bfa3c50308aa","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/images/ayer-side.svg","hash":"ad004ce7a873de0f91774f3d5923e010396a07bd","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/images/ayer.svg","hash":"379c3307f97c364718a1dbc1e52fb14de12eb11a","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/images/cover7.jpg","hash":"573bff6899d2d9c5bcba0dc9c60cd1ec9eb8b029","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/images/forkme.png","hash":"99c3e21a169421e4f249befb428396c729863a75","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/images/mouse.cur","hash":"c1ffe93a6ba0d25ef06bb3d097560762e4807593","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/images/sponsor.jpg","hash":"5b5e4498177b369a7eca7ab2b1d0710b8690e21d","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/js/busuanzi-2.3.pure.min.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/js/clickBoom1.js","hash":"daac19b1cf7381f1a36deb6ac5a4892e14774887","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/js/clickBoom2.js","hash":"fd61d8aeb2cfeaa0e548ac83a1ee1631979cbdb9","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/js/clickLove.js","hash":"a35dfb7ff19796c005ee30b55fd95e39d6d59a89","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/js/dz.js","hash":"079ae73e2e396c2e00919a50a6fe0d064f99303a","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/js/search.js","hash":"6d5c093d12e922ad204dab1723b786c35847bf1b","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/js/lazyload.min.js","hash":"d9bc50752cd7e331dbd0a833386838397c9a079f","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/js/tocbot.min.js","hash":"bae97e8a24a05a99335f8e725641c8ca9c50502a","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/ads.styl","hash":"e3e533ac5b9b6c5ef7d3829c890aff42dc29cfc1","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/archive.styl","hash":"9dbb04cf0ae07b50acd6f343e673df215a3c868e","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/apple.styl","hash":"333f9e59dc6625c4dee126a1c1a9c25ce9292655","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/ayer.styl","hash":"cfcae3839170f2d04ea504a3cd3d62a9cde6647d","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/article.styl","hash":"c93c96bccfafe568cebbeb14bf577e97cb6e3c64","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/articles.styl","hash":"ddbe833939180afdc832659c5cdad08f77ef4f46","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/categories.styl","hash":"cb3b1667c83182d6309e6d066f53f2771723729e","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/float.styl","hash":"b1abfdfd05e74745484f7e6d043ef2842b3f6b41","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/gallery.styl","hash":"f5eae1b0030cfd97f1646844c9d3f692dbb38946","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/footer.styl","hash":"ae22e9d1525f267be368359ed0096f26791b809e","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/friends.styl","hash":"10332c63736e4ce31353b7605012caf744a8286a","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/gitalk.styl","hash":"0678e8b330daea56fa30d14e97de73289a7d6f22","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/justifiedGallery.styl","hash":"9828c78fb59c3ea3de7cce2569313d12c4b1a6ff","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/highlight.styl","hash":"1210f704aae34ef653e3a458cccb700b05353ea1","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/mobile.styl","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/lists.styl","hash":"dc45f8b1a5942d4d979fb0859bc47a86f73fe0a9","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/layout.styl","hash":"d4613f176636cae6a4af6124863a176c32ea6471","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/navbar.styl","hash":"30d7e1de22185c4b4da33eef66b5eb96f9e5ae98","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/pace.styl","hash":"bbda18c692fc66ae99e45347ff52c14e44a08e3b","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/search.styl","hash":"3f2c7bd1371f6f25aec7c581dbae7b52f95ec4c6","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/share.styl","hash":"4a6e6ac9156553dd5cee1eeee8fdc6f1f8a5d117","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/reward.styl","hash":"924114f723a22dbb8970d023bc2e033141b3438d","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/sidebar.styl","hash":"cdc7bea47a768b18991decde0d38c554399621ee","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/totop.styl","hash":"b6010788be1d99a345abcf0cf9cdf0a564b90d3c","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/tocbot.styl","hash":"2135ab02e098ddfaaa60009d8413186a564af840","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/ads.ejs","hash":"2be035aeef82265c5b0cb6aec6f4135ad1e0aa75","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/tag.styl","hash":"6072aa6bd16e0a1e75f0258d7b20587cab56fff8","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/after-footer.ejs","hash":"a9865e7262d4a5b5a724685f99db1846a1cbd168","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/archive-post.ejs","hash":"6b3e77cdbf8271c2a22b839608cccaa651f84e93","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/ayer.ejs","hash":"061e5d25789c9a0c3df3172c0c53966053af89d1","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/article.ejs","hash":"af6ae47b0cb5028089f72803312356e95309e69b","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/broadcast.ejs","hash":"21fadeb390cff713fd432d0565bb901f8caff0c0","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/baidu-analytics.ejs","hash":"155327c23607f69989b58845f24d842a54e504b8","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/footer.ejs","hash":"16c6877db510a28afff0334be8d2ffe2f76d7a3e","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/google-analytics.ejs","hash":"3a23d6ae48305c9f1b5c400da780288c2425254b","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/katex.ejs","hash":"02cb9da065cd315a06d62d13872dc687c62e9a1f","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/archive.ejs","hash":"1da014dd52294e132bc91eb2f45f67264a41e059","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/sidebar.ejs","hash":"b7efb7f2b300de23d12ef310d710d809d979f4fd","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/modal.ejs","hash":"b9caece8b5fb47e250c67f6f80f101f08d04eba9","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/mathjax.ejs","hash":"bcc264b6d6b58b3b692139c4d8b1381da4820da8","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/music.ejs","hash":"4a67b36cadf2661a5579a454b7d6e0be34e7a0d4","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/totop.ejs","hash":"b2fc5726168f012bc61845f33a46404ff4065947","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/busuanzi.ejs","hash":"4c7a9191658395bcac45dcd07c165af8773cffa9","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/albums.ejs","hash":"f4cfbabca9f59a9e5aa457a6f2a9cf6f56cd22b3","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/category.ejs","hash":"89cb32e8d98bad81d3ef33377212e9b253699d3d","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/albums.styl","hash":"5802253789028a4d9dac474168fc7132045e72ff","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/clipboard.ejs","hash":"c93d82de1635536a633b6254b604590ab4428594","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/viewer.ejs","hash":"219f0a0ec2eb35e8ba27a849639a5f634273fb6f","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/gallery.ejs","hash":"6f78a49edc91f230b0a838c77630e9671d8d6089","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/date.ejs","hash":"947f513f7a85fbcf085624e46dc2ae6de8185eec","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/justifiedGallery.ejs","hash":"a313df6a014a0f2ba6b869dabc56bacb8ff6324d","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/head.ejs","hash":"d58608ace6070c2ae65672d524a336ce1641ded4","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/minivaline.ejs","hash":"bc41af88b2b85f638ab7bd4cf0b227510ccb0108","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/nav.ejs","hash":"a73010cbbc463089a1376889850fb0890143c988","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/search.ejs","hash":"47c818c236b063d6ce0c41e0824f9f10a3521414","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/tag.ejs","hash":"694b5101bcc44c9f9c1cc62e5ad2fdfb4b7c7a07","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/title.ejs","hash":"e55c57b8cb8c8acf0ed998ea31c2fbc1d6256027","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/tocbot.ejs","hash":"17ac504f2a6d561765046a0ba19dcce504104517","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/twikoo.ejs","hash":"7f064611a2297dda84e6b329252e838666ac7c93","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/topping.ejs","hash":"de2c50fb5b7a816287c6d048a2a22ae9c29abcdd","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/share.ejs","hash":"9a978d55358878c97186ed010e536e1b314adb35","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/word.ejs","hash":"5b785368a0a6f3b5538aa1b9e7574daa8dfb0df6","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/valine.ejs","hash":"b71f2af08c1916b3c5ef3a553a1df16f1787af24","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/images/alipay.jpg","hash":"8f5409e29764fca573f1d274003910aa3c919de1","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/images/cover2.jpg","hash":"f61dd08c95327468c5f6bc5175eff68d00f05b46","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/images/wechat.jpg","hash":"93a362574a8498e75dca469b7bceb0b321fda387","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/js/jquery-2.0.3.min.js","hash":"e68550a39c95a6400287b3abd77f40c44f322e50","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/dist/report.html","hash":"cc78bfe345c800fbabd89cf46f7848c7f3a002fd","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/images/cover6.jpg","hash":"a5b8a5dddff2607fee5fccf5fdef3b214a8468cc","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/gitalk.ejs","hash":"b8514325f462a99abefa922747312a907dc0140b","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/screenshots/hexo-theme-ayer.png","hash":"4111670e622ce09837b6b9cc641782af75805079","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/images/cover1.jpg","hash":"e019fbed6158ae3e4ec3d255b41bddc1afcbfa90","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/images/cover3.jpg","hash":"7b4e7c9ce19ce5d5c1588b2567e88ecbb04370af","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/images/cover4.jpg","hash":"77040e609d2f1c60e00a8e47cb95b25bf7ff5b9c","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/images/cover5.jpg","hash":"1a2d6182d94b015a45fe4bf8e8a239dfcc0ef776","modified":499162500000},{"_id":"source/categories/index.md","hash":"ed0327e53dd3df3354300d9411e13eea18bed86e","modified":1615534420807},{"_id":"source/tags/index.md","hash":"d7b41b1bd5cfc4255b6d2ee7db8fe5d5f0b6aca3","modified":1615534420810},{"_id":"source/home/index.md","hash":"f83bdaa0ba9d9b905591122a408ec28600e15098","modified":1615534420808},{"_id":"source/about/index.md","hash":"88224550a60707c29c5563c5177f4fcb5fb0fc70","modified":1615534420806},{"_id":"source/friends/index.md","hash":"3452f2c0fc4bcc7641bf4207134ca0b5ca34ebdc","modified":1615534420807},{"_id":"source/_posts/day1.md","hash":"b58976224e7de696eb36687eb58f75934ff4acc8","modified":1613720856271},{"_id":"public/atom.xml","hash":"f8c0a8ee1a8de833e89e701dc24c2d961f8631c2","modified":1614218447364},{"_id":"public/search.xml","hash":"f188c78d4ab25a3a9260e20ba65d935d300ad434","modified":1614218447364},{"_id":"public/categories/index.html","hash":"c906030ee8edb4bee25ce5d741e8bd410f88b9a4","modified":1614175290601},{"_id":"public/tags/index.html","hash":"76d3a8df11df5af124b5fb48a06970f409a4655b","modified":1614175290601},{"_id":"public/home/index.html","hash":"94bc74aa0dc817e3e401e53452d6ccad60f778f6","modified":1614175290601},{"_id":"public/about/index.html","hash":"9119a93ae4d9ce1f210b36968d1c29a215d0b05b","modified":1614175290601},{"_id":"public/friends/index.html","hash":"7f7ee9ef31d71aec70a61738fb2cf15ee0f724c1","modified":1614175290601},{"_id":"public/archives/index.html","hash":"e95f6023af83616e55dc60e7f6d94a37403ad3aa","modified":1614175290601},{"_id":"public/archives/2021/index.html","hash":"a969abdbb24434d228ba511f8d1947f3a72ba327","modified":1614175290601},{"_id":"public/archives/2021/02/index.html","hash":"3261843c59ce5347336330056802780d005ecd5d","modified":1614175290601},{"_id":"public/2021/02/19/day1/index.html","hash":"9754310d86f064c7680a150ec71a137d83b8c486","modified":1613740111255},{"_id":"public/2021/02/14/hello-world/index.html","hash":"06aad8b9a3c21c2557b4108aa21037e649a4a970","modified":1613730558354},{"_id":"public/index.html","hash":"afd895321a174321911b28ba3056448fb4807762","modified":1614218447364},{"_id":"public/favicon.ico","hash":"473ba682e828a7e34f24fae320e77b6bed4260c7","modified":1614175290601},{"_id":"public/images/404.jpg","hash":"4f36a8d378712427cded03f5166949f5e0ba754c","modified":1614175290601},{"_id":"public/images/beian.png","hash":"29c400bc3b89f6085766dac4e0330ded5cb73d52","modified":1614175290601},{"_id":"public/images/ayer.png","hash":"0466c05244273f645d239cd27513bfa3c50308aa","modified":1614175290601},{"_id":"public/images/ayer-side.svg","hash":"ad004ce7a873de0f91774f3d5923e010396a07bd","modified":1614175290601},{"_id":"public/images/ayer.svg","hash":"379c3307f97c364718a1dbc1e52fb14de12eb11a","modified":1614175290601},{"_id":"public/images/cover7.jpg","hash":"573bff6899d2d9c5bcba0dc9c60cd1ec9eb8b029","modified":1614175290601},{"_id":"public/images/forkme.png","hash":"99c3e21a169421e4f249befb428396c729863a75","modified":1614175290601},{"_id":"public/images/mouse.cur","hash":"c1ffe93a6ba0d25ef06bb3d097560762e4807593","modified":1614175290601},{"_id":"public/images/sponsor.jpg","hash":"5b5e4498177b369a7eca7ab2b1d0710b8690e21d","modified":1614175290601},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1614175290601},{"_id":"public/images/alipay.jpg","hash":"d01e8c0ed1aa85b802cc40177a6e7087a4949fab","modified":1614175290601},{"_id":"public/images/cover2.jpg","hash":"f61dd08c95327468c5f6bc5175eff68d00f05b46","modified":1614175290601},{"_id":"public/images/wechat.jpg","hash":"1728092ebf49bca754e6f306beea520bd1d6b4fe","modified":1614175290601},{"_id":"public/css/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1614175290601},{"_id":"public/css/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1614175290601},{"_id":"public/images/cover6.jpg","hash":"a5b8a5dddff2607fee5fccf5fdef3b214a8468cc","modified":1614175290601},{"_id":"public/js/script.js","hash":"998ed4c5b147e1299bf62beebf33514474f28112","modified":1614175290601},{"_id":"public/404.html","hash":"6f7743b6fceb16708c89cde40d66a3fa18f24a1d","modified":1614175290601},{"_id":"public/css/clipboard.css","hash":"7990b92ffeda1b06b94b50140d9c95dac21bd418","modified":1614175290601},{"_id":"public/css/custom.css","hash":"78b13bf5b98278ff65cdb0a731f2a1c98b2324a5","modified":1614175290601},{"_id":"public/dist/main.js","hash":"68b1b6cd15f6038d757fa280281073128162b5ce","modified":1614175290601},{"_id":"public/js/busuanzi-2.3.pure.min.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1614175290601},{"_id":"public/js/clickBoom1.js","hash":"56582907b4c2ece5187b8d64125f91ddabb8a24e","modified":1614175290601},{"_id":"public/js/clickBoom2.js","hash":"bea5232eb8b32542283d9a28257f4b85ce2f3c1b","modified":1614175290601},{"_id":"public/js/clickLove.js","hash":"9e8e79d69ad8338761272f86fe5cad0ad5e503cc","modified":1614175290601},{"_id":"public/js/dz.js","hash":"079ae73e2e396c2e00919a50a6fe0d064f99303a","modified":1614175290601},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1614175290601},{"_id":"public/images/cover3.jpg","hash":"7b4e7c9ce19ce5d5c1588b2567e88ecbb04370af","modified":1614175290601},{"_id":"public/js/lazyload.min.js","hash":"b801b3946fb9b72e03512c0663458e140e1fa77b","modified":1614175290601},{"_id":"public/js/search.js","hash":"118be0e0918532ac1225f62e1a0a6f0673e0b173","modified":1614175290601},{"_id":"public/js/tocbot.min.js","hash":"bae97e8a24a05a99335f8e725641c8ca9c50502a","modified":1614175290601},{"_id":"public/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1614175290601},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1614175290601},{"_id":"public/images/cover1.jpg","hash":"e019fbed6158ae3e4ec3d255b41bddc1afcbfa90","modified":1614175290601},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1614175290601},{"_id":"public/dist/main.css","hash":"252d84915d54235b3f3780d6b0d81819b1f29151","modified":1614175290601},{"_id":"public/css/style.css","hash":"b3156fdcfe6586e60fa1d1a3c6cdd92fccc7873f","modified":1614175290601},{"_id":"public/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1614175290601},{"_id":"public/js/jquery-2.0.3.min.js","hash":"800edb7787c30f4982bf38f2cb8f4f6fb61340e9","modified":1614175290601},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1614175290601},{"_id":"public/images/cover4.jpg","hash":"77040e609d2f1c60e00a8e47cb95b25bf7ff5b9c","modified":1614175290601},{"_id":"public/dist/report.html","hash":"cc78bfe345c800fbabd89cf46f7848c7f3a002fd","modified":1614175290601},{"_id":"public/js/jquery-3.4.1.min.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":1614175290601},{"_id":"public/images/cover5.jpg","hash":"1a2d6182d94b015a45fe4bf8e8a239dfcc0ef776","modified":1614175290601},{"_id":"source/_posts/Linux下安装pcre.md","hash":"60af20d2dcb2381c141e7dce09f8ad70f3995df4","modified":1614433287402},{"_id":"source/_posts/Linux系统下安装配置nginx.md","hash":"407539b88517d093ebd72830009b8ef2fc306ddd","modified":1614433261905},{"_id":"source/_posts/服务器的使用.md","hash":"e7b93bc3b52f762e6deff5d82ca8a6e1d1974f8d","modified":1613738542970},{"_id":"public/2021/02/19/服务器的使用/index.html","hash":"54922937be52a720236c028db89e4c93a23c58a4","modified":1613740111255},{"_id":"public/2021/02/19/Linux下安装pcre/index.html","hash":"92f604aa17ba19ed5f5df4ede1ae536602b7163b","modified":1614175290601},{"_id":"public/2021/02/19/Linux系统下安装配置nginx/index.html","hash":"c13ccdd4cc6bc0a7815e21482f9385c1291b60f0","modified":1614175290601},{"_id":"source/categories/leetcode.md","hash":"157fbbf26c394c9dc636d516340ca93a10f37440","modified":1613999709414},{"_id":"node_modules/hexo-theme-ayer/source/images/alipay.png","hash":"97062d26731657a025f74713e5574578bce93700","modified":1613998965770},{"_id":"source/_posts/git常用命令.md","hash":"0f9afc6aa63ce1c2ba63877eac8c8b8f585a21db","modified":1614433223720},{"_id":"source/_posts/爱生气的书店老板.md","hash":"96b34cbdcb40fdd4ec3b9d9f0023737b1991cc4b","modified":1614087853011},{"_id":"public/categories/git/index.html","hash":"3172c427c13c476c87ccc9aa9664b3a5d0423c05","modified":1614175290601},{"_id":"public/categories/leetcode/index.html","hash":"6f514ae85d454f26f4b02cc991c37fd92fcb4597","modified":1614175290601},{"_id":"public/tags/git/index.html","hash":"c32dedb79c795b0e85bf81fa2b5a27d52327515f","modified":1614175290601},{"_id":"public/tags/中等/index.html","hash":"e99211a579044c9ca841fbff7c38f3cec93d8184","modified":1614175290601},{"_id":"public/tags/leetcode/index.html","hash":"e9664aa55306f09a44f1ef62d1407a3582c3a998","modified":1614175290601},{"_id":"public/tags/每日打卡/index.html","hash":"4078c064c094e0617f4442559a2e570a6a8ccacb","modified":1614175290601},{"_id":"public/tags/算法/index.html","hash":"e22a6f2d70a13f26280976fadf2c86ebf32d9730","modified":1614175290601},{"_id":"public/2021/02/23/爱生气的书店老板/index.html","hash":"9c6de248bdf9220e1bbc74e4c661891fe70b3b4c","modified":1614175290601},{"_id":"public/2021/02/22/git常用命令/index.html","hash":"780698e6e49dccdfc9f22bae46d576d68e621dc0","modified":1614175290601},{"_id":"source/_posts/前端页面一键部署到服务器.md","hash":"5d5fd43b28bf30a7f2ccb8e7d0aa6d2230846320","modified":1614433361141},{"_id":"public/2021/02/24/前端页面一键部署到服务器/index.html","hash":"4b7aa73493031181995e092a7cbd72bfae0110e4","modified":1614218447364},{"_id":"public/images/alipay.png","hash":"97062d26731657a025f74713e5574578bce93700","modified":1614175290601},{"_id":"source/_posts/js基础/js基础类型.md","hash":"bc503d3e1464d328e9b6d4c77a47574a62b728a3","modified":1614434937818},{"_id":"source/_posts/Get和Post的区别.md","hash":"3a2e1ef5a51a1d403836e9ccd4f2161dc117ffed","modified":1614342818306},{"_id":"source/_posts/leetCode/至少有 K 个重复字符的最长子串.md","hash":"b571b2481ef91e73d9c718a24d8e2b0c9c6f216d","modified":1614429861814},{"_id":"source/_posts/面试/浏览器兼容性.md","hash":"1c8a4d708b52ba00f7d3e554e07432a96f208829","modified":1614342831548},{"_id":"source/_posts/leetCode/爱生气的书店老板.md","hash":"b54941c6da4811e8bc312e0fc64701e48c06def8","modified":1615534420804},{"_id":"source/_posts/js基础/原型和原型链.md","hash":"410f37fc85fb4103d45df335045643344a460d2c","modified":1614432406857},{"_id":"source/_posts/js基础/字符串和数组常用方法.md","hash":"77c0f88b8e929c06accf436b8bf079b192681f93","modified":1614431666584},{"_id":"source/_posts/js基础/浅拷贝和深拷贝.md","hash":"cf6d968ccffa8dc0c3a88566808c662de0079213","modified":1614434088925},{"_id":"source/_posts/images/js基础类型/boolean-rule.webp","hash":"40e0cd64afa8cc10c906b298ea9c0c9a524e12ef","modified":1614433998256},{"_id":"source/images/js基础类型/boolean-rule.webp","hash":"40e0cd64afa8cc10c906b298ea9c0c9a524e12ef","modified":1614433998256},{"_id":"source/_posts/js基础类型/boolean-rule.webp","hash":"40e0cd64afa8cc10c906b298ea9c0c9a524e12ef","modified":1614433998256},{"_id":"source/_posts/js基础类型.md","hash":"bc503d3e1464d328e9b6d4c77a47574a62b728a3","modified":1614435158867}],"Category":[{"name":"git","_id":"ckljei2mm0002p0dp5wuu4ilu"},{"name":"leetcode","_id":"ckljei2mo0004p0dpc3rwd70m"},{"name":"js","_id":"cklm8tbg70001todpdkh65jds"},{"name":"面试必看","_id":"cklnpqw0s0002tsdpdniw8men"},{"name":"js基础","_id":"cklnqbumx000qtsdpfatq0s0r"}],"Data":[],"Page":[{"title":"categories","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ntype: \"categories\"\nlayout: \"categories\"\n---","date":"2021-03-12T07:33:40.807Z","updated":"2021-03-12T07:33:40.807Z","path":"categories/index.html","_id":"cklbzhmpc0000okdp45pagv94","comments":1,"content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ntype: \"tags\"\nlayout: \"tags\"\n---","date":"2021-03-12T07:33:40.810Z","updated":"2021-03-12T07:33:40.810Z","path":"tags/index.html","_id":"cklbzicg50001okdp5rcac7xj","comments":1,"content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"home","date":"2021-02-19T07:43:25.000Z","_content":"","source":"home/index.md","raw":"---\ntitle: home\ndate: 2021-02-19 15:43:25\n---\n","updated":"2021-03-12T07:33:40.808Z","path":"home/index.html","_id":"cklbzkzxs000098dp4b73f2t2","comments":1,"layout":"page","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"about","date":"2021-02-19T07:44:05.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2021-02-19 15:44:05\n---\n","updated":"2021-03-12T07:33:40.806Z","path":"about/index.html","_id":"cklbzlv0k0000bwdpczcc01lp","comments":1,"layout":"page","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"friends","date":"2021-02-19T07:44:14.000Z","_content":"","source":"friends/index.md","raw":"---\ntitle: friends\ndate: 2021-02-19 15:44:14\n---\n","updated":"2021-03-12T07:33:40.807Z","path":"friends/index.html","_id":"cklbzm2dn0001bwdpah8n1ahl","comments":1,"layout":"page","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Linux下安装pcre","_content":"\nPCRE(Perl Compatible Regular Expressions)是一个Perl库，包括 perl 兼容的正则表达式库。\n\n##### 下载\n\n##### 安装步骤\n###### 执行命令\n\n```\n    wget https://ftp.pcre.org/pub/pcre/pcre-8.44.tar.gz \n```\n###### 解压缩\n\n```\n    tar -zxf pcre-8.10.tar.gz\n```\n###### 进入解压好的目录\n\n```\n    cd pcre-8.10.tar.gz\n```\n###### 执行配置\n\n```\n    ./configure\n```\n###### 编译安装\n\n```\n    make && make install\n```","source":"_posts/Linux下安装pcre.md","raw":"---\ntitle: Linux下安装pcre\n---\n\nPCRE(Perl Compatible Regular Expressions)是一个Perl库，包括 perl 兼容的正则表达式库。\n\n##### 下载\n\n##### 安装步骤\n###### 执行命令\n\n```\n    wget https://ftp.pcre.org/pub/pcre/pcre-8.44.tar.gz \n```\n###### 解压缩\n\n```\n    tar -zxf pcre-8.10.tar.gz\n```\n###### 进入解压好的目录\n\n```\n    cd pcre-8.10.tar.gz\n```\n###### 执行配置\n\n```\n    ./configure\n```\n###### 编译安装\n\n```\n    make && make install\n```","slug":"Linux下安装pcre","published":1,"date":"2021-02-23T01:51:04.038Z","updated":"2021-02-27T13:41:27.402Z","_id":"cklcb736v0000ekdp7zrp5f7k","comments":1,"layout":"post","photos":[],"link":"","content":"<p>PCRE(Perl Compatible Regular Expressions)是一个Perl库，包括 perl 兼容的正则表达式库。</p>\n<h5 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h5><h5 id=\"安装步骤\"><a href=\"#安装步骤\" class=\"headerlink\" title=\"安装步骤\"></a>安装步骤</h5><h6 id=\"执行命令\"><a href=\"#执行命令\" class=\"headerlink\" title=\"执行命令\"></a>执行命令</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https:&#x2F;&#x2F;ftp.pcre.org&#x2F;pub&#x2F;pcre&#x2F;pcre-8.44.tar.gz </span><br></pre></td></tr></table></figure>\n<h6 id=\"解压缩\"><a href=\"#解压缩\" class=\"headerlink\" title=\"解压缩\"></a>解压缩</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxf pcre-8.10.tar.gz</span><br></pre></td></tr></table></figure>\n<h6 id=\"进入解压好的目录\"><a href=\"#进入解压好的目录\" class=\"headerlink\" title=\"进入解压好的目录\"></a>进入解压好的目录</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd pcre-8.10.tar.gz</span><br></pre></td></tr></table></figure>\n<h6 id=\"执行配置\"><a href=\"#执行配置\" class=\"headerlink\" title=\"执行配置\"></a>执行配置</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.&#x2F;configure</span><br></pre></td></tr></table></figure>\n<h6 id=\"编译安装\"><a href=\"#编译安装\" class=\"headerlink\" title=\"编译安装\"></a>编译安装</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>PCRE(Perl Compatible Regular Expressions)是一个Perl库，包括 perl 兼容的正则表达式库。</p>\n<h5 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h5><h5 id=\"安装步骤\"><a href=\"#安装步骤\" class=\"headerlink\" title=\"安装步骤\"></a>安装步骤</h5><h6 id=\"执行命令\"><a href=\"#执行命令\" class=\"headerlink\" title=\"执行命令\"></a>执行命令</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https:&#x2F;&#x2F;ftp.pcre.org&#x2F;pub&#x2F;pcre&#x2F;pcre-8.44.tar.gz </span><br></pre></td></tr></table></figure>\n<h6 id=\"解压缩\"><a href=\"#解压缩\" class=\"headerlink\" title=\"解压缩\"></a>解压缩</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxf pcre-8.10.tar.gz</span><br></pre></td></tr></table></figure>\n<h6 id=\"进入解压好的目录\"><a href=\"#进入解压好的目录\" class=\"headerlink\" title=\"进入解压好的目录\"></a>进入解压好的目录</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd pcre-8.10.tar.gz</span><br></pre></td></tr></table></figure>\n<h6 id=\"执行配置\"><a href=\"#执行配置\" class=\"headerlink\" title=\"执行配置\"></a>执行配置</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.&#x2F;configure</span><br></pre></td></tr></table></figure>\n<h6 id=\"编译安装\"><a href=\"#编译安装\" class=\"headerlink\" title=\"编译安装\"></a>编译安装</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>"},{"title":"Linux下安装和配置nginx","_content":"## Nginx简介\n#### Nginx是什么？\nNginx是一款轻量级Web服务器，也是一款反向代理服务器\n> 官网：http://nginx.org/\n> 中文文档: http://www.nginx.cn/doc/\n\n#### Nginx能干什么?\nNginx能干的事情很多,这里简要罗列一-些：\n\n可直接支持Rails和PHP的程序\n可作为HTTP反向代理服务器\n作为负载均衡服务器\n作为邮件代理服务器\n帮助实现前端动静分离\n\n#### nginx安装\n\n##### Nginx下载\n> 官网下载：http://nginx.org/en/download.html\n\n\n##### 安装步骤\n\n###### 安装依赖\n\n```\n    wget http://nginx.org/download/nginx-1.12.2.tar.gz\n```\n\n###### 解压缩\n\n```\n    tar -zxvf nginx-1.12.2.tar.gz\n```\n###### 进入解压好的目录\n\n```\n    cd nginx-1.12.2/\n```\n###### 执行配置\n\n```\n    ./configure\n```\n###### 编译安装(默认安装在/usr/local/nginx)\n\n```\n    make && make install\n```","source":"_posts/Linux系统下安装配置nginx.md","raw":"---\ntitle: Linux下安装和配置nginx\n---\n## Nginx简介\n#### Nginx是什么？\nNginx是一款轻量级Web服务器，也是一款反向代理服务器\n> 官网：http://nginx.org/\n> 中文文档: http://www.nginx.cn/doc/\n\n#### Nginx能干什么?\nNginx能干的事情很多,这里简要罗列一-些：\n\n可直接支持Rails和PHP的程序\n可作为HTTP反向代理服务器\n作为负载均衡服务器\n作为邮件代理服务器\n帮助实现前端动静分离\n\n#### nginx安装\n\n##### Nginx下载\n> 官网下载：http://nginx.org/en/download.html\n\n\n##### 安装步骤\n\n###### 安装依赖\n\n```\n    wget http://nginx.org/download/nginx-1.12.2.tar.gz\n```\n\n###### 解压缩\n\n```\n    tar -zxvf nginx-1.12.2.tar.gz\n```\n###### 进入解压好的目录\n\n```\n    cd nginx-1.12.2/\n```\n###### 执行配置\n\n```\n    ./configure\n```\n###### 编译安装(默认安装在/usr/local/nginx)\n\n```\n    make && make install\n```","slug":"Linux系统下安装配置nginx","published":1,"date":"2021-02-23T01:51:04.039Z","updated":"2021-02-27T13:41:01.905Z","_id":"cklcb736y0001ekdp7lnu9ag3","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"Nginx简介\"><a href=\"#Nginx简介\" class=\"headerlink\" title=\"Nginx简介\"></a>Nginx简介</h2><h4 id=\"Nginx是什么？\"><a href=\"#Nginx是什么？\" class=\"headerlink\" title=\"Nginx是什么？\"></a>Nginx是什么？</h4><p>Nginx是一款轻量级Web服务器，也是一款反向代理服务器</p>\n<blockquote>\n<p>官网：<a href=\"http://nginx.org/\">http://nginx.org/</a><br>中文文档: <a href=\"http://www.nginx.cn/doc/\">http://www.nginx.cn/doc/</a></p>\n</blockquote>\n<h4 id=\"Nginx能干什么\"><a href=\"#Nginx能干什么\" class=\"headerlink\" title=\"Nginx能干什么?\"></a>Nginx能干什么?</h4><p>Nginx能干的事情很多,这里简要罗列一-些：</p>\n<p>可直接支持Rails和PHP的程序<br>可作为HTTP反向代理服务器<br>作为负载均衡服务器<br>作为邮件代理服务器<br>帮助实现前端动静分离</p>\n<h4 id=\"nginx安装\"><a href=\"#nginx安装\" class=\"headerlink\" title=\"nginx安装\"></a>nginx安装</h4><h5 id=\"Nginx下载\"><a href=\"#Nginx下载\" class=\"headerlink\" title=\"Nginx下载\"></a>Nginx下载</h5><blockquote>\n<p>官网下载：<a href=\"http://nginx.org/en/download.html\">http://nginx.org/en/download.html</a></p>\n</blockquote>\n<h5 id=\"安装步骤\"><a href=\"#安装步骤\" class=\"headerlink\" title=\"安装步骤\"></a>安装步骤</h5><h6 id=\"安装依赖\"><a href=\"#安装依赖\" class=\"headerlink\" title=\"安装依赖\"></a>安装依赖</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http:&#x2F;&#x2F;nginx.org&#x2F;download&#x2F;nginx-1.12.2.tar.gz</span><br></pre></td></tr></table></figure>\n<h6 id=\"解压缩\"><a href=\"#解压缩\" class=\"headerlink\" title=\"解压缩\"></a>解压缩</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf nginx-1.12.2.tar.gz</span><br></pre></td></tr></table></figure>\n<h6 id=\"进入解压好的目录\"><a href=\"#进入解压好的目录\" class=\"headerlink\" title=\"进入解压好的目录\"></a>进入解压好的目录</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd nginx-1.12.2&#x2F;</span><br></pre></td></tr></table></figure>\n<h6 id=\"执行配置\"><a href=\"#执行配置\" class=\"headerlink\" title=\"执行配置\"></a>执行配置</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.&#x2F;configure</span><br></pre></td></tr></table></figure>\n<h6 id=\"编译安装-默认安装在-usr-local-nginx\"><a href=\"#编译安装-默认安装在-usr-local-nginx\" class=\"headerlink\" title=\"编译安装(默认安装在/usr/local/nginx)\"></a>编译安装(默认安装在/usr/local/nginx)</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Nginx简介\"><a href=\"#Nginx简介\" class=\"headerlink\" title=\"Nginx简介\"></a>Nginx简介</h2><h4 id=\"Nginx是什么？\"><a href=\"#Nginx是什么？\" class=\"headerlink\" title=\"Nginx是什么？\"></a>Nginx是什么？</h4><p>Nginx是一款轻量级Web服务器，也是一款反向代理服务器</p>\n<blockquote>\n<p>官网：<a href=\"http://nginx.org/\">http://nginx.org/</a><br>中文文档: <a href=\"http://www.nginx.cn/doc/\">http://www.nginx.cn/doc/</a></p>\n</blockquote>\n<h4 id=\"Nginx能干什么\"><a href=\"#Nginx能干什么\" class=\"headerlink\" title=\"Nginx能干什么?\"></a>Nginx能干什么?</h4><p>Nginx能干的事情很多,这里简要罗列一-些：</p>\n<p>可直接支持Rails和PHP的程序<br>可作为HTTP反向代理服务器<br>作为负载均衡服务器<br>作为邮件代理服务器<br>帮助实现前端动静分离</p>\n<h4 id=\"nginx安装\"><a href=\"#nginx安装\" class=\"headerlink\" title=\"nginx安装\"></a>nginx安装</h4><h5 id=\"Nginx下载\"><a href=\"#Nginx下载\" class=\"headerlink\" title=\"Nginx下载\"></a>Nginx下载</h5><blockquote>\n<p>官网下载：<a href=\"http://nginx.org/en/download.html\">http://nginx.org/en/download.html</a></p>\n</blockquote>\n<h5 id=\"安装步骤\"><a href=\"#安装步骤\" class=\"headerlink\" title=\"安装步骤\"></a>安装步骤</h5><h6 id=\"安装依赖\"><a href=\"#安装依赖\" class=\"headerlink\" title=\"安装依赖\"></a>安装依赖</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http:&#x2F;&#x2F;nginx.org&#x2F;download&#x2F;nginx-1.12.2.tar.gz</span><br></pre></td></tr></table></figure>\n<h6 id=\"解压缩\"><a href=\"#解压缩\" class=\"headerlink\" title=\"解压缩\"></a>解压缩</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf nginx-1.12.2.tar.gz</span><br></pre></td></tr></table></figure>\n<h6 id=\"进入解压好的目录\"><a href=\"#进入解压好的目录\" class=\"headerlink\" title=\"进入解压好的目录\"></a>进入解压好的目录</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd nginx-1.12.2&#x2F;</span><br></pre></td></tr></table></figure>\n<h6 id=\"执行配置\"><a href=\"#执行配置\" class=\"headerlink\" title=\"执行配置\"></a>执行配置</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.&#x2F;configure</span><br></pre></td></tr></table></figure>\n<h6 id=\"编译安装-默认安装在-usr-local-nginx\"><a href=\"#编译安装-默认安装在-usr-local-nginx\" class=\"headerlink\" title=\"编译安装(默认安装在/usr/local/nginx)\"></a>编译安装(默认安装在/usr/local/nginx)</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>"},{"title":"git常用命令","date":"2021-02-22T13:17:00.000Z","_content":"#### 新建代码库\n\n```\n    git init\n```\n\n在当前目录新建一个Git代码库\n\n    git init [project-name]\n新建一个目录，将其初始化为Git代码库\n\n    git clone [url]\n下载一个项目和它的整个代码历史\n#### 配置\nGit的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。\n\n    git config --list\n显示当前的Git配置\n\n    git config -e [--global]\n编辑Git配置文件\n\n    git config [--global] user.name \"[name]\"\n    git config [--global] user.email \"[email address]\"\n设置提交代码时的用户信息\n\n#### 增加/删除文件\n添加指定文件到暂存区\n\n    git add [file1] [file2] ...\n\n添加指定目录到暂存区，包括子目录\n\n    git add [dir]\n\n添加当前目录的所有文件到暂存区\n\n    git add .\n\n添加每个变化前，都会要求确认\n对于同一个文件的多处变化，可以实现分次提交\n\n    git add -p\n\n删除工作区文件，并且将这次删除放入暂存区\n\n    git rm [file1] [file2] ...\n\n停止追踪指定文件，但该文件会保留在工作区\n\n    git rm --cached [file]\n\n改名文件，并且将这个改名放入暂存区\n\n    git mv [file-original] [file-renamed]\n\n#### 代码提交\n提交暂存区到仓库区\n\n    git commit -m [message]\n\n提交暂存区的指定文件到仓库区\n\n    git commit [file1] [file2] ... -m [message]\n\n提交工作区自上次commit之后的变化，直接到仓库区\n\n    git commit -a\n\n提交时显示所有diff信息\n\n    git commit -v\n\n使用一次新的commit，替代上一次提交\n如果代码没有任何新变化，则用来改写上一次commit的提交信息\n\n    git commit --amend -m [message]\n\n重做上一次commit，并包括指定文件的新变化\n\n    git commit --amend [file1] [file2] ...\n\n#### 分支\n\n列出所有本地分支\n\n    git branch\n\n列出所有远程分支\n\n    git branch -r\n\n列出所有本地分支和远程分支\n\n    git branch -a\n\n新建一个分支，但依然停留在当前分支\n\n    git branch [branch-name]\n\n新建一个分支，并切换到该分支\n\n    git checkout -b [branch]\n\n新建一个分支，指向指定commit\n\n    git branch [branch] [commit]\n\n新建一个分支，与指定的远程分支建立追踪关系\n\n    git branch --track [branch] [remote-branch]\n\n切换到指定分支，并更新工作区\n\n    git checkout [branch-name]\n\n切换到上一个分支\n\n    git checkout -\n\n建立追踪关系，在现有分支与指定的远程分支之间\n\n    git branch --set-upstream [branch] [remote-branch]\n\n合并指定分支到当前分支\n\n    git merge [branch]\n\n选择一个commit，合并进当前分支\n\n    git cherry-pick [commit]\n\n删除分支\n\n    git branch -d [branch-name]\n\n删除远程分支\n\n    git push origin --delete [branch-name]\n\n    git branch -dr [remote/branch]\n\n#### 标签\n\n列出所有tag\n\n    git tag\n\n新建一个tag在当前commit\n\n    git tag [tag]\n\n新建一个tag在指定commit\n\n    git tag [tag] [commit]\n\n删除本地tag\n\n    git tag -d [tag]\n\n删除远程tag\n\n    git push origin :refs/tags/[tagName]\n\n查看tag信息\n\n    git show [tag]\n\n提交指定tag\n\n    git push [remote] [tag]\n\n提交所有tag\n\n    git push [remote] --tags\n\n新建一个分支，指向某个tag\n\n    git checkout -b [branch] [tag]\n\n#### 查看信息\n\n显示有变更的文件\n\n    git status\n\n显示当前分支的版本历史\n\n    git log\n\n显示commit历史，以及每次commit发生变更的文件\n\n    git log --stat\n\n搜索提交历史，根据关键词\n\n    git log -S [keyword]\n\n显示某个commit之后的所有变动，每个commit占据一行\n\n    git log [tag] HEAD --pretty=format:%s\n\n显示某个commit之后的所有变动，其\"提交说明\"必须符合搜索条件\n\n    git log [tag] HEAD --grep feature\n\n显示某个文件的版本历史，包括文件改名\n\n    git log --follow [file]\n\n    git whatchanged [file]\n\n显示指定文件相关的每一次diff\n\n    git log -p [file]\n\n显示过去5次提交\n\n    git log -5 --pretty --oneline\n\n显示所有提交过的用户，按提交次数排序\n\n    git shortlog -sn\n\n显示指定文件是什么人在什么时间修改过\n\n    git blame [file]\n\n显示暂存区和工作区的差异\n\n    git diff\n\n显示暂存区和上一个commit的差异\n\n    git diff --cached [file]\n\n显示工作区与当前分支最新commit之间的差异\n\n    git diff HEAD\n\n显示两次提交之间的差异\n\n    git diff [first-branch]...[second-branch]\n\n显示今天你写了多少行代码\n\n    git diff --shortstat \"@{0 day ago}\"\n\n显示某次提交的元数据和内容变化\n\n    git show [commit]\n\n显示某次提交发生变化的文件\n\n    git show --name-only [commit]\n\n显示某次提交时，某个文件的内容\n\n    git show [commit]:[filename]\n\n显示当前分支的最近几次提交\n\n    git reflog\n\n#### 远程同步\n\n下载远程仓库的所有变动\n\n    git fetch [remote]\n\n显示所有远程仓库\n\n    git remote -v\n\n显示某个远程仓库的信息\n\n    git remote show [remote]\n\n增加一个新的远程仓库，并命名\n\n    git remote add [shortname] [url]\n\n取回远程仓库的变化，并与本地分支合并\n\n    git pull [remote] [branch]\n\n上传本地指定分支到远程仓库\n\n    git push [remote] [branch]\n\n强行推送当前分支到远程仓库，即使有冲突\n\n    git push [remote] --force\n\n推送所有分支到远程仓库\n\n    git push [remote] --all\n\n#### 撤销\n\n恢复暂存区的指定文件到工作区\n\n    git checkout [file]\n\n恢复某个commit的指定文件到暂存区和工作区\n\n    git checkout [commit] [file]\n\n恢复暂存区的所有文件到工作区\n\n    git checkout .\n\n重置暂存区的指定文件，与上一次commit保持一致，但工作区不变\n\n    git reset [file]\n\n重置暂存区与工作区，与上一次commit保持一致\n\n    git reset --hard\n\n重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变\n\n    git reset [commit]\n\n重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致\n\n    git reset --hard [commit]\n\n重置当前HEAD为指定commit，但保持暂存区和工作区不变\n\n    git reset --keep [commit]\n\n新建一个commit，用来撤销指定commit\n后者的所有变化都将被前者抵消，并且应用到当前分支\n\n    git revert [commit]\n\n暂时将未提交的变化移除，稍后再移入\n\n    git stash\n\n    git stash pop","source":"_posts/git常用命令.md","raw":"---\ntitle: git常用命令\ndate: 2021-02-22 21:17:00\ncategories: \"git\"\ntags: [\"git\"]\n---\n#### 新建代码库\n\n```\n    git init\n```\n\n在当前目录新建一个Git代码库\n\n    git init [project-name]\n新建一个目录，将其初始化为Git代码库\n\n    git clone [url]\n下载一个项目和它的整个代码历史\n#### 配置\nGit的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。\n\n    git config --list\n显示当前的Git配置\n\n    git config -e [--global]\n编辑Git配置文件\n\n    git config [--global] user.name \"[name]\"\n    git config [--global] user.email \"[email address]\"\n设置提交代码时的用户信息\n\n#### 增加/删除文件\n添加指定文件到暂存区\n\n    git add [file1] [file2] ...\n\n添加指定目录到暂存区，包括子目录\n\n    git add [dir]\n\n添加当前目录的所有文件到暂存区\n\n    git add .\n\n添加每个变化前，都会要求确认\n对于同一个文件的多处变化，可以实现分次提交\n\n    git add -p\n\n删除工作区文件，并且将这次删除放入暂存区\n\n    git rm [file1] [file2] ...\n\n停止追踪指定文件，但该文件会保留在工作区\n\n    git rm --cached [file]\n\n改名文件，并且将这个改名放入暂存区\n\n    git mv [file-original] [file-renamed]\n\n#### 代码提交\n提交暂存区到仓库区\n\n    git commit -m [message]\n\n提交暂存区的指定文件到仓库区\n\n    git commit [file1] [file2] ... -m [message]\n\n提交工作区自上次commit之后的变化，直接到仓库区\n\n    git commit -a\n\n提交时显示所有diff信息\n\n    git commit -v\n\n使用一次新的commit，替代上一次提交\n如果代码没有任何新变化，则用来改写上一次commit的提交信息\n\n    git commit --amend -m [message]\n\n重做上一次commit，并包括指定文件的新变化\n\n    git commit --amend [file1] [file2] ...\n\n#### 分支\n\n列出所有本地分支\n\n    git branch\n\n列出所有远程分支\n\n    git branch -r\n\n列出所有本地分支和远程分支\n\n    git branch -a\n\n新建一个分支，但依然停留在当前分支\n\n    git branch [branch-name]\n\n新建一个分支，并切换到该分支\n\n    git checkout -b [branch]\n\n新建一个分支，指向指定commit\n\n    git branch [branch] [commit]\n\n新建一个分支，与指定的远程分支建立追踪关系\n\n    git branch --track [branch] [remote-branch]\n\n切换到指定分支，并更新工作区\n\n    git checkout [branch-name]\n\n切换到上一个分支\n\n    git checkout -\n\n建立追踪关系，在现有分支与指定的远程分支之间\n\n    git branch --set-upstream [branch] [remote-branch]\n\n合并指定分支到当前分支\n\n    git merge [branch]\n\n选择一个commit，合并进当前分支\n\n    git cherry-pick [commit]\n\n删除分支\n\n    git branch -d [branch-name]\n\n删除远程分支\n\n    git push origin --delete [branch-name]\n\n    git branch -dr [remote/branch]\n\n#### 标签\n\n列出所有tag\n\n    git tag\n\n新建一个tag在当前commit\n\n    git tag [tag]\n\n新建一个tag在指定commit\n\n    git tag [tag] [commit]\n\n删除本地tag\n\n    git tag -d [tag]\n\n删除远程tag\n\n    git push origin :refs/tags/[tagName]\n\n查看tag信息\n\n    git show [tag]\n\n提交指定tag\n\n    git push [remote] [tag]\n\n提交所有tag\n\n    git push [remote] --tags\n\n新建一个分支，指向某个tag\n\n    git checkout -b [branch] [tag]\n\n#### 查看信息\n\n显示有变更的文件\n\n    git status\n\n显示当前分支的版本历史\n\n    git log\n\n显示commit历史，以及每次commit发生变更的文件\n\n    git log --stat\n\n搜索提交历史，根据关键词\n\n    git log -S [keyword]\n\n显示某个commit之后的所有变动，每个commit占据一行\n\n    git log [tag] HEAD --pretty=format:%s\n\n显示某个commit之后的所有变动，其\"提交说明\"必须符合搜索条件\n\n    git log [tag] HEAD --grep feature\n\n显示某个文件的版本历史，包括文件改名\n\n    git log --follow [file]\n\n    git whatchanged [file]\n\n显示指定文件相关的每一次diff\n\n    git log -p [file]\n\n显示过去5次提交\n\n    git log -5 --pretty --oneline\n\n显示所有提交过的用户，按提交次数排序\n\n    git shortlog -sn\n\n显示指定文件是什么人在什么时间修改过\n\n    git blame [file]\n\n显示暂存区和工作区的差异\n\n    git diff\n\n显示暂存区和上一个commit的差异\n\n    git diff --cached [file]\n\n显示工作区与当前分支最新commit之间的差异\n\n    git diff HEAD\n\n显示两次提交之间的差异\n\n    git diff [first-branch]...[second-branch]\n\n显示今天你写了多少行代码\n\n    git diff --shortstat \"@{0 day ago}\"\n\n显示某次提交的元数据和内容变化\n\n    git show [commit]\n\n显示某次提交发生变化的文件\n\n    git show --name-only [commit]\n\n显示某次提交时，某个文件的内容\n\n    git show [commit]:[filename]\n\n显示当前分支的最近几次提交\n\n    git reflog\n\n#### 远程同步\n\n下载远程仓库的所有变动\n\n    git fetch [remote]\n\n显示所有远程仓库\n\n    git remote -v\n\n显示某个远程仓库的信息\n\n    git remote show [remote]\n\n增加一个新的远程仓库，并命名\n\n    git remote add [shortname] [url]\n\n取回远程仓库的变化，并与本地分支合并\n\n    git pull [remote] [branch]\n\n上传本地指定分支到远程仓库\n\n    git push [remote] [branch]\n\n强行推送当前分支到远程仓库，即使有冲突\n\n    git push [remote] --force\n\n推送所有分支到远程仓库\n\n    git push [remote] --all\n\n#### 撤销\n\n恢复暂存区的指定文件到工作区\n\n    git checkout [file]\n\n恢复某个commit的指定文件到暂存区和工作区\n\n    git checkout [commit] [file]\n\n恢复暂存区的所有文件到工作区\n\n    git checkout .\n\n重置暂存区的指定文件，与上一次commit保持一致，但工作区不变\n\n    git reset [file]\n\n重置暂存区与工作区，与上一次commit保持一致\n\n    git reset --hard\n\n重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变\n\n    git reset [commit]\n\n重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致\n\n    git reset --hard [commit]\n\n重置当前HEAD为指定commit，但保持暂存区和工作区不变\n\n    git reset --keep [commit]\n\n新建一个commit，用来撤销指定commit\n后者的所有变化都将被前者抵消，并且应用到当前分支\n\n    git revert [commit]\n\n暂时将未提交的变化移除，稍后再移入\n\n    git stash\n\n    git stash pop","slug":"git常用命令","published":1,"updated":"2021-02-27T13:40:23.720Z","_id":"ckljei2mg0000p0dp49nd9hso","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"新建代码库\"><a href=\"#新建代码库\" class=\"headerlink\" title=\"新建代码库\"></a>新建代码库</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br></pre></td></tr></table></figure>\n<p>在当前目录新建一个Git代码库</p>\n<pre><code>git init [project-name]\n</code></pre>\n<p>新建一个目录，将其初始化为Git代码库</p>\n<pre><code>git clone [url]\n</code></pre>\n<p>下载一个项目和它的整个代码历史</p>\n<h4 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h4><p>Git的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。</p>\n<pre><code>git config --list\n</code></pre>\n<p>显示当前的Git配置</p>\n<pre><code>git config -e [--global]\n</code></pre>\n<p>编辑Git配置文件</p>\n<pre><code>git config [--global] user.name &quot;[name]&quot;\ngit config [--global] user.email &quot;[email address]&quot;\n</code></pre>\n<p>设置提交代码时的用户信息</p>\n<h4 id=\"增加-删除文件\"><a href=\"#增加-删除文件\" class=\"headerlink\" title=\"增加/删除文件\"></a>增加/删除文件</h4><p>添加指定文件到暂存区</p>\n<pre><code>git add [file1] [file2] ...\n</code></pre>\n<p>添加指定目录到暂存区，包括子目录</p>\n<pre><code>git add [dir]\n</code></pre>\n<p>添加当前目录的所有文件到暂存区</p>\n<pre><code>git add .\n</code></pre>\n<p>添加每个变化前，都会要求确认<br>对于同一个文件的多处变化，可以实现分次提交</p>\n<pre><code>git add -p\n</code></pre>\n<p>删除工作区文件，并且将这次删除放入暂存区</p>\n<pre><code>git rm [file1] [file2] ...\n</code></pre>\n<p>停止追踪指定文件，但该文件会保留在工作区</p>\n<pre><code>git rm --cached [file]\n</code></pre>\n<p>改名文件，并且将这个改名放入暂存区</p>\n<pre><code>git mv [file-original] [file-renamed]\n</code></pre>\n<h4 id=\"代码提交\"><a href=\"#代码提交\" class=\"headerlink\" title=\"代码提交\"></a>代码提交</h4><p>提交暂存区到仓库区</p>\n<pre><code>git commit -m [message]\n</code></pre>\n<p>提交暂存区的指定文件到仓库区</p>\n<pre><code>git commit [file1] [file2] ... -m [message]\n</code></pre>\n<p>提交工作区自上次commit之后的变化，直接到仓库区</p>\n<pre><code>git commit -a\n</code></pre>\n<p>提交时显示所有diff信息</p>\n<pre><code>git commit -v\n</code></pre>\n<p>使用一次新的commit，替代上一次提交<br>如果代码没有任何新变化，则用来改写上一次commit的提交信息</p>\n<pre><code>git commit --amend -m [message]\n</code></pre>\n<p>重做上一次commit，并包括指定文件的新变化</p>\n<pre><code>git commit --amend [file1] [file2] ...\n</code></pre>\n<h4 id=\"分支\"><a href=\"#分支\" class=\"headerlink\" title=\"分支\"></a>分支</h4><p>列出所有本地分支</p>\n<pre><code>git branch\n</code></pre>\n<p>列出所有远程分支</p>\n<pre><code>git branch -r\n</code></pre>\n<p>列出所有本地分支和远程分支</p>\n<pre><code>git branch -a\n</code></pre>\n<p>新建一个分支，但依然停留在当前分支</p>\n<pre><code>git branch [branch-name]\n</code></pre>\n<p>新建一个分支，并切换到该分支</p>\n<pre><code>git checkout -b [branch]\n</code></pre>\n<p>新建一个分支，指向指定commit</p>\n<pre><code>git branch [branch] [commit]\n</code></pre>\n<p>新建一个分支，与指定的远程分支建立追踪关系</p>\n<pre><code>git branch --track [branch] [remote-branch]\n</code></pre>\n<p>切换到指定分支，并更新工作区</p>\n<pre><code>git checkout [branch-name]\n</code></pre>\n<p>切换到上一个分支</p>\n<pre><code>git checkout -\n</code></pre>\n<p>建立追踪关系，在现有分支与指定的远程分支之间</p>\n<pre><code>git branch --set-upstream [branch] [remote-branch]\n</code></pre>\n<p>合并指定分支到当前分支</p>\n<pre><code>git merge [branch]\n</code></pre>\n<p>选择一个commit，合并进当前分支</p>\n<pre><code>git cherry-pick [commit]\n</code></pre>\n<p>删除分支</p>\n<pre><code>git branch -d [branch-name]\n</code></pre>\n<p>删除远程分支</p>\n<pre><code>git push origin --delete [branch-name]\n\ngit branch -dr [remote/branch]\n</code></pre>\n<h4 id=\"标签\"><a href=\"#标签\" class=\"headerlink\" title=\"标签\"></a>标签</h4><p>列出所有tag</p>\n<pre><code>git tag\n</code></pre>\n<p>新建一个tag在当前commit</p>\n<pre><code>git tag [tag]\n</code></pre>\n<p>新建一个tag在指定commit</p>\n<pre><code>git tag [tag] [commit]\n</code></pre>\n<p>删除本地tag</p>\n<pre><code>git tag -d [tag]\n</code></pre>\n<p>删除远程tag</p>\n<pre><code>git push origin :refs/tags/[tagName]\n</code></pre>\n<p>查看tag信息</p>\n<pre><code>git show [tag]\n</code></pre>\n<p>提交指定tag</p>\n<pre><code>git push [remote] [tag]\n</code></pre>\n<p>提交所有tag</p>\n<pre><code>git push [remote] --tags\n</code></pre>\n<p>新建一个分支，指向某个tag</p>\n<pre><code>git checkout -b [branch] [tag]\n</code></pre>\n<h4 id=\"查看信息\"><a href=\"#查看信息\" class=\"headerlink\" title=\"查看信息\"></a>查看信息</h4><p>显示有变更的文件</p>\n<pre><code>git status\n</code></pre>\n<p>显示当前分支的版本历史</p>\n<pre><code>git log\n</code></pre>\n<p>显示commit历史，以及每次commit发生变更的文件</p>\n<pre><code>git log --stat\n</code></pre>\n<p>搜索提交历史，根据关键词</p>\n<pre><code>git log -S [keyword]\n</code></pre>\n<p>显示某个commit之后的所有变动，每个commit占据一行</p>\n<pre><code>git log [tag] HEAD --pretty=format:%s\n</code></pre>\n<p>显示某个commit之后的所有变动，其”提交说明”必须符合搜索条件</p>\n<pre><code>git log [tag] HEAD --grep feature\n</code></pre>\n<p>显示某个文件的版本历史，包括文件改名</p>\n<pre><code>git log --follow [file]\n\ngit whatchanged [file]\n</code></pre>\n<p>显示指定文件相关的每一次diff</p>\n<pre><code>git log -p [file]\n</code></pre>\n<p>显示过去5次提交</p>\n<pre><code>git log -5 --pretty --oneline\n</code></pre>\n<p>显示所有提交过的用户，按提交次数排序</p>\n<pre><code>git shortlog -sn\n</code></pre>\n<p>显示指定文件是什么人在什么时间修改过</p>\n<pre><code>git blame [file]\n</code></pre>\n<p>显示暂存区和工作区的差异</p>\n<pre><code>git diff\n</code></pre>\n<p>显示暂存区和上一个commit的差异</p>\n<pre><code>git diff --cached [file]\n</code></pre>\n<p>显示工作区与当前分支最新commit之间的差异</p>\n<pre><code>git diff HEAD\n</code></pre>\n<p>显示两次提交之间的差异</p>\n<pre><code>git diff [first-branch]...[second-branch]\n</code></pre>\n<p>显示今天你写了多少行代码</p>\n<pre><code>git diff --shortstat &quot;@&#123;0 day ago&#125;&quot;\n</code></pre>\n<p>显示某次提交的元数据和内容变化</p>\n<pre><code>git show [commit]\n</code></pre>\n<p>显示某次提交发生变化的文件</p>\n<pre><code>git show --name-only [commit]\n</code></pre>\n<p>显示某次提交时，某个文件的内容</p>\n<pre><code>git show [commit]:[filename]\n</code></pre>\n<p>显示当前分支的最近几次提交</p>\n<pre><code>git reflog\n</code></pre>\n<h4 id=\"远程同步\"><a href=\"#远程同步\" class=\"headerlink\" title=\"远程同步\"></a>远程同步</h4><p>下载远程仓库的所有变动</p>\n<pre><code>git fetch [remote]\n</code></pre>\n<p>显示所有远程仓库</p>\n<pre><code>git remote -v\n</code></pre>\n<p>显示某个远程仓库的信息</p>\n<pre><code>git remote show [remote]\n</code></pre>\n<p>增加一个新的远程仓库，并命名</p>\n<pre><code>git remote add [shortname] [url]\n</code></pre>\n<p>取回远程仓库的变化，并与本地分支合并</p>\n<pre><code>git pull [remote] [branch]\n</code></pre>\n<p>上传本地指定分支到远程仓库</p>\n<pre><code>git push [remote] [branch]\n</code></pre>\n<p>强行推送当前分支到远程仓库，即使有冲突</p>\n<pre><code>git push [remote] --force\n</code></pre>\n<p>推送所有分支到远程仓库</p>\n<pre><code>git push [remote] --all\n</code></pre>\n<h4 id=\"撤销\"><a href=\"#撤销\" class=\"headerlink\" title=\"撤销\"></a>撤销</h4><p>恢复暂存区的指定文件到工作区</p>\n<pre><code>git checkout [file]\n</code></pre>\n<p>恢复某个commit的指定文件到暂存区和工作区</p>\n<pre><code>git checkout [commit] [file]\n</code></pre>\n<p>恢复暂存区的所有文件到工作区</p>\n<pre><code>git checkout .\n</code></pre>\n<p>重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</p>\n<pre><code>git reset [file]\n</code></pre>\n<p>重置暂存区与工作区，与上一次commit保持一致</p>\n<pre><code>git reset --hard\n</code></pre>\n<p>重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</p>\n<pre><code>git reset [commit]\n</code></pre>\n<p>重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</p>\n<pre><code>git reset --hard [commit]\n</code></pre>\n<p>重置当前HEAD为指定commit，但保持暂存区和工作区不变</p>\n<pre><code>git reset --keep [commit]\n</code></pre>\n<p>新建一个commit，用来撤销指定commit<br>后者的所有变化都将被前者抵消，并且应用到当前分支</p>\n<pre><code>git revert [commit]\n</code></pre>\n<p>暂时将未提交的变化移除，稍后再移入</p>\n<pre><code>git stash\n\ngit stash pop\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"新建代码库\"><a href=\"#新建代码库\" class=\"headerlink\" title=\"新建代码库\"></a>新建代码库</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br></pre></td></tr></table></figure>\n<p>在当前目录新建一个Git代码库</p>\n<pre><code>git init [project-name]\n</code></pre>\n<p>新建一个目录，将其初始化为Git代码库</p>\n<pre><code>git clone [url]\n</code></pre>\n<p>下载一个项目和它的整个代码历史</p>\n<h4 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h4><p>Git的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。</p>\n<pre><code>git config --list\n</code></pre>\n<p>显示当前的Git配置</p>\n<pre><code>git config -e [--global]\n</code></pre>\n<p>编辑Git配置文件</p>\n<pre><code>git config [--global] user.name &quot;[name]&quot;\ngit config [--global] user.email &quot;[email address]&quot;\n</code></pre>\n<p>设置提交代码时的用户信息</p>\n<h4 id=\"增加-删除文件\"><a href=\"#增加-删除文件\" class=\"headerlink\" title=\"增加/删除文件\"></a>增加/删除文件</h4><p>添加指定文件到暂存区</p>\n<pre><code>git add [file1] [file2] ...\n</code></pre>\n<p>添加指定目录到暂存区，包括子目录</p>\n<pre><code>git add [dir]\n</code></pre>\n<p>添加当前目录的所有文件到暂存区</p>\n<pre><code>git add .\n</code></pre>\n<p>添加每个变化前，都会要求确认<br>对于同一个文件的多处变化，可以实现分次提交</p>\n<pre><code>git add -p\n</code></pre>\n<p>删除工作区文件，并且将这次删除放入暂存区</p>\n<pre><code>git rm [file1] [file2] ...\n</code></pre>\n<p>停止追踪指定文件，但该文件会保留在工作区</p>\n<pre><code>git rm --cached [file]\n</code></pre>\n<p>改名文件，并且将这个改名放入暂存区</p>\n<pre><code>git mv [file-original] [file-renamed]\n</code></pre>\n<h4 id=\"代码提交\"><a href=\"#代码提交\" class=\"headerlink\" title=\"代码提交\"></a>代码提交</h4><p>提交暂存区到仓库区</p>\n<pre><code>git commit -m [message]\n</code></pre>\n<p>提交暂存区的指定文件到仓库区</p>\n<pre><code>git commit [file1] [file2] ... -m [message]\n</code></pre>\n<p>提交工作区自上次commit之后的变化，直接到仓库区</p>\n<pre><code>git commit -a\n</code></pre>\n<p>提交时显示所有diff信息</p>\n<pre><code>git commit -v\n</code></pre>\n<p>使用一次新的commit，替代上一次提交<br>如果代码没有任何新变化，则用来改写上一次commit的提交信息</p>\n<pre><code>git commit --amend -m [message]\n</code></pre>\n<p>重做上一次commit，并包括指定文件的新变化</p>\n<pre><code>git commit --amend [file1] [file2] ...\n</code></pre>\n<h4 id=\"分支\"><a href=\"#分支\" class=\"headerlink\" title=\"分支\"></a>分支</h4><p>列出所有本地分支</p>\n<pre><code>git branch\n</code></pre>\n<p>列出所有远程分支</p>\n<pre><code>git branch -r\n</code></pre>\n<p>列出所有本地分支和远程分支</p>\n<pre><code>git branch -a\n</code></pre>\n<p>新建一个分支，但依然停留在当前分支</p>\n<pre><code>git branch [branch-name]\n</code></pre>\n<p>新建一个分支，并切换到该分支</p>\n<pre><code>git checkout -b [branch]\n</code></pre>\n<p>新建一个分支，指向指定commit</p>\n<pre><code>git branch [branch] [commit]\n</code></pre>\n<p>新建一个分支，与指定的远程分支建立追踪关系</p>\n<pre><code>git branch --track [branch] [remote-branch]\n</code></pre>\n<p>切换到指定分支，并更新工作区</p>\n<pre><code>git checkout [branch-name]\n</code></pre>\n<p>切换到上一个分支</p>\n<pre><code>git checkout -\n</code></pre>\n<p>建立追踪关系，在现有分支与指定的远程分支之间</p>\n<pre><code>git branch --set-upstream [branch] [remote-branch]\n</code></pre>\n<p>合并指定分支到当前分支</p>\n<pre><code>git merge [branch]\n</code></pre>\n<p>选择一个commit，合并进当前分支</p>\n<pre><code>git cherry-pick [commit]\n</code></pre>\n<p>删除分支</p>\n<pre><code>git branch -d [branch-name]\n</code></pre>\n<p>删除远程分支</p>\n<pre><code>git push origin --delete [branch-name]\n\ngit branch -dr [remote/branch]\n</code></pre>\n<h4 id=\"标签\"><a href=\"#标签\" class=\"headerlink\" title=\"标签\"></a>标签</h4><p>列出所有tag</p>\n<pre><code>git tag\n</code></pre>\n<p>新建一个tag在当前commit</p>\n<pre><code>git tag [tag]\n</code></pre>\n<p>新建一个tag在指定commit</p>\n<pre><code>git tag [tag] [commit]\n</code></pre>\n<p>删除本地tag</p>\n<pre><code>git tag -d [tag]\n</code></pre>\n<p>删除远程tag</p>\n<pre><code>git push origin :refs/tags/[tagName]\n</code></pre>\n<p>查看tag信息</p>\n<pre><code>git show [tag]\n</code></pre>\n<p>提交指定tag</p>\n<pre><code>git push [remote] [tag]\n</code></pre>\n<p>提交所有tag</p>\n<pre><code>git push [remote] --tags\n</code></pre>\n<p>新建一个分支，指向某个tag</p>\n<pre><code>git checkout -b [branch] [tag]\n</code></pre>\n<h4 id=\"查看信息\"><a href=\"#查看信息\" class=\"headerlink\" title=\"查看信息\"></a>查看信息</h4><p>显示有变更的文件</p>\n<pre><code>git status\n</code></pre>\n<p>显示当前分支的版本历史</p>\n<pre><code>git log\n</code></pre>\n<p>显示commit历史，以及每次commit发生变更的文件</p>\n<pre><code>git log --stat\n</code></pre>\n<p>搜索提交历史，根据关键词</p>\n<pre><code>git log -S [keyword]\n</code></pre>\n<p>显示某个commit之后的所有变动，每个commit占据一行</p>\n<pre><code>git log [tag] HEAD --pretty=format:%s\n</code></pre>\n<p>显示某个commit之后的所有变动，其”提交说明”必须符合搜索条件</p>\n<pre><code>git log [tag] HEAD --grep feature\n</code></pre>\n<p>显示某个文件的版本历史，包括文件改名</p>\n<pre><code>git log --follow [file]\n\ngit whatchanged [file]\n</code></pre>\n<p>显示指定文件相关的每一次diff</p>\n<pre><code>git log -p [file]\n</code></pre>\n<p>显示过去5次提交</p>\n<pre><code>git log -5 --pretty --oneline\n</code></pre>\n<p>显示所有提交过的用户，按提交次数排序</p>\n<pre><code>git shortlog -sn\n</code></pre>\n<p>显示指定文件是什么人在什么时间修改过</p>\n<pre><code>git blame [file]\n</code></pre>\n<p>显示暂存区和工作区的差异</p>\n<pre><code>git diff\n</code></pre>\n<p>显示暂存区和上一个commit的差异</p>\n<pre><code>git diff --cached [file]\n</code></pre>\n<p>显示工作区与当前分支最新commit之间的差异</p>\n<pre><code>git diff HEAD\n</code></pre>\n<p>显示两次提交之间的差异</p>\n<pre><code>git diff [first-branch]...[second-branch]\n</code></pre>\n<p>显示今天你写了多少行代码</p>\n<pre><code>git diff --shortstat &quot;@&#123;0 day ago&#125;&quot;\n</code></pre>\n<p>显示某次提交的元数据和内容变化</p>\n<pre><code>git show [commit]\n</code></pre>\n<p>显示某次提交发生变化的文件</p>\n<pre><code>git show --name-only [commit]\n</code></pre>\n<p>显示某次提交时，某个文件的内容</p>\n<pre><code>git show [commit]:[filename]\n</code></pre>\n<p>显示当前分支的最近几次提交</p>\n<pre><code>git reflog\n</code></pre>\n<h4 id=\"远程同步\"><a href=\"#远程同步\" class=\"headerlink\" title=\"远程同步\"></a>远程同步</h4><p>下载远程仓库的所有变动</p>\n<pre><code>git fetch [remote]\n</code></pre>\n<p>显示所有远程仓库</p>\n<pre><code>git remote -v\n</code></pre>\n<p>显示某个远程仓库的信息</p>\n<pre><code>git remote show [remote]\n</code></pre>\n<p>增加一个新的远程仓库，并命名</p>\n<pre><code>git remote add [shortname] [url]\n</code></pre>\n<p>取回远程仓库的变化，并与本地分支合并</p>\n<pre><code>git pull [remote] [branch]\n</code></pre>\n<p>上传本地指定分支到远程仓库</p>\n<pre><code>git push [remote] [branch]\n</code></pre>\n<p>强行推送当前分支到远程仓库，即使有冲突</p>\n<pre><code>git push [remote] --force\n</code></pre>\n<p>推送所有分支到远程仓库</p>\n<pre><code>git push [remote] --all\n</code></pre>\n<h4 id=\"撤销\"><a href=\"#撤销\" class=\"headerlink\" title=\"撤销\"></a>撤销</h4><p>恢复暂存区的指定文件到工作区</p>\n<pre><code>git checkout [file]\n</code></pre>\n<p>恢复某个commit的指定文件到暂存区和工作区</p>\n<pre><code>git checkout [commit] [file]\n</code></pre>\n<p>恢复暂存区的所有文件到工作区</p>\n<pre><code>git checkout .\n</code></pre>\n<p>重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</p>\n<pre><code>git reset [file]\n</code></pre>\n<p>重置暂存区与工作区，与上一次commit保持一致</p>\n<pre><code>git reset --hard\n</code></pre>\n<p>重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</p>\n<pre><code>git reset [commit]\n</code></pre>\n<p>重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</p>\n<pre><code>git reset --hard [commit]\n</code></pre>\n<p>重置当前HEAD为指定commit，但保持暂存区和工作区不变</p>\n<pre><code>git reset --keep [commit]\n</code></pre>\n<p>新建一个commit，用来撤销指定commit<br>后者的所有变化都将被前者抵消，并且应用到当前分支</p>\n<pre><code>git revert [commit]\n</code></pre>\n<p>暂时将未提交的变化移除，稍后再移入</p>\n<pre><code>git stash\n\ngit stash pop\n</code></pre>\n"},{"title":"前端页面一键部署到服务器","date":"2021-02-24T13:46:00.000Z","_content":"### 通过ssh本地文件给上传到远程服务器\n\n### 安装\n\n```\n    npm install ssh2-sftp-client -D\n```\n\n### 新建sftp.js文件\n在文件夹根目录新建一个sftp.js文件\n\n### js代码\n\n```\n    const Client = require(\"ssh2-sftp-client\");\n    const path = require(\"path\");\n    // const path = require('path')\n\n    // 先配置一下,个人习惯\n    const config = {\n      path: {\n        // 远程地址 从根目录开始的路径\n        romotePath: \"/data1/web/blog\",\n\n        // 本地地址 相对于当前文件夹所在的路径\n        localPath: path.join(__dirname, \"./public\").replace(/\\\\/g, \"/\"),\n      },\n      romote: {\n        // 服务器 ip 地址\n        host: \"**************\",\n        // 端口号,默认是 22\n        port: \"22\",\n        // 登录的用户名\n        username: \"root\",\n        // 登录密码\n        password: \"***************\",\n      },\n    };\n\n    /* 主方法\n    * @method main\n    * @param{String} localPath 本地路径,不用 path 模块,直接字符串就好了,这个包自己有格式化的\n    * @param{String} romotePath 远程路径\n    * @return{undefined} 返回个*\n    */\n\n    function main(localPath, romotePath) {\n      // 实例化\n      const sftp = new Client();\n      sftp\n        .connect(config.romote)\n        //  先递归删除服务器上的文件夹\n        .then(() => {\n          console.log(\n            \"----------------------------- 删除服务器缓存中... -----------------------------\"\n          );\n          return sftp.rmdir(romotePath, true);\n        })\n        .then((data) => {\n          console.log(\n            \"----------------------------- 删除完成 ----------------------------\"\n          );\n        })\n        .then(() => {\n          console.log(\n            \"----------------------------- 连接成功,上传中... -----------------------------\"\n          );\n          return sftp.uploadDir(localPath, romotePath);\n        })\n        .then((data) => {\n          console.log(\n            \"----------------------------- 上传完成,及时清除缓存 ----------------------------\"\n          );\n        })\n        .catch((err) => {\n          console.log(\n            \"----------------------------- 失败了!出事了!快看看怎么回事! -----------------------------\"\n          );\n          console.log(err);\n        })\n        .finally(() => {\n          // 断开连接\n          sftp.end();\n        });\n    }\n    main(config.path.localPath, config.path.romotePath);\n```\n\n#### 执行\n在当前文件夹中打开终端输入\n\n```\n    node ./sftp.js\n```\n\n#### 配置package.json\n在package.json 新增一个scripts\n\n```\n    \"generate\":\"hexo generate && node ./sftp.js\"\n```\n\n这样就可以在生成完静态文件之后直接上传到服务器了\n\n","source":"_posts/前端页面一键部署到服务器.md","raw":"---\ntitle: 前端页面一键部署到服务器\ndate: 2021-02-24 21:46:00\n---\n### 通过ssh本地文件给上传到远程服务器\n\n### 安装\n\n```\n    npm install ssh2-sftp-client -D\n```\n\n### 新建sftp.js文件\n在文件夹根目录新建一个sftp.js文件\n\n### js代码\n\n```\n    const Client = require(\"ssh2-sftp-client\");\n    const path = require(\"path\");\n    // const path = require('path')\n\n    // 先配置一下,个人习惯\n    const config = {\n      path: {\n        // 远程地址 从根目录开始的路径\n        romotePath: \"/data1/web/blog\",\n\n        // 本地地址 相对于当前文件夹所在的路径\n        localPath: path.join(__dirname, \"./public\").replace(/\\\\/g, \"/\"),\n      },\n      romote: {\n        // 服务器 ip 地址\n        host: \"**************\",\n        // 端口号,默认是 22\n        port: \"22\",\n        // 登录的用户名\n        username: \"root\",\n        // 登录密码\n        password: \"***************\",\n      },\n    };\n\n    /* 主方法\n    * @method main\n    * @param{String} localPath 本地路径,不用 path 模块,直接字符串就好了,这个包自己有格式化的\n    * @param{String} romotePath 远程路径\n    * @return{undefined} 返回个*\n    */\n\n    function main(localPath, romotePath) {\n      // 实例化\n      const sftp = new Client();\n      sftp\n        .connect(config.romote)\n        //  先递归删除服务器上的文件夹\n        .then(() => {\n          console.log(\n            \"----------------------------- 删除服务器缓存中... -----------------------------\"\n          );\n          return sftp.rmdir(romotePath, true);\n        })\n        .then((data) => {\n          console.log(\n            \"----------------------------- 删除完成 ----------------------------\"\n          );\n        })\n        .then(() => {\n          console.log(\n            \"----------------------------- 连接成功,上传中... -----------------------------\"\n          );\n          return sftp.uploadDir(localPath, romotePath);\n        })\n        .then((data) => {\n          console.log(\n            \"----------------------------- 上传完成,及时清除缓存 ----------------------------\"\n          );\n        })\n        .catch((err) => {\n          console.log(\n            \"----------------------------- 失败了!出事了!快看看怎么回事! -----------------------------\"\n          );\n          console.log(err);\n        })\n        .finally(() => {\n          // 断开连接\n          sftp.end();\n        });\n    }\n    main(config.path.localPath, config.path.romotePath);\n```\n\n#### 执行\n在当前文件夹中打开终端输入\n\n```\n    node ./sftp.js\n```\n\n#### 配置package.json\n在package.json 新增一个scripts\n\n```\n    \"generate\":\"hexo generate && node ./sftp.js\"\n```\n\n这样就可以在生成完静态文件之后直接上传到服务器了\n\n","slug":"前端页面一键部署到服务器","published":1,"updated":"2021-02-27T13:42:41.141Z","_id":"ckljhyjki00007gdpgoi4h2it","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"通过ssh本地文件给上传到远程服务器\"><a href=\"#通过ssh本地文件给上传到远程服务器\" class=\"headerlink\" title=\"通过ssh本地文件给上传到远程服务器\"></a>通过ssh本地文件给上传到远程服务器</h3><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install ssh2-sftp-client -D</span><br></pre></td></tr></table></figure>\n<h3 id=\"新建sftp-js文件\"><a href=\"#新建sftp-js文件\" class=\"headerlink\" title=\"新建sftp.js文件\"></a>新建sftp.js文件</h3><p>在文件夹根目录新建一个sftp.js文件</p>\n<h3 id=\"js代码\"><a href=\"#js代码\" class=\"headerlink\" title=\"js代码\"></a>js代码</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const Client &#x3D; require(&quot;ssh2-sftp-client&quot;);</span><br><span class=\"line\">const path &#x3D; require(&quot;path&quot;);</span><br><span class=\"line\">&#x2F;&#x2F; const path &#x3D; require(&#39;path&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 先配置一下,个人习惯</span><br><span class=\"line\">const config &#x3D; &#123;</span><br><span class=\"line\">  path: &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; 远程地址 从根目录开始的路径</span><br><span class=\"line\">    romotePath: &quot;&#x2F;data1&#x2F;web&#x2F;blog&quot;,</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 本地地址 相对于当前文件夹所在的路径</span><br><span class=\"line\">    localPath: path.join(__dirname, &quot;.&#x2F;public&quot;).replace(&#x2F;\\\\&#x2F;g, &quot;&#x2F;&quot;),</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  romote: &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; 服务器 ip 地址</span><br><span class=\"line\">    host: &quot;**************&quot;,</span><br><span class=\"line\">    &#x2F;&#x2F; 端口号,默认是 22</span><br><span class=\"line\">    port: &quot;22&quot;,</span><br><span class=\"line\">    &#x2F;&#x2F; 登录的用户名</span><br><span class=\"line\">    username: &quot;root&quot;,</span><br><span class=\"line\">    &#x2F;&#x2F; 登录密码</span><br><span class=\"line\">    password: &quot;***************&quot;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;* 主方法</span><br><span class=\"line\">* @method main</span><br><span class=\"line\">* @param&#123;String&#125; localPath 本地路径,不用 path 模块,直接字符串就好了,这个包自己有格式化的</span><br><span class=\"line\">* @param&#123;String&#125; romotePath 远程路径</span><br><span class=\"line\">* @return&#123;undefined&#125; 返回个*</span><br><span class=\"line\">*&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\">function main(localPath, romotePath) &#123;</span><br><span class=\"line\">  &#x2F;&#x2F; 实例化</span><br><span class=\"line\">  const sftp &#x3D; new Client();</span><br><span class=\"line\">  sftp</span><br><span class=\"line\">    .connect(config.romote)</span><br><span class=\"line\">    &#x2F;&#x2F;  先递归删除服务器上的文件夹</span><br><span class=\"line\">    .then(() &#x3D;&gt; &#123;</span><br><span class=\"line\">      console.log(</span><br><span class=\"line\">        &quot;----------------------------- 删除服务器缓存中... -----------------------------&quot;</span><br><span class=\"line\">      );</span><br><span class=\"line\">      return sftp.rmdir(romotePath, true);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .then((data) &#x3D;&gt; &#123;</span><br><span class=\"line\">      console.log(</span><br><span class=\"line\">        &quot;----------------------------- 删除完成 ----------------------------&quot;</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .then(() &#x3D;&gt; &#123;</span><br><span class=\"line\">      console.log(</span><br><span class=\"line\">        &quot;----------------------------- 连接成功,上传中... -----------------------------&quot;</span><br><span class=\"line\">      );</span><br><span class=\"line\">      return sftp.uploadDir(localPath, romotePath);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .then((data) &#x3D;&gt; &#123;</span><br><span class=\"line\">      console.log(</span><br><span class=\"line\">        &quot;----------------------------- 上传完成,及时清除缓存 ----------------------------&quot;</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .catch((err) &#x3D;&gt; &#123;</span><br><span class=\"line\">      console.log(</span><br><span class=\"line\">        &quot;----------------------------- 失败了!出事了!快看看怎么回事! -----------------------------&quot;</span><br><span class=\"line\">      );</span><br><span class=\"line\">      console.log(err);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .finally(() &#x3D;&gt; &#123;</span><br><span class=\"line\">      &#x2F;&#x2F; 断开连接</span><br><span class=\"line\">      sftp.end();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">main(config.path.localPath, config.path.romotePath);</span><br></pre></td></tr></table></figure>\n<h4 id=\"执行\"><a href=\"#执行\" class=\"headerlink\" title=\"执行\"></a>执行</h4><p>在当前文件夹中打开终端输入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node .&#x2F;sftp.js</span><br></pre></td></tr></table></figure>\n<h4 id=\"配置package-json\"><a href=\"#配置package-json\" class=\"headerlink\" title=\"配置package.json\"></a>配置package.json</h4><p>在package.json 新增一个scripts</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;generate&quot;:&quot;hexo generate &amp;&amp; node .&#x2F;sftp.js&quot;</span><br></pre></td></tr></table></figure>\n<p>这样就可以在生成完静态文件之后直接上传到服务器了</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"通过ssh本地文件给上传到远程服务器\"><a href=\"#通过ssh本地文件给上传到远程服务器\" class=\"headerlink\" title=\"通过ssh本地文件给上传到远程服务器\"></a>通过ssh本地文件给上传到远程服务器</h3><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install ssh2-sftp-client -D</span><br></pre></td></tr></table></figure>\n<h3 id=\"新建sftp-js文件\"><a href=\"#新建sftp-js文件\" class=\"headerlink\" title=\"新建sftp.js文件\"></a>新建sftp.js文件</h3><p>在文件夹根目录新建一个sftp.js文件</p>\n<h3 id=\"js代码\"><a href=\"#js代码\" class=\"headerlink\" title=\"js代码\"></a>js代码</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const Client &#x3D; require(&quot;ssh2-sftp-client&quot;);</span><br><span class=\"line\">const path &#x3D; require(&quot;path&quot;);</span><br><span class=\"line\">&#x2F;&#x2F; const path &#x3D; require(&#39;path&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 先配置一下,个人习惯</span><br><span class=\"line\">const config &#x3D; &#123;</span><br><span class=\"line\">  path: &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; 远程地址 从根目录开始的路径</span><br><span class=\"line\">    romotePath: &quot;&#x2F;data1&#x2F;web&#x2F;blog&quot;,</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 本地地址 相对于当前文件夹所在的路径</span><br><span class=\"line\">    localPath: path.join(__dirname, &quot;.&#x2F;public&quot;).replace(&#x2F;\\\\&#x2F;g, &quot;&#x2F;&quot;),</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  romote: &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; 服务器 ip 地址</span><br><span class=\"line\">    host: &quot;**************&quot;,</span><br><span class=\"line\">    &#x2F;&#x2F; 端口号,默认是 22</span><br><span class=\"line\">    port: &quot;22&quot;,</span><br><span class=\"line\">    &#x2F;&#x2F; 登录的用户名</span><br><span class=\"line\">    username: &quot;root&quot;,</span><br><span class=\"line\">    &#x2F;&#x2F; 登录密码</span><br><span class=\"line\">    password: &quot;***************&quot;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;* 主方法</span><br><span class=\"line\">* @method main</span><br><span class=\"line\">* @param&#123;String&#125; localPath 本地路径,不用 path 模块,直接字符串就好了,这个包自己有格式化的</span><br><span class=\"line\">* @param&#123;String&#125; romotePath 远程路径</span><br><span class=\"line\">* @return&#123;undefined&#125; 返回个*</span><br><span class=\"line\">*&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\">function main(localPath, romotePath) &#123;</span><br><span class=\"line\">  &#x2F;&#x2F; 实例化</span><br><span class=\"line\">  const sftp &#x3D; new Client();</span><br><span class=\"line\">  sftp</span><br><span class=\"line\">    .connect(config.romote)</span><br><span class=\"line\">    &#x2F;&#x2F;  先递归删除服务器上的文件夹</span><br><span class=\"line\">    .then(() &#x3D;&gt; &#123;</span><br><span class=\"line\">      console.log(</span><br><span class=\"line\">        &quot;----------------------------- 删除服务器缓存中... -----------------------------&quot;</span><br><span class=\"line\">      );</span><br><span class=\"line\">      return sftp.rmdir(romotePath, true);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .then((data) &#x3D;&gt; &#123;</span><br><span class=\"line\">      console.log(</span><br><span class=\"line\">        &quot;----------------------------- 删除完成 ----------------------------&quot;</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .then(() &#x3D;&gt; &#123;</span><br><span class=\"line\">      console.log(</span><br><span class=\"line\">        &quot;----------------------------- 连接成功,上传中... -----------------------------&quot;</span><br><span class=\"line\">      );</span><br><span class=\"line\">      return sftp.uploadDir(localPath, romotePath);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .then((data) &#x3D;&gt; &#123;</span><br><span class=\"line\">      console.log(</span><br><span class=\"line\">        &quot;----------------------------- 上传完成,及时清除缓存 ----------------------------&quot;</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .catch((err) &#x3D;&gt; &#123;</span><br><span class=\"line\">      console.log(</span><br><span class=\"line\">        &quot;----------------------------- 失败了!出事了!快看看怎么回事! -----------------------------&quot;</span><br><span class=\"line\">      );</span><br><span class=\"line\">      console.log(err);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .finally(() &#x3D;&gt; &#123;</span><br><span class=\"line\">      &#x2F;&#x2F; 断开连接</span><br><span class=\"line\">      sftp.end();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">main(config.path.localPath, config.path.romotePath);</span><br></pre></td></tr></table></figure>\n<h4 id=\"执行\"><a href=\"#执行\" class=\"headerlink\" title=\"执行\"></a>执行</h4><p>在当前文件夹中打开终端输入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node .&#x2F;sftp.js</span><br></pre></td></tr></table></figure>\n<h4 id=\"配置package-json\"><a href=\"#配置package-json\" class=\"headerlink\" title=\"配置package.json\"></a>配置package.json</h4><p>在package.json 新增一个scripts</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;generate&quot;:&quot;hexo generate &amp;&amp; node .&#x2F;sftp.js&quot;</span><br></pre></td></tr></table></figure>\n<p>这样就可以在生成完静态文件之后直接上传到服务器了</p>\n"},{"title":"get和post的区别","date":"2021-02-26T12:17:00.000Z","_content":"# GET和POST的区别\n\n## HTTP请求方法\n**说GET和POST之前就先来看一下什么是HTTP吧。**\n\n超文本传输协议（HTTP）的设计目的是保证客户机与服务器之间的通信。\nHTTP 的工作方式是客户机与服务器之间的请求-应答协议。\nweb 浏览器可能是客户端，而计算机上的网络应用程序也可能作为服务器端。\n举例：客户端（浏览器）向服务器提交HTTP请求；服务器向客户端返回响应。响应包含关于请求的状态信息以及可能被请求的内容。\n\nHTTP的请求方法有以下的八种：\n\n    1. GET 向服务器获取指定资源\n    2. HEAD 与GET一致，只不过响应体不返回，只返回响应头\n    3. POST 向服务器提交数据，数据放在请求体里\n    4. PUT 与POST相似，只是具有幂等（注1）特性，一般用于更新\n    5. DELETE 删除服务器指定资源\n    6. TRACE 回显服务器端收到的请求，测试的时候会用到这个\n    7. CONNECT 预留，暂无使用\n    8. OPTIONS 返回服务器所支持的请求方法\n\n##### 随便一个计算机从业人员都可以说出一些他们的区别，例如：\n    1. GET方法用于信息获取，它是安全的（安全：指非修改信息，如数据库方面的信息），而POST方法是用于修改服务器上资源的请求；\n    \n    2. GET请求的数据会附在URL之后，而POST方法提交的数据则放置在HTTP报文实体的主体里，所以POST方法的安全性比GET方法要高；\n    \n    3. GET方法传输的数据量一般限制在2KB，其原因在于：GET是通过URL提交数据，而URL本身对于数据没有限制，但是不同的浏览器对于URL是有限制的，比如IE浏览器对于URL的限制为2KB，而Chrome，FireFox浏览器理论上对于URL是没有限制的，它真正的限制取决于操作系统本身；POST方法对于数据大小是无限制的，真正影响到数据大小的是服务器处理程序的能力。\n    \n\n> 本质上，GET和POST是没有区别的，他们都是http协议中的两种发送请求的方法，而http是基于TCP/IP的关于数据如何在万维网中通信的协议\nHTTP的底层是TCP/IP。所以GET和POST的底层也是TCP/IP，也就是说，GET/POST都是TCP链接。你要给GET加上request body，给POST带上url参数，技术上是完全行的通的。\n\n##### 再来看看HTTP报文\n报文格式上，不带参数时，最大区别就是第一行方法名不同POST方法请求报文第一行是这样的 \n```js\nPOST /uri HTTP/1.1 \\r\\n\n```\nGET方法请求报文第一行是这样的 \n```js\nGET /uri HTTP/1.1 \\r\\n\n```\n是的，不带参数时他们的区别就仅仅是报文的前几个字符不同而已带参数时报文的区别呢？ 在约定中，GET 方法的参数应该放在 url 中，POST 方法参数应该放在 body 中举个例子，如果参数是 name=qiming.c, age=22。GET 方法简约版报文是这样的\n```js\nGET /index.php?name=qiming.c&age=22 HTTP/1.1\nHost: localhost\n```\nPOST 方法简约版报文是这样的\n```js\nPOST /index.php HTTP/1.1\nHost: localhost\nContent-Type: application/x-www-form-urlencoded\n\nname=qiming.c&age=22\n```\n    \n \n   \n##### POST 方法会产生两个TCP数据包？\n有些文章中提到，post 会将 header 和 body 分开发送，先发送 header，服务端返回 100 状态码再发送 body。\n\nHTTP 协议中没有明确说明 POST 会产生两个 TCP 数据包，而且实际测试(Chrome)发现，header 和 body 不会分开发送。\n\n所以，header 和 body 分开发送是部分浏览器或框架的请求方法，不属于 post 必然行为。\n    \n    \n   \n\n#### 注释\n    1. 幂等 在编程中一个幂等操作的特点是其任意多次执行所产生的影响均与一次执行的影响相同。幂等函数，或幂等方法，是指可以使用相同参数重复执行，并能获得相同结果的函数。这些函数不会影响系统状态，也不用担心重复执行会对系统造成改变。例如，“setTrue()”函数就是一个幂等函数,无论多次执行，其结果都是一样的.更复杂的操作幂等保证是利用唯一交易号(流水号)实现.","source":"_posts/Get和Post的区别.md","raw":"---\ntitle: get和post的区别\ndate: 2021-02-26 20:17:00\ncategories: \"面试必看\"\ntag: \"面试\"\n---\n# GET和POST的区别\n\n## HTTP请求方法\n**说GET和POST之前就先来看一下什么是HTTP吧。**\n\n超文本传输协议（HTTP）的设计目的是保证客户机与服务器之间的通信。\nHTTP 的工作方式是客户机与服务器之间的请求-应答协议。\nweb 浏览器可能是客户端，而计算机上的网络应用程序也可能作为服务器端。\n举例：客户端（浏览器）向服务器提交HTTP请求；服务器向客户端返回响应。响应包含关于请求的状态信息以及可能被请求的内容。\n\nHTTP的请求方法有以下的八种：\n\n    1. GET 向服务器获取指定资源\n    2. HEAD 与GET一致，只不过响应体不返回，只返回响应头\n    3. POST 向服务器提交数据，数据放在请求体里\n    4. PUT 与POST相似，只是具有幂等（注1）特性，一般用于更新\n    5. DELETE 删除服务器指定资源\n    6. TRACE 回显服务器端收到的请求，测试的时候会用到这个\n    7. CONNECT 预留，暂无使用\n    8. OPTIONS 返回服务器所支持的请求方法\n\n##### 随便一个计算机从业人员都可以说出一些他们的区别，例如：\n    1. GET方法用于信息获取，它是安全的（安全：指非修改信息，如数据库方面的信息），而POST方法是用于修改服务器上资源的请求；\n    \n    2. GET请求的数据会附在URL之后，而POST方法提交的数据则放置在HTTP报文实体的主体里，所以POST方法的安全性比GET方法要高；\n    \n    3. GET方法传输的数据量一般限制在2KB，其原因在于：GET是通过URL提交数据，而URL本身对于数据没有限制，但是不同的浏览器对于URL是有限制的，比如IE浏览器对于URL的限制为2KB，而Chrome，FireFox浏览器理论上对于URL是没有限制的，它真正的限制取决于操作系统本身；POST方法对于数据大小是无限制的，真正影响到数据大小的是服务器处理程序的能力。\n    \n\n> 本质上，GET和POST是没有区别的，他们都是http协议中的两种发送请求的方法，而http是基于TCP/IP的关于数据如何在万维网中通信的协议\nHTTP的底层是TCP/IP。所以GET和POST的底层也是TCP/IP，也就是说，GET/POST都是TCP链接。你要给GET加上request body，给POST带上url参数，技术上是完全行的通的。\n\n##### 再来看看HTTP报文\n报文格式上，不带参数时，最大区别就是第一行方法名不同POST方法请求报文第一行是这样的 \n```js\nPOST /uri HTTP/1.1 \\r\\n\n```\nGET方法请求报文第一行是这样的 \n```js\nGET /uri HTTP/1.1 \\r\\n\n```\n是的，不带参数时他们的区别就仅仅是报文的前几个字符不同而已带参数时报文的区别呢？ 在约定中，GET 方法的参数应该放在 url 中，POST 方法参数应该放在 body 中举个例子，如果参数是 name=qiming.c, age=22。GET 方法简约版报文是这样的\n```js\nGET /index.php?name=qiming.c&age=22 HTTP/1.1\nHost: localhost\n```\nPOST 方法简约版报文是这样的\n```js\nPOST /index.php HTTP/1.1\nHost: localhost\nContent-Type: application/x-www-form-urlencoded\n\nname=qiming.c&age=22\n```\n    \n \n   \n##### POST 方法会产生两个TCP数据包？\n有些文章中提到，post 会将 header 和 body 分开发送，先发送 header，服务端返回 100 状态码再发送 body。\n\nHTTP 协议中没有明确说明 POST 会产生两个 TCP 数据包，而且实际测试(Chrome)发现，header 和 body 不会分开发送。\n\n所以，header 和 body 分开发送是部分浏览器或框架的请求方法，不属于 post 必然行为。\n    \n    \n   \n\n#### 注释\n    1. 幂等 在编程中一个幂等操作的特点是其任意多次执行所产生的影响均与一次执行的影响相同。幂等函数，或幂等方法，是指可以使用相同参数重复执行，并能获得相同结果的函数。这些函数不会影响系统状态，也不用担心重复执行会对系统造成改变。例如，“setTrue()”函数就是一个幂等函数,无论多次执行，其结果都是一样的.更复杂的操作幂等保证是利用唯一交易号(流水号)实现.","slug":"Get和Post的区别","published":1,"updated":"2021-02-26T12:33:38.306Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cklnpqw0m0000tsdp473ray9r","content":"<h1 id=\"GET和POST的区别\"><a href=\"#GET和POST的区别\" class=\"headerlink\" title=\"GET和POST的区别\"></a>GET和POST的区别</h1><h2 id=\"HTTP请求方法\"><a href=\"#HTTP请求方法\" class=\"headerlink\" title=\"HTTP请求方法\"></a>HTTP请求方法</h2><p><strong>说GET和POST之前就先来看一下什么是HTTP吧。</strong></p>\n<p>超文本传输协议（HTTP）的设计目的是保证客户机与服务器之间的通信。<br>HTTP 的工作方式是客户机与服务器之间的请求-应答协议。<br>web 浏览器可能是客户端，而计算机上的网络应用程序也可能作为服务器端。<br>举例：客户端（浏览器）向服务器提交HTTP请求；服务器向客户端返回响应。响应包含关于请求的状态信息以及可能被请求的内容。</p>\n<p>HTTP的请求方法有以下的八种：</p>\n<pre><code>1. GET 向服务器获取指定资源\n2. HEAD 与GET一致，只不过响应体不返回，只返回响应头\n3. POST 向服务器提交数据，数据放在请求体里\n4. PUT 与POST相似，只是具有幂等（注1）特性，一般用于更新\n5. DELETE 删除服务器指定资源\n6. TRACE 回显服务器端收到的请求，测试的时候会用到这个\n7. CONNECT 预留，暂无使用\n8. OPTIONS 返回服务器所支持的请求方法\n</code></pre>\n<h5 id=\"随便一个计算机从业人员都可以说出一些他们的区别，例如：\"><a href=\"#随便一个计算机从业人员都可以说出一些他们的区别，例如：\" class=\"headerlink\" title=\"随便一个计算机从业人员都可以说出一些他们的区别，例如：\"></a>随便一个计算机从业人员都可以说出一些他们的区别，例如：</h5><pre><code>1. GET方法用于信息获取，它是安全的（安全：指非修改信息，如数据库方面的信息），而POST方法是用于修改服务器上资源的请求；\n\n2. GET请求的数据会附在URL之后，而POST方法提交的数据则放置在HTTP报文实体的主体里，所以POST方法的安全性比GET方法要高；\n\n3. GET方法传输的数据量一般限制在2KB，其原因在于：GET是通过URL提交数据，而URL本身对于数据没有限制，但是不同的浏览器对于URL是有限制的，比如IE浏览器对于URL的限制为2KB，而Chrome，FireFox浏览器理论上对于URL是没有限制的，它真正的限制取决于操作系统本身；POST方法对于数据大小是无限制的，真正影响到数据大小的是服务器处理程序的能力。\n</code></pre>\n<blockquote>\n<p>本质上，GET和POST是没有区别的，他们都是http协议中的两种发送请求的方法，而http是基于TCP/IP的关于数据如何在万维网中通信的协议<br>HTTP的底层是TCP/IP。所以GET和POST的底层也是TCP/IP，也就是说，GET/POST都是TCP链接。你要给GET加上request body，给POST带上url参数，技术上是完全行的通的。</p>\n</blockquote>\n<h5 id=\"再来看看HTTP报文\"><a href=\"#再来看看HTTP报文\" class=\"headerlink\" title=\"再来看看HTTP报文\"></a>再来看看HTTP报文</h5><p>报文格式上，不带参数时，最大区别就是第一行方法名不同POST方法请求报文第一行是这样的 </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST /uri HTTP/<span class=\"number\">1.1</span> \\r\\n</span><br></pre></td></tr></table></figure>\n<p>GET方法请求报文第一行是这样的 </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /uri HTTP/<span class=\"number\">1.1</span> \\r\\n</span><br></pre></td></tr></table></figure>\n<p>是的，不带参数时他们的区别就仅仅是报文的前几个字符不同而已带参数时报文的区别呢？ 在约定中，GET 方法的参数应该放在 url 中，POST 方法参数应该放在 body 中举个例子，如果参数是 name=qiming.c, age=22。GET 方法简约版报文是这样的</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /index.php?name=qiming.c&amp;age=<span class=\"number\">22</span> HTTP/<span class=\"number\">1.1</span></span><br><span class=\"line\">Host: localhost</span><br></pre></td></tr></table></figure>\n<p>POST 方法简约版报文是这样的</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST /index.php HTTP/<span class=\"number\">1.1</span></span><br><span class=\"line\">Host: localhost</span><br><span class=\"line\">Content-Type: application/x-www-form-urlencoded</span><br><span class=\"line\"></span><br><span class=\"line\">name=qiming.c&amp;age=<span class=\"number\">22</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"POST-方法会产生两个TCP数据包？\"><a href=\"#POST-方法会产生两个TCP数据包？\" class=\"headerlink\" title=\"POST 方法会产生两个TCP数据包？\"></a>POST 方法会产生两个TCP数据包？</h5><p>有些文章中提到，post 会将 header 和 body 分开发送，先发送 header，服务端返回 100 状态码再发送 body。</p>\n<p>HTTP 协议中没有明确说明 POST 会产生两个 TCP 数据包，而且实际测试(Chrome)发现，header 和 body 不会分开发送。</p>\n<p>所以，header 和 body 分开发送是部分浏览器或框架的请求方法，不属于 post 必然行为。</p>\n<h4 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h4><pre><code>1. 幂等 在编程中一个幂等操作的特点是其任意多次执行所产生的影响均与一次执行的影响相同。幂等函数，或幂等方法，是指可以使用相同参数重复执行，并能获得相同结果的函数。这些函数不会影响系统状态，也不用担心重复执行会对系统造成改变。例如，“setTrue()”函数就是一个幂等函数,无论多次执行，其结果都是一样的.更复杂的操作幂等保证是利用唯一交易号(流水号)实现.\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"GET和POST的区别\"><a href=\"#GET和POST的区别\" class=\"headerlink\" title=\"GET和POST的区别\"></a>GET和POST的区别</h1><h2 id=\"HTTP请求方法\"><a href=\"#HTTP请求方法\" class=\"headerlink\" title=\"HTTP请求方法\"></a>HTTP请求方法</h2><p><strong>说GET和POST之前就先来看一下什么是HTTP吧。</strong></p>\n<p>超文本传输协议（HTTP）的设计目的是保证客户机与服务器之间的通信。<br>HTTP 的工作方式是客户机与服务器之间的请求-应答协议。<br>web 浏览器可能是客户端，而计算机上的网络应用程序也可能作为服务器端。<br>举例：客户端（浏览器）向服务器提交HTTP请求；服务器向客户端返回响应。响应包含关于请求的状态信息以及可能被请求的内容。</p>\n<p>HTTP的请求方法有以下的八种：</p>\n<pre><code>1. GET 向服务器获取指定资源\n2. HEAD 与GET一致，只不过响应体不返回，只返回响应头\n3. POST 向服务器提交数据，数据放在请求体里\n4. PUT 与POST相似，只是具有幂等（注1）特性，一般用于更新\n5. DELETE 删除服务器指定资源\n6. TRACE 回显服务器端收到的请求，测试的时候会用到这个\n7. CONNECT 预留，暂无使用\n8. OPTIONS 返回服务器所支持的请求方法\n</code></pre>\n<h5 id=\"随便一个计算机从业人员都可以说出一些他们的区别，例如：\"><a href=\"#随便一个计算机从业人员都可以说出一些他们的区别，例如：\" class=\"headerlink\" title=\"随便一个计算机从业人员都可以说出一些他们的区别，例如：\"></a>随便一个计算机从业人员都可以说出一些他们的区别，例如：</h5><pre><code>1. GET方法用于信息获取，它是安全的（安全：指非修改信息，如数据库方面的信息），而POST方法是用于修改服务器上资源的请求；\n\n2. GET请求的数据会附在URL之后，而POST方法提交的数据则放置在HTTP报文实体的主体里，所以POST方法的安全性比GET方法要高；\n\n3. GET方法传输的数据量一般限制在2KB，其原因在于：GET是通过URL提交数据，而URL本身对于数据没有限制，但是不同的浏览器对于URL是有限制的，比如IE浏览器对于URL的限制为2KB，而Chrome，FireFox浏览器理论上对于URL是没有限制的，它真正的限制取决于操作系统本身；POST方法对于数据大小是无限制的，真正影响到数据大小的是服务器处理程序的能力。\n</code></pre>\n<blockquote>\n<p>本质上，GET和POST是没有区别的，他们都是http协议中的两种发送请求的方法，而http是基于TCP/IP的关于数据如何在万维网中通信的协议<br>HTTP的底层是TCP/IP。所以GET和POST的底层也是TCP/IP，也就是说，GET/POST都是TCP链接。你要给GET加上request body，给POST带上url参数，技术上是完全行的通的。</p>\n</blockquote>\n<h5 id=\"再来看看HTTP报文\"><a href=\"#再来看看HTTP报文\" class=\"headerlink\" title=\"再来看看HTTP报文\"></a>再来看看HTTP报文</h5><p>报文格式上，不带参数时，最大区别就是第一行方法名不同POST方法请求报文第一行是这样的 </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST /uri HTTP/<span class=\"number\">1.1</span> \\r\\n</span><br></pre></td></tr></table></figure>\n<p>GET方法请求报文第一行是这样的 </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /uri HTTP/<span class=\"number\">1.1</span> \\r\\n</span><br></pre></td></tr></table></figure>\n<p>是的，不带参数时他们的区别就仅仅是报文的前几个字符不同而已带参数时报文的区别呢？ 在约定中，GET 方法的参数应该放在 url 中，POST 方法参数应该放在 body 中举个例子，如果参数是 name=qiming.c, age=22。GET 方法简约版报文是这样的</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /index.php?name=qiming.c&amp;age=<span class=\"number\">22</span> HTTP/<span class=\"number\">1.1</span></span><br><span class=\"line\">Host: localhost</span><br></pre></td></tr></table></figure>\n<p>POST 方法简约版报文是这样的</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST /index.php HTTP/<span class=\"number\">1.1</span></span><br><span class=\"line\">Host: localhost</span><br><span class=\"line\">Content-Type: application/x-www-form-urlencoded</span><br><span class=\"line\"></span><br><span class=\"line\">name=qiming.c&amp;age=<span class=\"number\">22</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"POST-方法会产生两个TCP数据包？\"><a href=\"#POST-方法会产生两个TCP数据包？\" class=\"headerlink\" title=\"POST 方法会产生两个TCP数据包？\"></a>POST 方法会产生两个TCP数据包？</h5><p>有些文章中提到，post 会将 header 和 body 分开发送，先发送 header，服务端返回 100 状态码再发送 body。</p>\n<p>HTTP 协议中没有明确说明 POST 会产生两个 TCP 数据包，而且实际测试(Chrome)发现，header 和 body 不会分开发送。</p>\n<p>所以，header 和 body 分开发送是部分浏览器或框架的请求方法，不属于 post 必然行为。</p>\n<h4 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h4><pre><code>1. 幂等 在编程中一个幂等操作的特点是其任意多次执行所产生的影响均与一次执行的影响相同。幂等函数，或幂等方法，是指可以使用相同参数重复执行，并能获得相同结果的函数。这些函数不会影响系统状态，也不用担心重复执行会对系统造成改变。例如，“setTrue()”函数就是一个幂等函数,无论多次执行，其结果都是一样的.更复杂的操作幂等保证是利用唯一交易号(流水号)实现.\n</code></pre>\n"},{"title":"爱生气的书店老板","date":"2021-02-23T13:17:00.000Z","_content":"### 爱生气的书店老板\n\n今天，书店老板有一家店打算试营业 customers.length 分钟。每分钟都有一些顾客（customers[i]）会进入书店，所有这些顾客都会在那一分钟结束后离开。\n\n在某些时候，书店老板会生气。 如果书店老板在第 i 分钟生气，那么 grumpy[i] = 1，否则 grumpy[i] = 0。 当书店老板生气时，那一分钟的顾客就会不满意，不生气则他们是满意的。\n\n书店老板知道一个秘密技巧，能抑制自己的情绪，可以让自己连续 X 分钟不生气，但却只能使用一次。\n\n请你返回这一天营业下来，最多有多少客户能够感到满意的数量。\n\n###### 示例：\n\n    输入：customers = [1,0,1,2,1,1,7,5], grumpy = [0,1,0,1,0,1,0,1], X = 3\n    输出：16\n    解释：\n    书店老板在最后 3 分钟保持冷静。\n    感到满意的最大客户数量 = 1 + 1 + 1 + 1 + 7 + 5 = 16.\n \n###### 提示：\n\n    1 <= X <= customers.length == grumpy.length <= 20000\n    0 <= customers[i] <= 1000\n    0 <= grumpy[i] <= 1\n\n#### 解题思路\n\n1. 既然要算出最多有多少客户能感到满意的数量，那么可以先把必定满意也就是grumpy[i]的值为0的客户数量加起来，然后把customers[i]置为0\n2. 利用窗口算法，找到在customers中X个值之和最大的值\n\n#### 结果\n\n```\n    /**\n    * @param {number[]} customers\n    * @param {number[]} grumpy\n    * @param {number} X\n    * @return {number}\n    */\n    var maxSatisfied = function(customers, grumpy, X) {\n      let len = customers.length;\n      let cur = 0;\n      for(let i = 0;i < len;i++){\n        if(grumpy[i] === 0) {\n          cur += customers[i];\n          customers[i] = 0;\n        }\n      }\n      let max = 0,sum = 0;\n      for(let right = 0,left = 0;right < len;right++){\n        sum += customers[right];\n        //  如果right - left的值大于X - 1 说明此时sum的值为X个值的和 那么就将当前窗口向右移动一个位置 也就是减去左边第一个值并将left + 1\n        if(right - left + 1 > X) sum -= customers[left++];\n        max = Math.max(max, sum);\n      }\n      return cur + max;\n    };\n```\n##### 来源：力扣（LeetCode）\n> 链接：https://leetcode-cn.com/problems/grumpy-bookstore-owner","source":"_posts/leetCode/爱生气的书店老板.md","raw":"---\ntitle: 爱生气的书店老板\ndate: 2021-02-23 21:17:00\ncategories: \"leetcode\"\ntags: [\"中等\",\"leetcode\",\"每日打卡\",\"算法\"]\n---\n### 爱生气的书店老板\n\n今天，书店老板有一家店打算试营业 customers.length 分钟。每分钟都有一些顾客（customers[i]）会进入书店，所有这些顾客都会在那一分钟结束后离开。\n\n在某些时候，书店老板会生气。 如果书店老板在第 i 分钟生气，那么 grumpy[i] = 1，否则 grumpy[i] = 0。 当书店老板生气时，那一分钟的顾客就会不满意，不生气则他们是满意的。\n\n书店老板知道一个秘密技巧，能抑制自己的情绪，可以让自己连续 X 分钟不生气，但却只能使用一次。\n\n请你返回这一天营业下来，最多有多少客户能够感到满意的数量。\n\n###### 示例：\n\n    输入：customers = [1,0,1,2,1,1,7,5], grumpy = [0,1,0,1,0,1,0,1], X = 3\n    输出：16\n    解释：\n    书店老板在最后 3 分钟保持冷静。\n    感到满意的最大客户数量 = 1 + 1 + 1 + 1 + 7 + 5 = 16.\n \n###### 提示：\n\n    1 <= X <= customers.length == grumpy.length <= 20000\n    0 <= customers[i] <= 1000\n    0 <= grumpy[i] <= 1\n\n#### 解题思路\n\n1. 既然要算出最多有多少客户能感到满意的数量，那么可以先把必定满意也就是grumpy[i]的值为0的客户数量加起来，然后把customers[i]置为0\n2. 利用窗口算法，找到在customers中X个值之和最大的值\n\n#### 结果\n\n```\n    /**\n    * @param {number[]} customers\n    * @param {number[]} grumpy\n    * @param {number} X\n    * @return {number}\n    */\n    var maxSatisfied = function(customers, grumpy, X) {\n      let len = customers.length;\n      let cur = 0;\n      for(let i = 0;i < len;i++){\n        if(grumpy[i] === 0) {\n          cur += customers[i];\n          customers[i] = 0;\n        }\n      }\n      let max = 0,sum = 0;\n      for(let right = 0,left = 0;right < len;right++){\n        sum += customers[right];\n        //  如果right - left的值大于X - 1 说明此时sum的值为X个值的和 那么就将当前窗口向右移动一个位置 也就是减去左边第一个值并将left + 1\n        if(right - left + 1 > X) sum -= customers[left++];\n        max = Math.max(max, sum);\n      }\n      return cur + max;\n    };\n```\n##### 来源：力扣（LeetCode）\n> 链接：https://leetcode-cn.com/problems/grumpy-bookstore-owner","slug":"leetCode/爱生气的书店老板","published":1,"updated":"2021-03-12T07:33:40.804Z","_id":"cklnpqw0q0001tsdph5hu6a3u","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"爱生气的书店老板\"><a href=\"#爱生气的书店老板\" class=\"headerlink\" title=\"爱生气的书店老板\"></a>爱生气的书店老板</h3><p>今天，书店老板有一家店打算试营业 customers.length 分钟。每分钟都有一些顾客（customers[i]）会进入书店，所有这些顾客都会在那一分钟结束后离开。</p>\n<p>在某些时候，书店老板会生气。 如果书店老板在第 i 分钟生气，那么 grumpy[i] = 1，否则 grumpy[i] = 0。 当书店老板生气时，那一分钟的顾客就会不满意，不生气则他们是满意的。</p>\n<p>书店老板知道一个秘密技巧，能抑制自己的情绪，可以让自己连续 X 分钟不生气，但却只能使用一次。</p>\n<p>请你返回这一天营业下来，最多有多少客户能够感到满意的数量。</p>\n<h6 id=\"示例：\"><a href=\"#示例：\" class=\"headerlink\" title=\"示例：\"></a>示例：</h6><pre><code>输入：customers = [1,0,1,2,1,1,7,5], grumpy = [0,1,0,1,0,1,0,1], X = 3\n输出：16\n解释：\n书店老板在最后 3 分钟保持冷静。\n感到满意的最大客户数量 = 1 + 1 + 1 + 1 + 7 + 5 = 16.\n</code></pre>\n<p> </p>\n<h6 id=\"提示：\"><a href=\"#提示：\" class=\"headerlink\" title=\"提示：\"></a>提示：</h6><pre><code>1 &lt;= X &lt;= customers.length == grumpy.length &lt;= 20000\n0 &lt;= customers[i] &lt;= 1000\n0 &lt;= grumpy[i] &lt;= 1\n</code></pre>\n<h4 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h4><ol>\n<li>既然要算出最多有多少客户能感到满意的数量，那么可以先把必定满意也就是grumpy[i]的值为0的客户数量加起来，然后把customers[i]置为0</li>\n<li>利用窗口算法，找到在customers中X个值之和最大的值</li>\n</ol>\n<h4 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;**</span><br><span class=\"line\">* @param &#123;number[]&#125; customers</span><br><span class=\"line\">* @param &#123;number[]&#125; grumpy</span><br><span class=\"line\">* @param &#123;number&#125; X</span><br><span class=\"line\">* @return &#123;number&#125;</span><br><span class=\"line\">*&#x2F;</span><br><span class=\"line\">var maxSatisfied &#x3D; function(customers, grumpy, X) &#123;</span><br><span class=\"line\">  let len &#x3D; customers.length;</span><br><span class=\"line\">  let cur &#x3D; 0;</span><br><span class=\"line\">  for(let i &#x3D; 0;i &lt; len;i++)&#123;</span><br><span class=\"line\">    if(grumpy[i] &#x3D;&#x3D;&#x3D; 0) &#123;</span><br><span class=\"line\">      cur +&#x3D; customers[i];</span><br><span class=\"line\">      customers[i] &#x3D; 0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  let max &#x3D; 0,sum &#x3D; 0;</span><br><span class=\"line\">  for(let right &#x3D; 0,left &#x3D; 0;right &lt; len;right++)&#123;</span><br><span class=\"line\">    sum +&#x3D; customers[right];</span><br><span class=\"line\">    &#x2F;&#x2F;  如果right - left的值大于X - 1 说明此时sum的值为X个值的和 那么就将当前窗口向右移动一个位置 也就是减去左边第一个值并将left + 1</span><br><span class=\"line\">    if(right - left + 1 &gt; X) sum -&#x3D; customers[left++];</span><br><span class=\"line\">    max &#x3D; Math.max(max, sum);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return cur + max;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h5 id=\"来源：力扣（LeetCode）\"><a href=\"#来源：力扣（LeetCode）\" class=\"headerlink\" title=\"来源：力扣（LeetCode）\"></a>来源：力扣（LeetCode）</h5><blockquote>\n<p>链接：<a href=\"https://leetcode-cn.com/problems/grumpy-bookstore-owner\">https://leetcode-cn.com/problems/grumpy-bookstore-owner</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"爱生气的书店老板\"><a href=\"#爱生气的书店老板\" class=\"headerlink\" title=\"爱生气的书店老板\"></a>爱生气的书店老板</h3><p>今天，书店老板有一家店打算试营业 customers.length 分钟。每分钟都有一些顾客（customers[i]）会进入书店，所有这些顾客都会在那一分钟结束后离开。</p>\n<p>在某些时候，书店老板会生气。 如果书店老板在第 i 分钟生气，那么 grumpy[i] = 1，否则 grumpy[i] = 0。 当书店老板生气时，那一分钟的顾客就会不满意，不生气则他们是满意的。</p>\n<p>书店老板知道一个秘密技巧，能抑制自己的情绪，可以让自己连续 X 分钟不生气，但却只能使用一次。</p>\n<p>请你返回这一天营业下来，最多有多少客户能够感到满意的数量。</p>\n<h6 id=\"示例：\"><a href=\"#示例：\" class=\"headerlink\" title=\"示例：\"></a>示例：</h6><pre><code>输入：customers = [1,0,1,2,1,1,7,5], grumpy = [0,1,0,1,0,1,0,1], X = 3\n输出：16\n解释：\n书店老板在最后 3 分钟保持冷静。\n感到满意的最大客户数量 = 1 + 1 + 1 + 1 + 7 + 5 = 16.\n</code></pre>\n<p> </p>\n<h6 id=\"提示：\"><a href=\"#提示：\" class=\"headerlink\" title=\"提示：\"></a>提示：</h6><pre><code>1 &lt;= X &lt;= customers.length == grumpy.length &lt;= 20000\n0 &lt;= customers[i] &lt;= 1000\n0 &lt;= grumpy[i] &lt;= 1\n</code></pre>\n<h4 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h4><ol>\n<li>既然要算出最多有多少客户能感到满意的数量，那么可以先把必定满意也就是grumpy[i]的值为0的客户数量加起来，然后把customers[i]置为0</li>\n<li>利用窗口算法，找到在customers中X个值之和最大的值</li>\n</ol>\n<h4 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;**</span><br><span class=\"line\">* @param &#123;number[]&#125; customers</span><br><span class=\"line\">* @param &#123;number[]&#125; grumpy</span><br><span class=\"line\">* @param &#123;number&#125; X</span><br><span class=\"line\">* @return &#123;number&#125;</span><br><span class=\"line\">*&#x2F;</span><br><span class=\"line\">var maxSatisfied &#x3D; function(customers, grumpy, X) &#123;</span><br><span class=\"line\">  let len &#x3D; customers.length;</span><br><span class=\"line\">  let cur &#x3D; 0;</span><br><span class=\"line\">  for(let i &#x3D; 0;i &lt; len;i++)&#123;</span><br><span class=\"line\">    if(grumpy[i] &#x3D;&#x3D;&#x3D; 0) &#123;</span><br><span class=\"line\">      cur +&#x3D; customers[i];</span><br><span class=\"line\">      customers[i] &#x3D; 0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  let max &#x3D; 0,sum &#x3D; 0;</span><br><span class=\"line\">  for(let right &#x3D; 0,left &#x3D; 0;right &lt; len;right++)&#123;</span><br><span class=\"line\">    sum +&#x3D; customers[right];</span><br><span class=\"line\">    &#x2F;&#x2F;  如果right - left的值大于X - 1 说明此时sum的值为X个值的和 那么就将当前窗口向右移动一个位置 也就是减去左边第一个值并将left + 1</span><br><span class=\"line\">    if(right - left + 1 &gt; X) sum -&#x3D; customers[left++];</span><br><span class=\"line\">    max &#x3D; Math.max(max, sum);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return cur + max;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h5 id=\"来源：力扣（LeetCode）\"><a href=\"#来源：力扣（LeetCode）\" class=\"headerlink\" title=\"来源：力扣（LeetCode）\"></a>来源：力扣（LeetCode）</h5><blockquote>\n<p>链接：<a href=\"https://leetcode-cn.com/problems/grumpy-bookstore-owner\">https://leetcode-cn.com/problems/grumpy-bookstore-owner</a></p>\n</blockquote>\n"},{"title":"至少有 K 个重复字符的最长子串","date":"2021-02-27T12:36:00.000Z","_content":"### 至少有 K 个重复字符的最长子串\n\n给你一个字符串 s 和一个整数 k ，请你找出 s 中的最长子串， 要求该子串中的每一字符出现次数都不少于 k 。返回这一子串的长度。\n\n#### 示例 1：\n\n    输入：s = \"aaabb\", k = 3\n    输出：3\n    解释：最长子串为 \"aaa\" ，其中 'a' 重复了 3 次。\n\n#### 示例 2：\n\n    输入：s = \"ababbc\", k = 2\n    输出：5\n    解释：最长子串为 \"ababb\" ，其中 'a' 重复了 2 次， 'b' 重复了 3 次。\n \n\n#### 提示：\n\n1. 1 <= s.length <= 104\n2. s 仅由小写英文字母组成\n3. 1 <= k <= 105\n\n### 题解\n\n### 代码\n\n    /**\n      * @param {string} s\n      * @param {number} k\n      * @return {number}\n    */\n    var longestSubstring = function(s, k) {\n\n    };\n\n###### 来源：力扣（LeetCode）\n> 链接：https://leetcode-cn.com/problems/longest-substring-with-at-least-k-repeating-characters","source":"_posts/leetCode/至少有 K 个重复字符的最长子串.md","raw":"---\ntitle: 至少有 K 个重复字符的最长子串\ndate: 2021-02-27 20:36:00\ncategories: \"leetcode\"\ntags: [\"中等\",\"leetcode\",\"每日打卡\",\"算法\"]\n---\n### 至少有 K 个重复字符的最长子串\n\n给你一个字符串 s 和一个整数 k ，请你找出 s 中的最长子串， 要求该子串中的每一字符出现次数都不少于 k 。返回这一子串的长度。\n\n#### 示例 1：\n\n    输入：s = \"aaabb\", k = 3\n    输出：3\n    解释：最长子串为 \"aaa\" ，其中 'a' 重复了 3 次。\n\n#### 示例 2：\n\n    输入：s = \"ababbc\", k = 2\n    输出：5\n    解释：最长子串为 \"ababb\" ，其中 'a' 重复了 2 次， 'b' 重复了 3 次。\n \n\n#### 提示：\n\n1. 1 <= s.length <= 104\n2. s 仅由小写英文字母组成\n3. 1 <= k <= 105\n\n### 题解\n\n### 代码\n\n    /**\n      * @param {string} s\n      * @param {number} k\n      * @return {number}\n    */\n    var longestSubstring = function(s, k) {\n\n    };\n\n###### 来源：力扣（LeetCode）\n> 链接：https://leetcode-cn.com/problems/longest-substring-with-at-least-k-repeating-characters","slug":"leetCode/至少有 K 个重复字符的最长子串","published":1,"updated":"2021-02-27T12:44:21.814Z","_id":"cklnpqw0u0004tsdp68u9c0uy","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"至少有-K-个重复字符的最长子串\"><a href=\"#至少有-K-个重复字符的最长子串\" class=\"headerlink\" title=\"至少有 K 个重复字符的最长子串\"></a>至少有 K 个重复字符的最长子串</h3><p>给你一个字符串 s 和一个整数 k ，请你找出 s 中的最长子串， 要求该子串中的每一字符出现次数都不少于 k 。返回这一子串的长度。</p>\n<h4 id=\"示例-1：\"><a href=\"#示例-1：\" class=\"headerlink\" title=\"示例 1：\"></a>示例 1：</h4><pre><code>输入：s = &quot;aaabb&quot;, k = 3\n输出：3\n解释：最长子串为 &quot;aaa&quot; ，其中 &#39;a&#39; 重复了 3 次。\n</code></pre>\n<h4 id=\"示例-2：\"><a href=\"#示例-2：\" class=\"headerlink\" title=\"示例 2：\"></a>示例 2：</h4><pre><code>输入：s = &quot;ababbc&quot;, k = 2\n输出：5\n解释：最长子串为 &quot;ababb&quot; ，其中 &#39;a&#39; 重复了 2 次， &#39;b&#39; 重复了 3 次。\n</code></pre>\n<p> </p>\n<h4 id=\"提示：\"><a href=\"#提示：\" class=\"headerlink\" title=\"提示：\"></a>提示：</h4><ol>\n<li>1 &lt;= s.length &lt;= 104</li>\n<li>s 仅由小写英文字母组成</li>\n<li>1 &lt;= k &lt;= 105</li>\n</ol>\n<h3 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h3><h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><pre><code>/**\n  * @param &#123;string&#125; s\n  * @param &#123;number&#125; k\n  * @return &#123;number&#125;\n*/\nvar longestSubstring = function(s, k) &#123;\n\n&#125;;\n</code></pre>\n<h6 id=\"来源：力扣（LeetCode）\"><a href=\"#来源：力扣（LeetCode）\" class=\"headerlink\" title=\"来源：力扣（LeetCode）\"></a>来源：力扣（LeetCode）</h6><blockquote>\n<p>链接：<a href=\"https://leetcode-cn.com/problems/longest-substring-with-at-least-k-repeating-characters\">https://leetcode-cn.com/problems/longest-substring-with-at-least-k-repeating-characters</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"至少有-K-个重复字符的最长子串\"><a href=\"#至少有-K-个重复字符的最长子串\" class=\"headerlink\" title=\"至少有 K 个重复字符的最长子串\"></a>至少有 K 个重复字符的最长子串</h3><p>给你一个字符串 s 和一个整数 k ，请你找出 s 中的最长子串， 要求该子串中的每一字符出现次数都不少于 k 。返回这一子串的长度。</p>\n<h4 id=\"示例-1：\"><a href=\"#示例-1：\" class=\"headerlink\" title=\"示例 1：\"></a>示例 1：</h4><pre><code>输入：s = &quot;aaabb&quot;, k = 3\n输出：3\n解释：最长子串为 &quot;aaa&quot; ，其中 &#39;a&#39; 重复了 3 次。\n</code></pre>\n<h4 id=\"示例-2：\"><a href=\"#示例-2：\" class=\"headerlink\" title=\"示例 2：\"></a>示例 2：</h4><pre><code>输入：s = &quot;ababbc&quot;, k = 2\n输出：5\n解释：最长子串为 &quot;ababb&quot; ，其中 &#39;a&#39; 重复了 2 次， &#39;b&#39; 重复了 3 次。\n</code></pre>\n<p> </p>\n<h4 id=\"提示：\"><a href=\"#提示：\" class=\"headerlink\" title=\"提示：\"></a>提示：</h4><ol>\n<li>1 &lt;= s.length &lt;= 104</li>\n<li>s 仅由小写英文字母组成</li>\n<li>1 &lt;= k &lt;= 105</li>\n</ol>\n<h3 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h3><h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><pre><code>/**\n  * @param &#123;string&#125; s\n  * @param &#123;number&#125; k\n  * @return &#123;number&#125;\n*/\nvar longestSubstring = function(s, k) &#123;\n\n&#125;;\n</code></pre>\n<h6 id=\"来源：力扣（LeetCode）\"><a href=\"#来源：力扣（LeetCode）\" class=\"headerlink\" title=\"来源：力扣（LeetCode）\"></a>来源：力扣（LeetCode）</h6><blockquote>\n<p>链接：<a href=\"https://leetcode-cn.com/problems/longest-substring-with-at-least-k-repeating-characters\">https://leetcode-cn.com/problems/longest-substring-with-at-least-k-repeating-characters</a></p>\n</blockquote>\n"},{"title":"浏览器的兼容性","date":"2021-02-26T12:33:00.000Z","_content":"# 什么是浏览器的兼容性\n浏览器兼容性问题又被称为网页兼容性或网站兼容性问题，指网页在各种浏览器上的显示效果可能不一致而产生浏览器和网页间的兼容问题。所以在网站的设计和制作中，做好浏览器兼容，才能够让网站在不同的浏览器下都正常显示。\n\n> 浏览器的兼容性无非还是样式兼容性（css），交互兼容性（javascript），浏览器 hack 三个方面\n\n## 样式兼容性(css)\n![image](https://user-gold-cdn.xitu.io/2018/7/5/16468bfe8343415c?imageslim)\n\n[normalize.css](https://github.com/necolas/normalize.css)\n\n1.图片间隙\n\n    div中的图片间隙\n    bug：在块元素中插入图片时，有时图片会将块元素下方撑大三像素。\n    Hack：给<img>添加声明：display:block\n2.表单元素行高不一致(IE,MOZ,C,O,S)\n\n    bug：表单元素行高对齐方式不一致\n    hack：给表单元素添加声明：float:left;\n3.按钮元素默认大小及样式不一致\n\n    hack1： 统一大小及样式（用a标记模拟）\n    hack2：如果这个按钮是一个图片，直接把图片作为按钮的背景图即可。\n4.鼠标指针bug\n\n    描述：cursor属性的hand属性值只有IE8浏览器识别;\n    hack：如统一某元素鼠标指针形状为手型，应添加声明：cursor:pointer;\n5.透明属性\n\n    IE浏览器写法：filter:alpha(opacity=数值);取值范围 1-100(IE8以下)\n    兼容其他浏览器写法：opacity:数值;(数值的取值范围0-1,0.1,0.2,0.3-----0.9)\n6.父元素里有块元素，如果给子元素添加添加margin-top,父元素会“掉”下来（高度塌陷）\n\n    hack1：给父元素添加overflow：hidden；\n    hack2：给子元素添加float；\n    hack3：给父元素加边框；\n    或者用其他的方法达到我们想要的效果：如给父元素加padding-top\n7.双倍浮向（双倍边距）\n\n    描述：当Ie6及更低版本浏览器在解析浮动元素时，会错误地把浮向边的边界加倍显示。\n    hack:给浮动元素添加声明：display:inline;\n8.当li里的A加display:block或float:left时，出现行高不一致，有的会多出3像素\n\n    hack1：给a加display：inline-block;\n    hack2：给a加display：inline;\n    hack3：给li加float，再加宽度\n9.万能清除浮动法\n\n    父元素选择符:after{content:\".\"; clear:both; display:block; height:0; overflow:hidden; visibility:hidden;}\n\n10.行内块元素之间空白缝隙的问题\n\n    hack1：利用margin 负值，例如Margin-left:-8px;\n    hack2：把行内块写到一行上去\n    hack3：给父盒子加:font-size:0;\n\n## 交互兼容性\n\n![image](https://pic2.zhimg.com/v2-dc2e8fa38c0096dac0aeec90b600ac81_b.jpg)\n\n1、event事件\n\n    通用方式\n    document.onclick=function(e){\n        var e = e || window.event;   //兼容写法\n    }\n\n2、一些“方法”的兼容性写法\n\n    停止事件传播\n    if(evt.stopPropagation){\n        return evt.stopPropagation();    //一定不能漏下evt  方法前一定要写明对象\n    }else{\n        return evt.cancelbuble();\n    }\n\n    阻止默认事件\n    if (e.preventDefault) {\n         e.preventDefault();   //W3C标准\n    }else{\n         e.returnValue = 'false';    //IE\n    }\n\n    获取第一个子节点（next，last都类似）\n    if (obj.lastElementChild) {\n         return obj.firstElementChild;   //非IE6/7/8支持\n    } else{\n         return obj.firstChild;   //IE6/7/8支持\n    };\n    \n    设置监听事件\n    //参数一：对象\n    //参数二：事件类型\n    //参数三：事件处理函数\n    function addEvent(obj, type, fn){\n         if (obj.addEventListener) {\n              obj.addEventListener(type, fn, false);  //非IE\n         } else{\n              obj.attachEvent('on' + type, fn);  //IE\n         }\n    }\n\n3、通过className获取DOM节点\n```js\nfunction getClassName(xxx){\n     var atag = document.all ? document.all : document.getElementsByTagName('*');\n     var arr = [];\n     for (var i = 0; i < atag.length; i++) {\n         var reg = new RegExp('\\\\b' + xxx + '\\\\b', 'g');\n         if (reg.test(atag[i].className)) {\n             arr.push(atag[i]);\n         }\n     }\n     return arr;  //返回的也是数组，包含传入的class所有元素；\n}\n```\n4、event.srcElement问题\n\n    IE：event对象有srcElement属性，没有target属性；\n    Firefox:even对象有target属性，没有srcElement属性。\n```js\nsrcObj = event.srcElement ? event.srcElement : event.target;\n```\n5、firefox与IE的父元素(parentElement)的区别\n\n    IE：obj.parentElement\n    firefox：obj.parentNode\n    hack：都使用obj.parentNode\n## 移动端常见案例\n1、部分情况下对非可点击元素如(label,span)监听click事件时，ios下不会触发\n\n    hack：css中增加cursor:pointer\n2、底部输入框被键盘遮挡问题\n```js\nvar oheight = $(document).height(); //浏览器当前的高度\n$(window).resize(function(){\n     if($(document).height() < oheight){\n          $(\"#footer\").css(\"position\", \"static\");\n     }else{\n          $(\"#footer\").css(\"position\", \"absolute\");\n     }\n});\n```\n3、CSS动画页面闪白,动画卡顿\n```js\n//使用综合属性\n-webkit-transform: translate3d(0, 0, 0);\n-moz-transform: translate3d(0, 0, 0);\n-ms-transform: translate3d(0, 0, 0);\ntransform: translate3d(0, 0, 0);\n```\n4、阻止旋转屏幕时自动调整字体大小\n```js\nhtml, body, form, fieldset, p, div, h1, h2, h3, h4, h5, h6 {-webkit-text-size-adjust:none;}\n```\n5、预加载、自动播放无效\n\n自动播放的有效性受操作系统、浏览器（webview）、版本等的影响，苹果官方规定必须由用户手动触发才会载入音频，所以可以在用户依次输入后，让音频实现预加载:\n```js\ndocument.addEventListener('touchstart', function () {\n     document.getElementsByTagName('audio')[0].play();\n     document.getElementsByTagName('audio')[0].pause();\n});\n```\n6、ios safari时间显示问题\n\n    设置new Date日期格式的时候，在ios中的safari中发现显示效果与其他浏览器不一致。\n    只识别：new Date(\"year/month/day\");\n7、移动端300ms延迟。\n\n    hack1：一般在移动端用tap事件来取代click事件\n    hack2：fastclick可以解决在手机上点击事件的300ms延迟\n8、手机上的flex布局时会有兼容性问题\n```css\n.box{\n    display: -webkit-box;  //老版本语法: Safari, iOS, Android browser, older WebKit browsers. \n    display: -moz-box;     //老版本语法: Firefox (buggy) \n    display: -ms-flexbox;  //混合版本语法: IE 10 \n    display: -webkit-flex; //新版本语法: Chrome 21+ \n    display: flex;         //新版本语法: Opera 12.1, Firefox 22+\n```\n\n\n\n\n\n## 浏览器hack\n\n![image](https://pic1.zhimg.com/v2-46cac38591afd23945a60713cf0bc49c_b.jpg)\n\n1、Firefox\n```css\n@-moz-document url-prefix() { .selector { property: value; } }\n```\n上面是仅仅被Firefox浏览器识别的写法，具体如：\n```css\n@-moz-document url-prefix() { .demo { color:lime; } }\n```\n支持Firefox的还有几种写法：\n```css\n/* 支持所有firefox版本 */ #selector[id=selector] { property: value; } \n或者： @-moz-document url-prefix() { .selector { property: value; }  \n/* 支持所有Gecko内核的浏览器 (包括Firefox) */ *>.selector { property: value; }\n ```\n\n\n2、Webkit枘核浏览器(chrome and safari)\n```css\n@media screen and (-webkit-min-device-pixel-ratio:0) { Selector { property: value; } }\n/*上面写法主要是针对Webkit内核的浏览器，如Google Chrome 和 Safari浏览器：*/\n@media screen and (-webkit-min-device-pixel-ratio:0) { .demo { color: #f36; } }\n ```\n\n3、Opera浏览器\n\n```css\nhtml:first-child>body Selector {property:value;}\n/*或者：*/ @media all and (min-width:0) { Selector {property: value;} } \n/*或者：*/ @media all and (-webkit-min-device-pixel-ratio:10000), not all and (-webkit-min-device-pixel-ratio:0) { head~body Selector { property: value; } }\n/*上面则是Opera浏览器的Hack写法：*/\n@media all and (-webkit-min-device-pixel-ratio:10000), not all and (-webkit-min-device-pixel-ratio:0) { head~body .demo { background: green; } }\n```\n \n\n4、IE9浏览器\n```css\n:root Selector {property: value9;}\n/*上面是IE9的写法，具体应用如下：*/\n:root .demo {color: #ff09;}\n ```\n\n5、IE9以及IE9以下版本\n```css\nSelector {property:value9;}\n/*这种写法只有IE9以及IE9以下版本能识别，这里需要注意此处“9”只能是“9”不能是别的，比如说“8”，不然会失去效果的，如：*/\n\n.demo {background: lime9;}\n```\n6、IE7浏览器\n```css\n*+html Selector{property:value;} 或 *:first-child+html Selector {property:value;}\n/*上面两种是IE7浏览器下才能识别，如：*/\n*+html .demo {background: green;} 或者： *:first-child+html .demo {background: green;}\n```\n\n7、IE7及IE7以下版本浏览器\n```csss\nSelector {*property: value;}\n/*上面的写法在IE7以及其以下版本都可以识别，如：*/\n```\n.demo {*background: red;}\n8、IE6浏览器\n\n    加_下划线即可\n\n \n\n### CSS选择器的Hack写法\n\n下面我们主要来看CSS选择器和CSS属性选择器在不同浏览器的支持情况。下面先来看CSS选择器支持情况。\n\n\n1、IE6以及IE6以下版本浏览器\n```css\n* html .demo {color: green;}\n* ```\n2、仅仅IE7浏览器\n```css\n*:first-child+html .demo {color: green;}\n```\n3、除IE6之外的所有浏览器（IE7-9, Firefox,Safari,Opera）\n```css\nhtml>body .demo {color: green;}\n```\n4、IE8-9,Firefox,Safari,Opear\n```css\nhtml>/**/body .demo {color: green;}\n```\n5、IE9+\n```css\n:root .demo {color: red;}\n```\n6、Firefox浏览器\n```css\n@-moz-document url-prefix() { .demo { color: red; } }\n```\n7、Webkit内核浏览器（Safari和Google Chrome）\n```css\n@media screen and (-webkit-min-device-pixel-ratio:0) { .demo { color: red; } }\n```\n8、Opera浏览器\n```css\n@media all and (-webkit-min-device-pixel-ratio:10000), not all and (-webkit-min-device-pixel-ratio:0) { head~body .demo { color: red; } }\n```\n9、iPhone / mobile webkit\n```css\n@media screen and (max-device-width: 480px) { .demo { color: red } }\n```\nCSS属性Hack写法\n```css\n/*1、IE6浏览器*/\n.demo {_color: red;}\n\n/*2、IE6-7浏览器识别*/\n.demo {*color: red;}\n\n/*3、所有浏览器除IE6浏览外*/\n.demo {color/**/:red;}\n\n/*4、IE6-9浏览器*/\n.demo {color: red9;}\n\n/*5、IE7-8浏览器*/\n.demo {color/***/:red9;}\n```\nIE条件注释，全部采用选择器Hack的写法。这种写法分两步：\n\n1、创建条件样式表，并在HTML中body里添加相应的class类名：\n```\n<!–[if IE6]–><<!–[if IE7]–><!–[if IE8]–><!–[if IE9]–><!–[if !IE]–>\n```\n2、接着创建对应的样式\n```css\n.demo {color: blue;}/*现代浏览器*/ \n.non-ie .demo {color: red;}/*除IE外浏览器*/ \n.ie9 .demo {color: yellow;}/*IE9浏览器*/ \n.ie8 .demo{color: green;}/*IE8浏览器*/ \n.ie7 .demo {color: orange;}/*IE7浏览器*/\n.ie6 .demo {color: lime;}/*IE6浏览器*/ \n@media all and (min-width: 0px){ .demo {color:black;} /* webkit and opera */\n@media screen and (-webkit-min-device-pixel-ratio:0){ .demo{color:#369;}/* webkit */ \n@media all and (-webkit-min-device-pixel-ratio:10000), not all and (-webkit-min-device-pixel-ratio:0) { head~body .demo{color:#cf6;}/* opera */ \n@-moz-document url-prefix(){ .demo{color:#963;}/* firefox * / \n```","source":"_posts/面试/浏览器兼容性.md","raw":"---\ntitle: 浏览器的兼容性\ndate: 2021-02-26 20:33:00\ncategories: \"面试必看\"\ntag: \"面试\"\n---\n# 什么是浏览器的兼容性\n浏览器兼容性问题又被称为网页兼容性或网站兼容性问题，指网页在各种浏览器上的显示效果可能不一致而产生浏览器和网页间的兼容问题。所以在网站的设计和制作中，做好浏览器兼容，才能够让网站在不同的浏览器下都正常显示。\n\n> 浏览器的兼容性无非还是样式兼容性（css），交互兼容性（javascript），浏览器 hack 三个方面\n\n## 样式兼容性(css)\n![image](https://user-gold-cdn.xitu.io/2018/7/5/16468bfe8343415c?imageslim)\n\n[normalize.css](https://github.com/necolas/normalize.css)\n\n1.图片间隙\n\n    div中的图片间隙\n    bug：在块元素中插入图片时，有时图片会将块元素下方撑大三像素。\n    Hack：给<img>添加声明：display:block\n2.表单元素行高不一致(IE,MOZ,C,O,S)\n\n    bug：表单元素行高对齐方式不一致\n    hack：给表单元素添加声明：float:left;\n3.按钮元素默认大小及样式不一致\n\n    hack1： 统一大小及样式（用a标记模拟）\n    hack2：如果这个按钮是一个图片，直接把图片作为按钮的背景图即可。\n4.鼠标指针bug\n\n    描述：cursor属性的hand属性值只有IE8浏览器识别;\n    hack：如统一某元素鼠标指针形状为手型，应添加声明：cursor:pointer;\n5.透明属性\n\n    IE浏览器写法：filter:alpha(opacity=数值);取值范围 1-100(IE8以下)\n    兼容其他浏览器写法：opacity:数值;(数值的取值范围0-1,0.1,0.2,0.3-----0.9)\n6.父元素里有块元素，如果给子元素添加添加margin-top,父元素会“掉”下来（高度塌陷）\n\n    hack1：给父元素添加overflow：hidden；\n    hack2：给子元素添加float；\n    hack3：给父元素加边框；\n    或者用其他的方法达到我们想要的效果：如给父元素加padding-top\n7.双倍浮向（双倍边距）\n\n    描述：当Ie6及更低版本浏览器在解析浮动元素时，会错误地把浮向边的边界加倍显示。\n    hack:给浮动元素添加声明：display:inline;\n8.当li里的A加display:block或float:left时，出现行高不一致，有的会多出3像素\n\n    hack1：给a加display：inline-block;\n    hack2：给a加display：inline;\n    hack3：给li加float，再加宽度\n9.万能清除浮动法\n\n    父元素选择符:after{content:\".\"; clear:both; display:block; height:0; overflow:hidden; visibility:hidden;}\n\n10.行内块元素之间空白缝隙的问题\n\n    hack1：利用margin 负值，例如Margin-left:-8px;\n    hack2：把行内块写到一行上去\n    hack3：给父盒子加:font-size:0;\n\n## 交互兼容性\n\n![image](https://pic2.zhimg.com/v2-dc2e8fa38c0096dac0aeec90b600ac81_b.jpg)\n\n1、event事件\n\n    通用方式\n    document.onclick=function(e){\n        var e = e || window.event;   //兼容写法\n    }\n\n2、一些“方法”的兼容性写法\n\n    停止事件传播\n    if(evt.stopPropagation){\n        return evt.stopPropagation();    //一定不能漏下evt  方法前一定要写明对象\n    }else{\n        return evt.cancelbuble();\n    }\n\n    阻止默认事件\n    if (e.preventDefault) {\n         e.preventDefault();   //W3C标准\n    }else{\n         e.returnValue = 'false';    //IE\n    }\n\n    获取第一个子节点（next，last都类似）\n    if (obj.lastElementChild) {\n         return obj.firstElementChild;   //非IE6/7/8支持\n    } else{\n         return obj.firstChild;   //IE6/7/8支持\n    };\n    \n    设置监听事件\n    //参数一：对象\n    //参数二：事件类型\n    //参数三：事件处理函数\n    function addEvent(obj, type, fn){\n         if (obj.addEventListener) {\n              obj.addEventListener(type, fn, false);  //非IE\n         } else{\n              obj.attachEvent('on' + type, fn);  //IE\n         }\n    }\n\n3、通过className获取DOM节点\n```js\nfunction getClassName(xxx){\n     var atag = document.all ? document.all : document.getElementsByTagName('*');\n     var arr = [];\n     for (var i = 0; i < atag.length; i++) {\n         var reg = new RegExp('\\\\b' + xxx + '\\\\b', 'g');\n         if (reg.test(atag[i].className)) {\n             arr.push(atag[i]);\n         }\n     }\n     return arr;  //返回的也是数组，包含传入的class所有元素；\n}\n```\n4、event.srcElement问题\n\n    IE：event对象有srcElement属性，没有target属性；\n    Firefox:even对象有target属性，没有srcElement属性。\n```js\nsrcObj = event.srcElement ? event.srcElement : event.target;\n```\n5、firefox与IE的父元素(parentElement)的区别\n\n    IE：obj.parentElement\n    firefox：obj.parentNode\n    hack：都使用obj.parentNode\n## 移动端常见案例\n1、部分情况下对非可点击元素如(label,span)监听click事件时，ios下不会触发\n\n    hack：css中增加cursor:pointer\n2、底部输入框被键盘遮挡问题\n```js\nvar oheight = $(document).height(); //浏览器当前的高度\n$(window).resize(function(){\n     if($(document).height() < oheight){\n          $(\"#footer\").css(\"position\", \"static\");\n     }else{\n          $(\"#footer\").css(\"position\", \"absolute\");\n     }\n});\n```\n3、CSS动画页面闪白,动画卡顿\n```js\n//使用综合属性\n-webkit-transform: translate3d(0, 0, 0);\n-moz-transform: translate3d(0, 0, 0);\n-ms-transform: translate3d(0, 0, 0);\ntransform: translate3d(0, 0, 0);\n```\n4、阻止旋转屏幕时自动调整字体大小\n```js\nhtml, body, form, fieldset, p, div, h1, h2, h3, h4, h5, h6 {-webkit-text-size-adjust:none;}\n```\n5、预加载、自动播放无效\n\n自动播放的有效性受操作系统、浏览器（webview）、版本等的影响，苹果官方规定必须由用户手动触发才会载入音频，所以可以在用户依次输入后，让音频实现预加载:\n```js\ndocument.addEventListener('touchstart', function () {\n     document.getElementsByTagName('audio')[0].play();\n     document.getElementsByTagName('audio')[0].pause();\n});\n```\n6、ios safari时间显示问题\n\n    设置new Date日期格式的时候，在ios中的safari中发现显示效果与其他浏览器不一致。\n    只识别：new Date(\"year/month/day\");\n7、移动端300ms延迟。\n\n    hack1：一般在移动端用tap事件来取代click事件\n    hack2：fastclick可以解决在手机上点击事件的300ms延迟\n8、手机上的flex布局时会有兼容性问题\n```css\n.box{\n    display: -webkit-box;  //老版本语法: Safari, iOS, Android browser, older WebKit browsers. \n    display: -moz-box;     //老版本语法: Firefox (buggy) \n    display: -ms-flexbox;  //混合版本语法: IE 10 \n    display: -webkit-flex; //新版本语法: Chrome 21+ \n    display: flex;         //新版本语法: Opera 12.1, Firefox 22+\n```\n\n\n\n\n\n## 浏览器hack\n\n![image](https://pic1.zhimg.com/v2-46cac38591afd23945a60713cf0bc49c_b.jpg)\n\n1、Firefox\n```css\n@-moz-document url-prefix() { .selector { property: value; } }\n```\n上面是仅仅被Firefox浏览器识别的写法，具体如：\n```css\n@-moz-document url-prefix() { .demo { color:lime; } }\n```\n支持Firefox的还有几种写法：\n```css\n/* 支持所有firefox版本 */ #selector[id=selector] { property: value; } \n或者： @-moz-document url-prefix() { .selector { property: value; }  \n/* 支持所有Gecko内核的浏览器 (包括Firefox) */ *>.selector { property: value; }\n ```\n\n\n2、Webkit枘核浏览器(chrome and safari)\n```css\n@media screen and (-webkit-min-device-pixel-ratio:0) { Selector { property: value; } }\n/*上面写法主要是针对Webkit内核的浏览器，如Google Chrome 和 Safari浏览器：*/\n@media screen and (-webkit-min-device-pixel-ratio:0) { .demo { color: #f36; } }\n ```\n\n3、Opera浏览器\n\n```css\nhtml:first-child>body Selector {property:value;}\n/*或者：*/ @media all and (min-width:0) { Selector {property: value;} } \n/*或者：*/ @media all and (-webkit-min-device-pixel-ratio:10000), not all and (-webkit-min-device-pixel-ratio:0) { head~body Selector { property: value; } }\n/*上面则是Opera浏览器的Hack写法：*/\n@media all and (-webkit-min-device-pixel-ratio:10000), not all and (-webkit-min-device-pixel-ratio:0) { head~body .demo { background: green; } }\n```\n \n\n4、IE9浏览器\n```css\n:root Selector {property: value9;}\n/*上面是IE9的写法，具体应用如下：*/\n:root .demo {color: #ff09;}\n ```\n\n5、IE9以及IE9以下版本\n```css\nSelector {property:value9;}\n/*这种写法只有IE9以及IE9以下版本能识别，这里需要注意此处“9”只能是“9”不能是别的，比如说“8”，不然会失去效果的，如：*/\n\n.demo {background: lime9;}\n```\n6、IE7浏览器\n```css\n*+html Selector{property:value;} 或 *:first-child+html Selector {property:value;}\n/*上面两种是IE7浏览器下才能识别，如：*/\n*+html .demo {background: green;} 或者： *:first-child+html .demo {background: green;}\n```\n\n7、IE7及IE7以下版本浏览器\n```csss\nSelector {*property: value;}\n/*上面的写法在IE7以及其以下版本都可以识别，如：*/\n```\n.demo {*background: red;}\n8、IE6浏览器\n\n    加_下划线即可\n\n \n\n### CSS选择器的Hack写法\n\n下面我们主要来看CSS选择器和CSS属性选择器在不同浏览器的支持情况。下面先来看CSS选择器支持情况。\n\n\n1、IE6以及IE6以下版本浏览器\n```css\n* html .demo {color: green;}\n* ```\n2、仅仅IE7浏览器\n```css\n*:first-child+html .demo {color: green;}\n```\n3、除IE6之外的所有浏览器（IE7-9, Firefox,Safari,Opera）\n```css\nhtml>body .demo {color: green;}\n```\n4、IE8-9,Firefox,Safari,Opear\n```css\nhtml>/**/body .demo {color: green;}\n```\n5、IE9+\n```css\n:root .demo {color: red;}\n```\n6、Firefox浏览器\n```css\n@-moz-document url-prefix() { .demo { color: red; } }\n```\n7、Webkit内核浏览器（Safari和Google Chrome）\n```css\n@media screen and (-webkit-min-device-pixel-ratio:0) { .demo { color: red; } }\n```\n8、Opera浏览器\n```css\n@media all and (-webkit-min-device-pixel-ratio:10000), not all and (-webkit-min-device-pixel-ratio:0) { head~body .demo { color: red; } }\n```\n9、iPhone / mobile webkit\n```css\n@media screen and (max-device-width: 480px) { .demo { color: red } }\n```\nCSS属性Hack写法\n```css\n/*1、IE6浏览器*/\n.demo {_color: red;}\n\n/*2、IE6-7浏览器识别*/\n.demo {*color: red;}\n\n/*3、所有浏览器除IE6浏览外*/\n.demo {color/**/:red;}\n\n/*4、IE6-9浏览器*/\n.demo {color: red9;}\n\n/*5、IE7-8浏览器*/\n.demo {color/***/:red9;}\n```\nIE条件注释，全部采用选择器Hack的写法。这种写法分两步：\n\n1、创建条件样式表，并在HTML中body里添加相应的class类名：\n```\n<!–[if IE6]–><<!–[if IE7]–><!–[if IE8]–><!–[if IE9]–><!–[if !IE]–>\n```\n2、接着创建对应的样式\n```css\n.demo {color: blue;}/*现代浏览器*/ \n.non-ie .demo {color: red;}/*除IE外浏览器*/ \n.ie9 .demo {color: yellow;}/*IE9浏览器*/ \n.ie8 .demo{color: green;}/*IE8浏览器*/ \n.ie7 .demo {color: orange;}/*IE7浏览器*/\n.ie6 .demo {color: lime;}/*IE6浏览器*/ \n@media all and (min-width: 0px){ .demo {color:black;} /* webkit and opera */\n@media screen and (-webkit-min-device-pixel-ratio:0){ .demo{color:#369;}/* webkit */ \n@media all and (-webkit-min-device-pixel-ratio:10000), not all and (-webkit-min-device-pixel-ratio:0) { head~body .demo{color:#cf6;}/* opera */ \n@-moz-document url-prefix(){ .demo{color:#963;}/* firefox * / \n```","slug":"面试/浏览器兼容性","published":1,"updated":"2021-02-26T12:33:51.548Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cklnpqw0x0006tsdpdjgqgaxo","content":"<h1 id=\"什么是浏览器的兼容性\"><a href=\"#什么是浏览器的兼容性\" class=\"headerlink\" title=\"什么是浏览器的兼容性\"></a>什么是浏览器的兼容性</h1><p>浏览器兼容性问题又被称为网页兼容性或网站兼容性问题，指网页在各种浏览器上的显示效果可能不一致而产生浏览器和网页间的兼容问题。所以在网站的设计和制作中，做好浏览器兼容，才能够让网站在不同的浏览器下都正常显示。</p>\n<blockquote>\n<p>浏览器的兼容性无非还是样式兼容性（css），交互兼容性（javascript），浏览器 hack 三个方面</p>\n</blockquote>\n<h2 id=\"样式兼容性-css\"><a href=\"#样式兼容性-css\" class=\"headerlink\" title=\"样式兼容性(css)\"></a>样式兼容性(css)</h2><p><img src=\"https://user-gold-cdn.xitu.io/2018/7/5/16468bfe8343415c?imageslim\" alt=\"image\"></p>\n<p><a href=\"https://github.com/necolas/normalize.css\">normalize.css</a></p>\n<p>1.图片间隙</p>\n<pre><code>div中的图片间隙\nbug：在块元素中插入图片时，有时图片会将块元素下方撑大三像素。\nHack：给&lt;img&gt;添加声明：display:block\n</code></pre>\n<p>2.表单元素行高不一致(IE,MOZ,C,O,S)</p>\n<pre><code>bug：表单元素行高对齐方式不一致\nhack：给表单元素添加声明：float:left;\n</code></pre>\n<p>3.按钮元素默认大小及样式不一致</p>\n<pre><code>hack1： 统一大小及样式（用a标记模拟）\nhack2：如果这个按钮是一个图片，直接把图片作为按钮的背景图即可。\n</code></pre>\n<p>4.鼠标指针bug</p>\n<pre><code>描述：cursor属性的hand属性值只有IE8浏览器识别;\nhack：如统一某元素鼠标指针形状为手型，应添加声明：cursor:pointer;\n</code></pre>\n<p>5.透明属性</p>\n<pre><code>IE浏览器写法：filter:alpha(opacity=数值);取值范围 1-100(IE8以下)\n兼容其他浏览器写法：opacity:数值;(数值的取值范围0-1,0.1,0.2,0.3-----0.9)\n</code></pre>\n<p>6.父元素里有块元素，如果给子元素添加添加margin-top,父元素会“掉”下来（高度塌陷）</p>\n<pre><code>hack1：给父元素添加overflow：hidden；\nhack2：给子元素添加float；\nhack3：给父元素加边框；\n或者用其他的方法达到我们想要的效果：如给父元素加padding-top\n</code></pre>\n<p>7.双倍浮向（双倍边距）</p>\n<pre><code>描述：当Ie6及更低版本浏览器在解析浮动元素时，会错误地把浮向边的边界加倍显示。\nhack:给浮动元素添加声明：display:inline;\n</code></pre>\n<p>8.当li里的A加display:block或float:left时，出现行高不一致，有的会多出3像素</p>\n<pre><code>hack1：给a加display：inline-block;\nhack2：给a加display：inline;\nhack3：给li加float，再加宽度\n</code></pre>\n<p>9.万能清除浮动法</p>\n<pre><code>父元素选择符:after&#123;content:&quot;.&quot;; clear:both; display:block; height:0; overflow:hidden; visibility:hidden;&#125;\n</code></pre>\n<p>10.行内块元素之间空白缝隙的问题</p>\n<pre><code>hack1：利用margin 负值，例如Margin-left:-8px;\nhack2：把行内块写到一行上去\nhack3：给父盒子加:font-size:0;\n</code></pre>\n<h2 id=\"交互兼容性\"><a href=\"#交互兼容性\" class=\"headerlink\" title=\"交互兼容性\"></a>交互兼容性</h2><p><img src=\"https://pic2.zhimg.com/v2-dc2e8fa38c0096dac0aeec90b600ac81_b.jpg\" alt=\"image\"></p>\n<p>1、event事件</p>\n<pre><code>通用方式\ndocument.onclick=function(e)&#123;\n    var e = e || window.event;   //兼容写法\n&#125;\n</code></pre>\n<p>2、一些“方法”的兼容性写法</p>\n<pre><code>停止事件传播\nif(evt.stopPropagation)&#123;\n    return evt.stopPropagation();    //一定不能漏下evt  方法前一定要写明对象\n&#125;else&#123;\n    return evt.cancelbuble();\n&#125;\n\n阻止默认事件\nif (e.preventDefault) &#123;\n     e.preventDefault();   //W3C标准\n&#125;else&#123;\n     e.returnValue = &#39;false&#39;;    //IE\n&#125;\n\n获取第一个子节点（next，last都类似）\nif (obj.lastElementChild) &#123;\n     return obj.firstElementChild;   //非IE6/7/8支持\n&#125; else&#123;\n     return obj.firstChild;   //IE6/7/8支持\n&#125;;\n\n设置监听事件\n//参数一：对象\n//参数二：事件类型\n//参数三：事件处理函数\nfunction addEvent(obj, type, fn)&#123;\n     if (obj.addEventListener) &#123;\n          obj.addEventListener(type, fn, false);  //非IE\n     &#125; else&#123;\n          obj.attachEvent(&#39;on&#39; + type, fn);  //IE\n     &#125;\n&#125;\n</code></pre>\n<p>3、通过className获取DOM节点</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getClassName</span>(<span class=\"params\">xxx</span>)</span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">var</span> atag = <span class=\"built_in\">document</span>.all ? <span class=\"built_in\">document</span>.all : <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;*&#x27;</span>);</span><br><span class=\"line\">     <span class=\"keyword\">var</span> arr = [];</span><br><span class=\"line\">     <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; atag.length; i++) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">var</span> reg = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">&#x27;\\\\b&#x27;</span> + xxx + <span class=\"string\">&#x27;\\\\b&#x27;</span>, <span class=\"string\">&#x27;g&#x27;</span>);</span><br><span class=\"line\">         <span class=\"keyword\">if</span> (reg.test(atag[i].className)) &#123;</span><br><span class=\"line\">             arr.push(atag[i]);</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> arr;  <span class=\"comment\">//返回的也是数组，包含传入的class所有元素；</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>4、event.srcElement问题</p>\n<pre><code>IE：event对象有srcElement属性，没有target属性；\nFirefox:even对象有target属性，没有srcElement属性。\n</code></pre>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">srcObj = event.srcElement ? event.srcElement : event.target;</span><br></pre></td></tr></table></figure>\n<p>5、firefox与IE的父元素(parentElement)的区别</p>\n<pre><code>IE：obj.parentElement\nfirefox：obj.parentNode\nhack：都使用obj.parentNode\n</code></pre>\n<h2 id=\"移动端常见案例\"><a href=\"#移动端常见案例\" class=\"headerlink\" title=\"移动端常见案例\"></a>移动端常见案例</h2><p>1、部分情况下对非可点击元素如(label,span)监听click事件时，ios下不会触发</p>\n<pre><code>hack：css中增加cursor:pointer\n</code></pre>\n<p>2、底部输入框被键盘遮挡问题</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> oheight = $(<span class=\"built_in\">document</span>).height(); <span class=\"comment\">//浏览器当前的高度</span></span><br><span class=\"line\">$(<span class=\"built_in\">window</span>).resize(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span>($(<span class=\"built_in\">document</span>).height() &lt; oheight)&#123;</span><br><span class=\"line\">          $(<span class=\"string\">&quot;#footer&quot;</span>).css(<span class=\"string\">&quot;position&quot;</span>, <span class=\"string\">&quot;static&quot;</span>);</span><br><span class=\"line\">     &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">          $(<span class=\"string\">&quot;#footer&quot;</span>).css(<span class=\"string\">&quot;position&quot;</span>, <span class=\"string\">&quot;absolute&quot;</span>);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>3、CSS动画页面闪白,动画卡顿</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//使用综合属性</span></span><br><span class=\"line\">-webkit-transform: translate3d(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">-moz-transform: translate3d(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">-ms-transform: translate3d(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">transform: translate3d(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n<p>4、阻止旋转屏幕时自动调整字体大小</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">html, body, form, fieldset, p, div, h1, h2, h3, h4, h5, h6 &#123;-webkit-text-size-adjust:none;&#125;</span><br></pre></td></tr></table></figure>\n<p>5、预加载、自动播放无效</p>\n<p>自动播放的有效性受操作系统、浏览器（webview）、版本等的影响，苹果官方规定必须由用户手动触发才会载入音频，所以可以在用户依次输入后，让音频实现预加载:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">&#x27;touchstart&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">     <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;audio&#x27;</span>)[<span class=\"number\">0</span>].play();</span><br><span class=\"line\">     <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;audio&#x27;</span>)[<span class=\"number\">0</span>].pause();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>6、ios safari时间显示问题</p>\n<pre><code>设置new Date日期格式的时候，在ios中的safari中发现显示效果与其他浏览器不一致。\n只识别：new Date(&quot;year/month/day&quot;);\n</code></pre>\n<p>7、移动端300ms延迟。</p>\n<pre><code>hack1：一般在移动端用tap事件来取代click事件\nhack2：fastclick可以解决在手机上点击事件的300ms延迟\n</code></pre>\n<p>8、手机上的flex布局时会有兼容性问题</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: -webkit-box;  //老版本语法: Safari, iOS, Android browser, older WebKit browsers. </span><br><span class=\"line\">    display: -moz-box;     //老版本语法: Firefox (buggy) </span><br><span class=\"line\">    display: -ms-flexbox;  //混合版本语法: IE <span class=\"number\">10</span> </span><br><span class=\"line\">    display: -webkit-flex; //新版本语法: Chrome <span class=\"number\">21</span>+ </span><br><span class=\"line\">    display: flex;         //新版本语法: Opera <span class=\"number\">12.1</span>, Firefox <span class=\"number\">22</span>+</span><br></pre></td></tr></table></figure>\n\n\n\n\n<h2 id=\"浏览器hack\"><a href=\"#浏览器hack\" class=\"headerlink\" title=\"浏览器hack\"></a>浏览器hack</h2><p><img src=\"https://pic1.zhimg.com/v2-46cac38591afd23945a60713cf0bc49c_b.jpg\" alt=\"image\"></p>\n<p>1、Firefox</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@-moz-document</span> url-prefix() &#123; <span class=\"selector-class\">.selector</span> &#123; property: value; &#125; &#125;</span><br></pre></td></tr></table></figure>\n<p>上面是仅仅被Firefox浏览器识别的写法，具体如：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@-moz-document</span> url-prefix() &#123; <span class=\"selector-class\">.demo</span> &#123; <span class=\"attribute\">color</span>:lime; &#125; &#125;</span><br></pre></td></tr></table></figure>\n<p>支持Firefox的还有几种写法：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 支持所有firefox版本 */</span> <span class=\"selector-id\">#selector</span><span class=\"selector-attr\">[id=selector]</span> &#123; property: value; &#125; </span><br><span class=\"line\">或者： <span class=\"keyword\">@-moz-document</span> url-prefix() &#123; <span class=\"selector-class\">.selector</span> &#123; property: value; &#125;  </span><br><span class=\"line\"><span class=\"comment\">/* 支持所有Gecko内核的浏览器 (包括Firefox) */</span> *&gt;<span class=\"selector-class\">.selector</span> &#123; property: value; &#125;</span><br></pre></td></tr></table></figure>\n\n<p>2、Webkit枘核浏览器(chrome and safari)</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@media</span> screen <span class=\"keyword\">and</span> (<span class=\"attribute\">-webkit-min-device-pixel-ratio</span>:<span class=\"number\">0</span>) &#123; Selector &#123; property: value; &#125; &#125;</span><br><span class=\"line\"><span class=\"comment\">/*上面写法主要是针对Webkit内核的浏览器，如Google Chrome 和 Safari浏览器：*/</span></span><br><span class=\"line\"><span class=\"keyword\">@media</span> screen <span class=\"keyword\">and</span> (<span class=\"attribute\">-webkit-min-device-pixel-ratio</span>:<span class=\"number\">0</span>) &#123; <span class=\"selector-class\">.demo</span> &#123; <span class=\"attribute\">color</span>: <span class=\"number\">#f36</span>; &#125; &#125;</span><br></pre></td></tr></table></figure>\n<p>3、Opera浏览器</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">html</span><span class=\"selector-pseudo\">:first</span>-child&gt;<span class=\"selector-tag\">body</span> Selector &#123;property:value;&#125;</span><br><span class=\"line\"><span class=\"comment\">/*或者：*/</span> <span class=\"keyword\">@media</span> all <span class=\"keyword\">and</span> (<span class=\"attribute\">min-width</span>:<span class=\"number\">0</span>) &#123; Selector &#123;property: value;&#125; &#125; </span><br><span class=\"line\"><span class=\"comment\">/*或者：*/</span> <span class=\"keyword\">@media</span> all <span class=\"keyword\">and</span> (<span class=\"attribute\">-webkit-min-device-pixel-ratio</span>:<span class=\"number\">10000</span>), <span class=\"keyword\">not</span> all <span class=\"keyword\">and</span> (<span class=\"attribute\">-webkit-min-device-pixel-ratio</span>:<span class=\"number\">0</span>) &#123; head~<span class=\"selector-tag\">body</span> Selector &#123; property: value; &#125; &#125;</span><br><span class=\"line\"><span class=\"comment\">/*上面则是Opera浏览器的Hack写法：*/</span></span><br><span class=\"line\"><span class=\"keyword\">@media</span> all <span class=\"keyword\">and</span> (<span class=\"attribute\">-webkit-min-device-pixel-ratio</span>:<span class=\"number\">10000</span>), <span class=\"keyword\">not</span> all <span class=\"keyword\">and</span> (<span class=\"attribute\">-webkit-min-device-pixel-ratio</span>:<span class=\"number\">0</span>) &#123; head~<span class=\"selector-tag\">body</span> <span class=\"selector-class\">.demo</span> &#123; <span class=\"attribute\">background</span>: green; &#125; &#125;</span><br></pre></td></tr></table></figure>\n<p>4、IE9浏览器</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">:root</span> Selector &#123;property: value9;&#125;</span><br><span class=\"line\"><span class=\"comment\">/*上面是IE9的写法，具体应用如下：*/</span></span><br><span class=\"line\"><span class=\"selector-pseudo\">:root</span> <span class=\"selector-class\">.demo</span> &#123;<span class=\"attribute\">color</span>: <span class=\"number\">#ff0</span>9;&#125;</span><br></pre></td></tr></table></figure>\n<p>5、IE9以及IE9以下版本</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Selector &#123;property:value9;&#125;</span><br><span class=\"line\"><span class=\"comment\">/*这种写法只有IE9以及IE9以下版本能识别，这里需要注意此处“9”只能是“9”不能是别的，比如说“8”，不然会失去效果的，如：*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.demo</span> &#123;<span class=\"attribute\">background</span>: lime9;&#125;</span><br></pre></td></tr></table></figure>\n<p>6、IE7浏览器</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*+<span class=\"selector-tag\">html</span> Selector&#123;property:value;&#125; 或 *<span class=\"selector-pseudo\">:first</span>-child+<span class=\"selector-tag\">html</span> Selector &#123;property:value;&#125;</span><br><span class=\"line\"><span class=\"comment\">/*上面两种是IE7浏览器下才能识别，如：*/</span></span><br><span class=\"line\">*+<span class=\"selector-tag\">html</span> <span class=\"selector-class\">.demo</span> &#123;<span class=\"attribute\">background</span>: green;&#125; 或者： *<span class=\"selector-pseudo\">:first</span>-child+<span class=\"selector-tag\">html</span> <span class=\"selector-class\">.demo</span> &#123;<span class=\"attribute\">background</span>: green;&#125;</span><br></pre></td></tr></table></figure>\n<p>7、IE7及IE7以下版本浏览器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Selector &#123;*property: value;&#125;</span><br><span class=\"line\">&#x2F;*上面的写法在IE7以及其以下版本都可以识别，如：*&#x2F;</span><br></pre></td></tr></table></figure>\n<p>.demo {*background: red;}<br>8、IE6浏览器</p>\n<pre><code>加_下划线即可\n</code></pre>\n<h3 id=\"CSS选择器的Hack写法\"><a href=\"#CSS选择器的Hack写法\" class=\"headerlink\" title=\"CSS选择器的Hack写法\"></a>CSS选择器的Hack写法</h3><p>下面我们主要来看CSS选择器和CSS属性选择器在不同浏览器的支持情况。下面先来看CSS选择器支持情况。</p>\n<p>1、IE6以及IE6以下版本浏览器</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* <span class=\"selector-tag\">html</span> <span class=\"selector-class\">.demo</span> &#123;<span class=\"attribute\">color</span>: green;&#125;</span><br><span class=\"line\">* ```</span><br><span class=\"line\"><span class=\"number\">2</span>、仅仅IE7浏览器</span><br><span class=\"line\">```css</span><br><span class=\"line\">*<span class=\"selector-pseudo\">:first</span>-child+<span class=\"selector-tag\">html</span> <span class=\"selector-class\">.demo</span> &#123;<span class=\"attribute\">color</span>: green;&#125;</span><br></pre></td></tr></table></figure>\n<p>3、除IE6之外的所有浏览器（IE7-9, Firefox,Safari,Opera）</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">html</span>&gt;<span class=\"selector-tag\">body</span> <span class=\"selector-class\">.demo</span> &#123;<span class=\"attribute\">color</span>: green;&#125;</span><br></pre></td></tr></table></figure>\n<p>4、IE8-9,Firefox,Safari,Opear</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">html</span>&gt;<span class=\"comment\">/**/</span><span class=\"selector-tag\">body</span> <span class=\"selector-class\">.demo</span> &#123;<span class=\"attribute\">color</span>: green;&#125;</span><br></pre></td></tr></table></figure>\n<p>5、IE9+</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">:root</span> <span class=\"selector-class\">.demo</span> &#123;<span class=\"attribute\">color</span>: red;&#125;</span><br></pre></td></tr></table></figure>\n<p>6、Firefox浏览器</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@-moz-document</span> url-prefix() &#123; <span class=\"selector-class\">.demo</span> &#123; <span class=\"attribute\">color</span>: red; &#125; &#125;</span><br></pre></td></tr></table></figure>\n<p>7、Webkit内核浏览器（Safari和Google Chrome）</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@media</span> screen <span class=\"keyword\">and</span> (<span class=\"attribute\">-webkit-min-device-pixel-ratio</span>:<span class=\"number\">0</span>) &#123; <span class=\"selector-class\">.demo</span> &#123; <span class=\"attribute\">color</span>: red; &#125; &#125;</span><br></pre></td></tr></table></figure>\n<p>8、Opera浏览器</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@media</span> all <span class=\"keyword\">and</span> (<span class=\"attribute\">-webkit-min-device-pixel-ratio</span>:<span class=\"number\">10000</span>), <span class=\"keyword\">not</span> all <span class=\"keyword\">and</span> (<span class=\"attribute\">-webkit-min-device-pixel-ratio</span>:<span class=\"number\">0</span>) &#123; head~<span class=\"selector-tag\">body</span> <span class=\"selector-class\">.demo</span> &#123; <span class=\"attribute\">color</span>: red; &#125; &#125;</span><br></pre></td></tr></table></figure>\n<p>9、iPhone / mobile webkit</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@media</span> screen <span class=\"keyword\">and</span> (<span class=\"attribute\">max-device-width</span>: <span class=\"number\">480px</span>) &#123; <span class=\"selector-class\">.demo</span> &#123; <span class=\"attribute\">color</span>: red &#125; &#125;</span><br></pre></td></tr></table></figure>\n<p>CSS属性Hack写法</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*1、IE6浏览器*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.demo</span> &#123;_color: red;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*2、IE6-7浏览器识别*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.demo</span> &#123;*<span class=\"attribute\">color</span>: red;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*3、所有浏览器除IE6浏览外*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.demo</span> &#123;<span class=\"attribute\">color</span><span class=\"comment\">/**/</span>:red;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*4、IE6-9浏览器*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.demo</span> &#123;<span class=\"attribute\">color</span>: red9;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*5、IE7-8浏览器*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.demo</span> &#123;<span class=\"attribute\">color</span><span class=\"comment\">/***/</span>:red9;&#125;</span><br></pre></td></tr></table></figure>\n<p>IE条件注释，全部采用选择器Hack的写法。这种写法分两步：</p>\n<p>1、创建条件样式表，并在HTML中body里添加相应的class类名：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!–[if IE6]–&gt;&lt;&lt;!–[if IE7]–&gt;&lt;!–[if IE8]–&gt;&lt;!–[if IE9]–&gt;&lt;!–[if !IE]–&gt;</span><br></pre></td></tr></table></figure>\n<p>2、接着创建对应的样式</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.demo</span> &#123;<span class=\"attribute\">color</span>: blue;&#125;<span class=\"comment\">/*现代浏览器*/</span> </span><br><span class=\"line\"><span class=\"selector-class\">.non-ie</span> <span class=\"selector-class\">.demo</span> &#123;<span class=\"attribute\">color</span>: red;&#125;<span class=\"comment\">/*除IE外浏览器*/</span> </span><br><span class=\"line\"><span class=\"selector-class\">.ie9</span> <span class=\"selector-class\">.demo</span> &#123;<span class=\"attribute\">color</span>: yellow;&#125;<span class=\"comment\">/*IE9浏览器*/</span> </span><br><span class=\"line\"><span class=\"selector-class\">.ie8</span> <span class=\"selector-class\">.demo</span>&#123;<span class=\"attribute\">color</span>: green;&#125;<span class=\"comment\">/*IE8浏览器*/</span> </span><br><span class=\"line\"><span class=\"selector-class\">.ie7</span> <span class=\"selector-class\">.demo</span> &#123;<span class=\"attribute\">color</span>: orange;&#125;<span class=\"comment\">/*IE7浏览器*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.ie6</span> <span class=\"selector-class\">.demo</span> &#123;<span class=\"attribute\">color</span>: lime;&#125;<span class=\"comment\">/*IE6浏览器*/</span> </span><br><span class=\"line\"><span class=\"keyword\">@media</span> all <span class=\"keyword\">and</span> (<span class=\"attribute\">min-width</span>: <span class=\"number\">0px</span>)&#123; <span class=\"selector-class\">.demo</span> &#123;<span class=\"attribute\">color</span>:black;&#125; <span class=\"comment\">/* webkit and opera */</span></span><br><span class=\"line\"><span class=\"keyword\">@media</span> screen <span class=\"keyword\">and</span> (<span class=\"attribute\">-webkit-min-device-pixel-ratio</span>:<span class=\"number\">0</span>)&#123; <span class=\"selector-class\">.demo</span>&#123;<span class=\"attribute\">color</span>:<span class=\"number\">#369</span>;&#125;<span class=\"comment\">/* webkit */</span> </span><br><span class=\"line\"><span class=\"keyword\">@media</span> all <span class=\"keyword\">and</span> (<span class=\"attribute\">-webkit-min-device-pixel-ratio</span>:<span class=\"number\">10000</span>), <span class=\"keyword\">not</span> all <span class=\"keyword\">and</span> (<span class=\"attribute\">-webkit-min-device-pixel-ratio</span>:<span class=\"number\">0</span>) &#123; head~<span class=\"selector-tag\">body</span> <span class=\"selector-class\">.demo</span>&#123;<span class=\"attribute\">color</span>:<span class=\"number\">#cf6</span>;&#125;<span class=\"comment\">/* opera */</span> </span><br><span class=\"line\"><span class=\"keyword\">@-moz-document</span> url-prefix()&#123; <span class=\"selector-class\">.demo</span>&#123;<span class=\"attribute\">color</span>:<span class=\"number\">#963</span>;&#125;<span class=\"comment\">/* firefox * / </span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"什么是浏览器的兼容性\"><a href=\"#什么是浏览器的兼容性\" class=\"headerlink\" title=\"什么是浏览器的兼容性\"></a>什么是浏览器的兼容性</h1><p>浏览器兼容性问题又被称为网页兼容性或网站兼容性问题，指网页在各种浏览器上的显示效果可能不一致而产生浏览器和网页间的兼容问题。所以在网站的设计和制作中，做好浏览器兼容，才能够让网站在不同的浏览器下都正常显示。</p>\n<blockquote>\n<p>浏览器的兼容性无非还是样式兼容性（css），交互兼容性（javascript），浏览器 hack 三个方面</p>\n</blockquote>\n<h2 id=\"样式兼容性-css\"><a href=\"#样式兼容性-css\" class=\"headerlink\" title=\"样式兼容性(css)\"></a>样式兼容性(css)</h2><p><img src=\"https://user-gold-cdn.xitu.io/2018/7/5/16468bfe8343415c?imageslim\" alt=\"image\"></p>\n<p><a href=\"https://github.com/necolas/normalize.css\">normalize.css</a></p>\n<p>1.图片间隙</p>\n<pre><code>div中的图片间隙\nbug：在块元素中插入图片时，有时图片会将块元素下方撑大三像素。\nHack：给&lt;img&gt;添加声明：display:block\n</code></pre>\n<p>2.表单元素行高不一致(IE,MOZ,C,O,S)</p>\n<pre><code>bug：表单元素行高对齐方式不一致\nhack：给表单元素添加声明：float:left;\n</code></pre>\n<p>3.按钮元素默认大小及样式不一致</p>\n<pre><code>hack1： 统一大小及样式（用a标记模拟）\nhack2：如果这个按钮是一个图片，直接把图片作为按钮的背景图即可。\n</code></pre>\n<p>4.鼠标指针bug</p>\n<pre><code>描述：cursor属性的hand属性值只有IE8浏览器识别;\nhack：如统一某元素鼠标指针形状为手型，应添加声明：cursor:pointer;\n</code></pre>\n<p>5.透明属性</p>\n<pre><code>IE浏览器写法：filter:alpha(opacity=数值);取值范围 1-100(IE8以下)\n兼容其他浏览器写法：opacity:数值;(数值的取值范围0-1,0.1,0.2,0.3-----0.9)\n</code></pre>\n<p>6.父元素里有块元素，如果给子元素添加添加margin-top,父元素会“掉”下来（高度塌陷）</p>\n<pre><code>hack1：给父元素添加overflow：hidden；\nhack2：给子元素添加float；\nhack3：给父元素加边框；\n或者用其他的方法达到我们想要的效果：如给父元素加padding-top\n</code></pre>\n<p>7.双倍浮向（双倍边距）</p>\n<pre><code>描述：当Ie6及更低版本浏览器在解析浮动元素时，会错误地把浮向边的边界加倍显示。\nhack:给浮动元素添加声明：display:inline;\n</code></pre>\n<p>8.当li里的A加display:block或float:left时，出现行高不一致，有的会多出3像素</p>\n<pre><code>hack1：给a加display：inline-block;\nhack2：给a加display：inline;\nhack3：给li加float，再加宽度\n</code></pre>\n<p>9.万能清除浮动法</p>\n<pre><code>父元素选择符:after&#123;content:&quot;.&quot;; clear:both; display:block; height:0; overflow:hidden; visibility:hidden;&#125;\n</code></pre>\n<p>10.行内块元素之间空白缝隙的问题</p>\n<pre><code>hack1：利用margin 负值，例如Margin-left:-8px;\nhack2：把行内块写到一行上去\nhack3：给父盒子加:font-size:0;\n</code></pre>\n<h2 id=\"交互兼容性\"><a href=\"#交互兼容性\" class=\"headerlink\" title=\"交互兼容性\"></a>交互兼容性</h2><p><img src=\"https://pic2.zhimg.com/v2-dc2e8fa38c0096dac0aeec90b600ac81_b.jpg\" alt=\"image\"></p>\n<p>1、event事件</p>\n<pre><code>通用方式\ndocument.onclick=function(e)&#123;\n    var e = e || window.event;   //兼容写法\n&#125;\n</code></pre>\n<p>2、一些“方法”的兼容性写法</p>\n<pre><code>停止事件传播\nif(evt.stopPropagation)&#123;\n    return evt.stopPropagation();    //一定不能漏下evt  方法前一定要写明对象\n&#125;else&#123;\n    return evt.cancelbuble();\n&#125;\n\n阻止默认事件\nif (e.preventDefault) &#123;\n     e.preventDefault();   //W3C标准\n&#125;else&#123;\n     e.returnValue = &#39;false&#39;;    //IE\n&#125;\n\n获取第一个子节点（next，last都类似）\nif (obj.lastElementChild) &#123;\n     return obj.firstElementChild;   //非IE6/7/8支持\n&#125; else&#123;\n     return obj.firstChild;   //IE6/7/8支持\n&#125;;\n\n设置监听事件\n//参数一：对象\n//参数二：事件类型\n//参数三：事件处理函数\nfunction addEvent(obj, type, fn)&#123;\n     if (obj.addEventListener) &#123;\n          obj.addEventListener(type, fn, false);  //非IE\n     &#125; else&#123;\n          obj.attachEvent(&#39;on&#39; + type, fn);  //IE\n     &#125;\n&#125;\n</code></pre>\n<p>3、通过className获取DOM节点</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getClassName</span>(<span class=\"params\">xxx</span>)</span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">var</span> atag = <span class=\"built_in\">document</span>.all ? <span class=\"built_in\">document</span>.all : <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;*&#x27;</span>);</span><br><span class=\"line\">     <span class=\"keyword\">var</span> arr = [];</span><br><span class=\"line\">     <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; atag.length; i++) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">var</span> reg = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">&#x27;\\\\b&#x27;</span> + xxx + <span class=\"string\">&#x27;\\\\b&#x27;</span>, <span class=\"string\">&#x27;g&#x27;</span>);</span><br><span class=\"line\">         <span class=\"keyword\">if</span> (reg.test(atag[i].className)) &#123;</span><br><span class=\"line\">             arr.push(atag[i]);</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> arr;  <span class=\"comment\">//返回的也是数组，包含传入的class所有元素；</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>4、event.srcElement问题</p>\n<pre><code>IE：event对象有srcElement属性，没有target属性；\nFirefox:even对象有target属性，没有srcElement属性。\n</code></pre>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">srcObj = event.srcElement ? event.srcElement : event.target;</span><br></pre></td></tr></table></figure>\n<p>5、firefox与IE的父元素(parentElement)的区别</p>\n<pre><code>IE：obj.parentElement\nfirefox：obj.parentNode\nhack：都使用obj.parentNode\n</code></pre>\n<h2 id=\"移动端常见案例\"><a href=\"#移动端常见案例\" class=\"headerlink\" title=\"移动端常见案例\"></a>移动端常见案例</h2><p>1、部分情况下对非可点击元素如(label,span)监听click事件时，ios下不会触发</p>\n<pre><code>hack：css中增加cursor:pointer\n</code></pre>\n<p>2、底部输入框被键盘遮挡问题</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> oheight = $(<span class=\"built_in\">document</span>).height(); <span class=\"comment\">//浏览器当前的高度</span></span><br><span class=\"line\">$(<span class=\"built_in\">window</span>).resize(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span>($(<span class=\"built_in\">document</span>).height() &lt; oheight)&#123;</span><br><span class=\"line\">          $(<span class=\"string\">&quot;#footer&quot;</span>).css(<span class=\"string\">&quot;position&quot;</span>, <span class=\"string\">&quot;static&quot;</span>);</span><br><span class=\"line\">     &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">          $(<span class=\"string\">&quot;#footer&quot;</span>).css(<span class=\"string\">&quot;position&quot;</span>, <span class=\"string\">&quot;absolute&quot;</span>);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>3、CSS动画页面闪白,动画卡顿</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//使用综合属性</span></span><br><span class=\"line\">-webkit-transform: translate3d(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">-moz-transform: translate3d(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">-ms-transform: translate3d(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">transform: translate3d(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n<p>4、阻止旋转屏幕时自动调整字体大小</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">html, body, form, fieldset, p, div, h1, h2, h3, h4, h5, h6 &#123;-webkit-text-size-adjust:none;&#125;</span><br></pre></td></tr></table></figure>\n<p>5、预加载、自动播放无效</p>\n<p>自动播放的有效性受操作系统、浏览器（webview）、版本等的影响，苹果官方规定必须由用户手动触发才会载入音频，所以可以在用户依次输入后，让音频实现预加载:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">&#x27;touchstart&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">     <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;audio&#x27;</span>)[<span class=\"number\">0</span>].play();</span><br><span class=\"line\">     <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;audio&#x27;</span>)[<span class=\"number\">0</span>].pause();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>6、ios safari时间显示问题</p>\n<pre><code>设置new Date日期格式的时候，在ios中的safari中发现显示效果与其他浏览器不一致。\n只识别：new Date(&quot;year/month/day&quot;);\n</code></pre>\n<p>7、移动端300ms延迟。</p>\n<pre><code>hack1：一般在移动端用tap事件来取代click事件\nhack2：fastclick可以解决在手机上点击事件的300ms延迟\n</code></pre>\n<p>8、手机上的flex布局时会有兼容性问题</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: -webkit-box;  //老版本语法: Safari, iOS, Android browser, older WebKit browsers. </span><br><span class=\"line\">    display: -moz-box;     //老版本语法: Firefox (buggy) </span><br><span class=\"line\">    display: -ms-flexbox;  //混合版本语法: IE <span class=\"number\">10</span> </span><br><span class=\"line\">    display: -webkit-flex; //新版本语法: Chrome <span class=\"number\">21</span>+ </span><br><span class=\"line\">    display: flex;         //新版本语法: Opera <span class=\"number\">12.1</span>, Firefox <span class=\"number\">22</span>+</span><br></pre></td></tr></table></figure>\n\n\n\n\n<h2 id=\"浏览器hack\"><a href=\"#浏览器hack\" class=\"headerlink\" title=\"浏览器hack\"></a>浏览器hack</h2><p><img src=\"https://pic1.zhimg.com/v2-46cac38591afd23945a60713cf0bc49c_b.jpg\" alt=\"image\"></p>\n<p>1、Firefox</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@-moz-document</span> url-prefix() &#123; <span class=\"selector-class\">.selector</span> &#123; property: value; &#125; &#125;</span><br></pre></td></tr></table></figure>\n<p>上面是仅仅被Firefox浏览器识别的写法，具体如：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@-moz-document</span> url-prefix() &#123; <span class=\"selector-class\">.demo</span> &#123; <span class=\"attribute\">color</span>:lime; &#125; &#125;</span><br></pre></td></tr></table></figure>\n<p>支持Firefox的还有几种写法：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 支持所有firefox版本 */</span> <span class=\"selector-id\">#selector</span><span class=\"selector-attr\">[id=selector]</span> &#123; property: value; &#125; </span><br><span class=\"line\">或者： <span class=\"keyword\">@-moz-document</span> url-prefix() &#123; <span class=\"selector-class\">.selector</span> &#123; property: value; &#125;  </span><br><span class=\"line\"><span class=\"comment\">/* 支持所有Gecko内核的浏览器 (包括Firefox) */</span> *&gt;<span class=\"selector-class\">.selector</span> &#123; property: value; &#125;</span><br></pre></td></tr></table></figure>\n\n<p>2、Webkit枘核浏览器(chrome and safari)</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@media</span> screen <span class=\"keyword\">and</span> (<span class=\"attribute\">-webkit-min-device-pixel-ratio</span>:<span class=\"number\">0</span>) &#123; Selector &#123; property: value; &#125; &#125;</span><br><span class=\"line\"><span class=\"comment\">/*上面写法主要是针对Webkit内核的浏览器，如Google Chrome 和 Safari浏览器：*/</span></span><br><span class=\"line\"><span class=\"keyword\">@media</span> screen <span class=\"keyword\">and</span> (<span class=\"attribute\">-webkit-min-device-pixel-ratio</span>:<span class=\"number\">0</span>) &#123; <span class=\"selector-class\">.demo</span> &#123; <span class=\"attribute\">color</span>: <span class=\"number\">#f36</span>; &#125; &#125;</span><br></pre></td></tr></table></figure>\n<p>3、Opera浏览器</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">html</span><span class=\"selector-pseudo\">:first</span>-child&gt;<span class=\"selector-tag\">body</span> Selector &#123;property:value;&#125;</span><br><span class=\"line\"><span class=\"comment\">/*或者：*/</span> <span class=\"keyword\">@media</span> all <span class=\"keyword\">and</span> (<span class=\"attribute\">min-width</span>:<span class=\"number\">0</span>) &#123; Selector &#123;property: value;&#125; &#125; </span><br><span class=\"line\"><span class=\"comment\">/*或者：*/</span> <span class=\"keyword\">@media</span> all <span class=\"keyword\">and</span> (<span class=\"attribute\">-webkit-min-device-pixel-ratio</span>:<span class=\"number\">10000</span>), <span class=\"keyword\">not</span> all <span class=\"keyword\">and</span> (<span class=\"attribute\">-webkit-min-device-pixel-ratio</span>:<span class=\"number\">0</span>) &#123; head~<span class=\"selector-tag\">body</span> Selector &#123; property: value; &#125; &#125;</span><br><span class=\"line\"><span class=\"comment\">/*上面则是Opera浏览器的Hack写法：*/</span></span><br><span class=\"line\"><span class=\"keyword\">@media</span> all <span class=\"keyword\">and</span> (<span class=\"attribute\">-webkit-min-device-pixel-ratio</span>:<span class=\"number\">10000</span>), <span class=\"keyword\">not</span> all <span class=\"keyword\">and</span> (<span class=\"attribute\">-webkit-min-device-pixel-ratio</span>:<span class=\"number\">0</span>) &#123; head~<span class=\"selector-tag\">body</span> <span class=\"selector-class\">.demo</span> &#123; <span class=\"attribute\">background</span>: green; &#125; &#125;</span><br></pre></td></tr></table></figure>\n<p>4、IE9浏览器</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">:root</span> Selector &#123;property: value9;&#125;</span><br><span class=\"line\"><span class=\"comment\">/*上面是IE9的写法，具体应用如下：*/</span></span><br><span class=\"line\"><span class=\"selector-pseudo\">:root</span> <span class=\"selector-class\">.demo</span> &#123;<span class=\"attribute\">color</span>: <span class=\"number\">#ff0</span>9;&#125;</span><br></pre></td></tr></table></figure>\n<p>5、IE9以及IE9以下版本</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Selector &#123;property:value9;&#125;</span><br><span class=\"line\"><span class=\"comment\">/*这种写法只有IE9以及IE9以下版本能识别，这里需要注意此处“9”只能是“9”不能是别的，比如说“8”，不然会失去效果的，如：*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.demo</span> &#123;<span class=\"attribute\">background</span>: lime9;&#125;</span><br></pre></td></tr></table></figure>\n<p>6、IE7浏览器</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*+<span class=\"selector-tag\">html</span> Selector&#123;property:value;&#125; 或 *<span class=\"selector-pseudo\">:first</span>-child+<span class=\"selector-tag\">html</span> Selector &#123;property:value;&#125;</span><br><span class=\"line\"><span class=\"comment\">/*上面两种是IE7浏览器下才能识别，如：*/</span></span><br><span class=\"line\">*+<span class=\"selector-tag\">html</span> <span class=\"selector-class\">.demo</span> &#123;<span class=\"attribute\">background</span>: green;&#125; 或者： *<span class=\"selector-pseudo\">:first</span>-child+<span class=\"selector-tag\">html</span> <span class=\"selector-class\">.demo</span> &#123;<span class=\"attribute\">background</span>: green;&#125;</span><br></pre></td></tr></table></figure>\n<p>7、IE7及IE7以下版本浏览器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Selector &#123;*property: value;&#125;</span><br><span class=\"line\">&#x2F;*上面的写法在IE7以及其以下版本都可以识别，如：*&#x2F;</span><br></pre></td></tr></table></figure>\n<p>.demo {*background: red;}<br>8、IE6浏览器</p>\n<pre><code>加_下划线即可\n</code></pre>\n<h3 id=\"CSS选择器的Hack写法\"><a href=\"#CSS选择器的Hack写法\" class=\"headerlink\" title=\"CSS选择器的Hack写法\"></a>CSS选择器的Hack写法</h3><p>下面我们主要来看CSS选择器和CSS属性选择器在不同浏览器的支持情况。下面先来看CSS选择器支持情况。</p>\n<p>1、IE6以及IE6以下版本浏览器</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* <span class=\"selector-tag\">html</span> <span class=\"selector-class\">.demo</span> &#123;<span class=\"attribute\">color</span>: green;&#125;</span><br><span class=\"line\">* ```</span><br><span class=\"line\"><span class=\"number\">2</span>、仅仅IE7浏览器</span><br><span class=\"line\">```css</span><br><span class=\"line\">*<span class=\"selector-pseudo\">:first</span>-child+<span class=\"selector-tag\">html</span> <span class=\"selector-class\">.demo</span> &#123;<span class=\"attribute\">color</span>: green;&#125;</span><br></pre></td></tr></table></figure>\n<p>3、除IE6之外的所有浏览器（IE7-9, Firefox,Safari,Opera）</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">html</span>&gt;<span class=\"selector-tag\">body</span> <span class=\"selector-class\">.demo</span> &#123;<span class=\"attribute\">color</span>: green;&#125;</span><br></pre></td></tr></table></figure>\n<p>4、IE8-9,Firefox,Safari,Opear</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">html</span>&gt;<span class=\"comment\">/**/</span><span class=\"selector-tag\">body</span> <span class=\"selector-class\">.demo</span> &#123;<span class=\"attribute\">color</span>: green;&#125;</span><br></pre></td></tr></table></figure>\n<p>5、IE9+</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">:root</span> <span class=\"selector-class\">.demo</span> &#123;<span class=\"attribute\">color</span>: red;&#125;</span><br></pre></td></tr></table></figure>\n<p>6、Firefox浏览器</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@-moz-document</span> url-prefix() &#123; <span class=\"selector-class\">.demo</span> &#123; <span class=\"attribute\">color</span>: red; &#125; &#125;</span><br></pre></td></tr></table></figure>\n<p>7、Webkit内核浏览器（Safari和Google Chrome）</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@media</span> screen <span class=\"keyword\">and</span> (<span class=\"attribute\">-webkit-min-device-pixel-ratio</span>:<span class=\"number\">0</span>) &#123; <span class=\"selector-class\">.demo</span> &#123; <span class=\"attribute\">color</span>: red; &#125; &#125;</span><br></pre></td></tr></table></figure>\n<p>8、Opera浏览器</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@media</span> all <span class=\"keyword\">and</span> (<span class=\"attribute\">-webkit-min-device-pixel-ratio</span>:<span class=\"number\">10000</span>), <span class=\"keyword\">not</span> all <span class=\"keyword\">and</span> (<span class=\"attribute\">-webkit-min-device-pixel-ratio</span>:<span class=\"number\">0</span>) &#123; head~<span class=\"selector-tag\">body</span> <span class=\"selector-class\">.demo</span> &#123; <span class=\"attribute\">color</span>: red; &#125; &#125;</span><br></pre></td></tr></table></figure>\n<p>9、iPhone / mobile webkit</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@media</span> screen <span class=\"keyword\">and</span> (<span class=\"attribute\">max-device-width</span>: <span class=\"number\">480px</span>) &#123; <span class=\"selector-class\">.demo</span> &#123; <span class=\"attribute\">color</span>: red &#125; &#125;</span><br></pre></td></tr></table></figure>\n<p>CSS属性Hack写法</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*1、IE6浏览器*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.demo</span> &#123;_color: red;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*2、IE6-7浏览器识别*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.demo</span> &#123;*<span class=\"attribute\">color</span>: red;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*3、所有浏览器除IE6浏览外*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.demo</span> &#123;<span class=\"attribute\">color</span><span class=\"comment\">/**/</span>:red;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*4、IE6-9浏览器*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.demo</span> &#123;<span class=\"attribute\">color</span>: red9;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*5、IE7-8浏览器*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.demo</span> &#123;<span class=\"attribute\">color</span><span class=\"comment\">/***/</span>:red9;&#125;</span><br></pre></td></tr></table></figure>\n<p>IE条件注释，全部采用选择器Hack的写法。这种写法分两步：</p>\n<p>1、创建条件样式表，并在HTML中body里添加相应的class类名：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!–[if IE6]–&gt;&lt;&lt;!–[if IE7]–&gt;&lt;!–[if IE8]–&gt;&lt;!–[if IE9]–&gt;&lt;!–[if !IE]–&gt;</span><br></pre></td></tr></table></figure>\n<p>2、接着创建对应的样式</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.demo</span> &#123;<span class=\"attribute\">color</span>: blue;&#125;<span class=\"comment\">/*现代浏览器*/</span> </span><br><span class=\"line\"><span class=\"selector-class\">.non-ie</span> <span class=\"selector-class\">.demo</span> &#123;<span class=\"attribute\">color</span>: red;&#125;<span class=\"comment\">/*除IE外浏览器*/</span> </span><br><span class=\"line\"><span class=\"selector-class\">.ie9</span> <span class=\"selector-class\">.demo</span> &#123;<span class=\"attribute\">color</span>: yellow;&#125;<span class=\"comment\">/*IE9浏览器*/</span> </span><br><span class=\"line\"><span class=\"selector-class\">.ie8</span> <span class=\"selector-class\">.demo</span>&#123;<span class=\"attribute\">color</span>: green;&#125;<span class=\"comment\">/*IE8浏览器*/</span> </span><br><span class=\"line\"><span class=\"selector-class\">.ie7</span> <span class=\"selector-class\">.demo</span> &#123;<span class=\"attribute\">color</span>: orange;&#125;<span class=\"comment\">/*IE7浏览器*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.ie6</span> <span class=\"selector-class\">.demo</span> &#123;<span class=\"attribute\">color</span>: lime;&#125;<span class=\"comment\">/*IE6浏览器*/</span> </span><br><span class=\"line\"><span class=\"keyword\">@media</span> all <span class=\"keyword\">and</span> (<span class=\"attribute\">min-width</span>: <span class=\"number\">0px</span>)&#123; <span class=\"selector-class\">.demo</span> &#123;<span class=\"attribute\">color</span>:black;&#125; <span class=\"comment\">/* webkit and opera */</span></span><br><span class=\"line\"><span class=\"keyword\">@media</span> screen <span class=\"keyword\">and</span> (<span class=\"attribute\">-webkit-min-device-pixel-ratio</span>:<span class=\"number\">0</span>)&#123; <span class=\"selector-class\">.demo</span>&#123;<span class=\"attribute\">color</span>:<span class=\"number\">#369</span>;&#125;<span class=\"comment\">/* webkit */</span> </span><br><span class=\"line\"><span class=\"keyword\">@media</span> all <span class=\"keyword\">and</span> (<span class=\"attribute\">-webkit-min-device-pixel-ratio</span>:<span class=\"number\">10000</span>), <span class=\"keyword\">not</span> all <span class=\"keyword\">and</span> (<span class=\"attribute\">-webkit-min-device-pixel-ratio</span>:<span class=\"number\">0</span>) &#123; head~<span class=\"selector-tag\">body</span> <span class=\"selector-class\">.demo</span>&#123;<span class=\"attribute\">color</span>:<span class=\"number\">#cf6</span>;&#125;<span class=\"comment\">/* opera */</span> </span><br><span class=\"line\"><span class=\"keyword\">@-moz-document</span> url-prefix()&#123; <span class=\"selector-class\">.demo</span>&#123;<span class=\"attribute\">color</span>:<span class=\"number\">#963</span>;&#125;<span class=\"comment\">/* firefox * / </span></span><br></pre></td></tr></table></figure>"},{"title":"字符串和数组常用方法","date":"2021-02-27T13:17:00.000Z","_content":"# 字符串\n## 字符串的创建：\n```js\nvar str = \"abc\";\nvar str = new String();\n```\n将任意类型的值转换成字符串：\n```js\nVar a = 10;\nVar str = a.toString(); //string\nVar str1 = “”+a; //string\nVar str2 = String(a);//string\n```\n>　除了 slice() 和 substr() 方法里的负值是代表从右截取，其他方法里的负值一律作为0处理\n\n1. charCodeAt方法返回一个整数，代表指定位置字符的Unicode编码。\nStr.charCodeAt(index);如果指定位置没有字符，返回NaN；\n```js\nvar str = \"abc\";\nconsole.log(str.charCodeAt(3));//NaN\n```\n2. fromCharCode方法从一些Unicode字符串中返回一个字符串。 \n\n3. charAt方法返回指定索引位置处的字符。如果超出有效范围的索引值返回空字符串。\n\n4. slice方法返回字符串的片段。\n\n\n    strObj.slice(start[,end]) \n    \n\tstart下标从0开始的strObj指定部分起始索引。如果start为负，将它作为length+start处理，此处length为字符串的长度。 \n\t\n\tend小标从0开始的strObj指定部分结束索引。如果end为负，将它作为length+end处理，此处length为字符串的长度。\n```js\nvar str = \"abc\";\nvar str1 = str.slice(0,-2);\nvar str2 = str.slice(-1);\nconsole.log(str1,str2);//a c\n```\n5、substring方法返回位于String对象中指定位置的子字符串\n\n    strObj.substring(start,end) \n\n        start指明子字符串的起始位置，该索引从0开始起算。 \n        \t\n        end指明子字符串的结束位置，该索引从0开始起算。 \n        \t\n        substring方法使用start和end两者中的较小值作为子字符串的起始点。如果start或end为NaN或者为负数，那么将其替换为0。\n\t\n6、substr方法返回一个从指定位置开始的指定长度的子字符串。 \n\n\t\tstrObj.substr(start[,length]) \n\t\tstart所需的子字符串的起始位置。字符串中的第一个字符的索引为0。 \n\t\tlength在返回的子字符串中应包括的字符个数。 \n\t\tvar str = \"ABCDEF\"; \n\t\tstr.substr(2,4); //CDEF ；\n\t\t\n7、indexOf方法返回String对象内第一次出现子字符串位置。如果没有找到子字符串，则返回-1。 \n\nlastindexOf()方法从尾部开始寻找对象中第一次出现子字符串的位置\n\n\t\tstrObj.indexOf(substr[,startIndex]) \n\t\tsubstr要在String对象中查找的子字符串。 \n\t\tstartIndex该整数值指出在String对象内开始查找的索引。如果省略，则从字符串的开始处查找。 \n\t\tvar str = \"ABCDECDF\"; \n\t\tstr.indexOf(\"CD\"，1); // 由1位置从左向右查找 123... 结果：2 \n\t\t\n8、search方法返回与正则表达式查找内容匹配的第一个字符串的位置。 \n\n\t\tstrObj.search(reExp) \n\t\treExp包含正则表达式模式和可用标志的正则表达式对象。 \n\t\tvar str = \"ABCDECDF\"; \n\t\tstr.search(\"CD\"); // 或 str.search(/CD/i); 结果：2 \n\t\t\n9、concat方法返回字符串值，该值包含了两个或多个提供的字符串的连接。 \n\n\t\tstr.concat([string1[,string2...]]) \n\t\tstring1，string2要和所有其他指定的字符串进行连接的String对象或文字。 \n\t\tvar str = \"ABCDEF\"; \n\t\tstr.concat(\"ABCDEF\",\"ABC\"); \n\t\t结果：ABCDEFABCDEFABC\n10、Split将一个字符串分割为子字符串，然后将结果作为字符串数组返回。 \n\n\t\tstrObj.split([separator[,limit]]) \n\t\tseparator字符串或 正则表达式 对象，它标识了分隔字符串时使用的是一个还是\t多个字符。如果忽略该选项，返回包含整个字符串的单一元素数组。 \n\t\tlimit该值用来限制返回数组中的元素个数。 \n\t\tvar str = \"AA BB CC DD EE FF\"; \n\t\talert(str.split(\" \"，3)); \n\t\t结果： AA,BB,CC \n11、 toLowerCase方法用于将一个字符串全部转为小写\n\ntoUpperCase则是全部转为大写。\n\n它们都返回一个新字符串，不改变原字符串。\n```js\nconsole.log(\" hello word \".trim());\n//hello world\nconsole.log('Hello World'.toLowerCase());\n// \"hello world\"\nconsole.log('Hello World'.toUpperCase());\n// \"HELLO WORLD\"\n```\n12、trim(): 用于去除字符串两端的空白，返回一个新字符串 不改变原数据\n```js\nconsole.log(' hello world '.trim())； //hello word\n```\n13、replace 返回被替换的字符串\n```js\nstr.replace(rgExp/substr,replaceText)  \n```\n\n\n# 数组\n> 数组的概念：有序的元素的集合    使用数字作为索引的一个对象  索引为从0开始的整数\n\n## 创建方式\n\n1、构造数组  var arr = new Array（）；\n\n向数组中添加元素：数组[索引] = 值；\n读取数组  数组[索引]  当索引值比数组长度大时，会返回undefined；\n数组长度：数组.length;\n```js\nvar arr1 = new Array();\narr1[0] = 1;\narr1.length = 10;\nconsole.log(arr1,arr1.length); //如果修改的length大于原长度，则多出部分会空出来；\narr1.length = 2;\nconsole.log(arr1,arr1.length); //如果修改的length小于原长度，则多出的部分会删除；\n```\n\n2、字面量创建数组   var arr = []；\n\n中括号里边可以直接添加元素（可以是任意类型的数据类型）；\n\n## 数组的操作方法\n1、push（） 可以接收任意数量的参数，把他们逐个添加到数组末尾，并返回修改后数组的长度\n\n2、Pop（） 数组末尾移除最后一项，减少数组的LENGTH值，并返回被删除的元素\n\n3、Unshift（） 在数组的头部添加一个或者多个元素，返回增加后数组的长度\n\n4、Shift（）\t 从数组的头部删除一个元素并返回这个删除的元素，如果数组为空则返回undefined；\n\n5、Slice（）返回从原数组中指定开始下标到结束下标之间的项组成的新数组。\n\n    slice()方法可以接受一或两个参数，即要返回项的起始和结束位置。\n    在只有一个参数的情况下， slice()方法返回从该参数指定位置开始到当前数组末尾的所有项。\n    如果有两个参数，该方法返回起始和结束位置之间的项——但不包括结束位置的项。\n    var a = arr(0,2);\n    第二个参数可以是负值：则从后往前截取 -1：最后一个\n6、splice:\n\n    删除：可以删除任意数量的项，只需指定 2 个参数：要删除的第一项的位置和要删除的项数。例如， splice(0,2)会删除数组中的前两项。\n    \n    插入：可以向指定位置插入任意数量的项，只需提供 3 个参数：起始位置、 0（要删除的项数）和要插入的项。例如，splice(2,0,4,6)会从当前数组的位置 2 开始插入4和6。\n    \n    替换：可以向指定位置插入任意数量的项，且同时删除任意数量的项，只需指定 3 个参数：起始位置、要删除的项数和要插入的任意数量的项。插入的项数不必与删除的项数相等。例如，splice (2,1,4,6)会删除当前数组位置 2 的项，然后再从位置 2 开始插入4和6。\n    splice()方法始终都会返回一个数组，该数组中包含从原始数组中删除的项，如果没有删除任何项，则返回一个空数组。\n    \n7、join()\n\n    将数组的元素组成一个字符串\n    不会对原数据产生影响，会把转化后的字符串作为结果返回\n    在join（）中可以指定一个字符串作为参数，这个字符串将会作为数组中元素的连接符，如果不指定连接符，默认为逗号\n8、reverse():\n用来反转数组，前面的去后面，后面的去前面；\n\n9、Sort（） 对数组成员进行排序，默认按照字典顺序排序，原数组会改变\n```js\narr.sort(function (a,b){\nreturn a-b;//升序\n})\n```\nsort的参数函数本身接受两个参数，表示进行比较的两个数组成员。如果该函数的返回值大于0，表示第一个成员排在第二个成员后面；其他情况下，都是第一个元素排在第二个元素前面\n\n10、concat() ：将参数添加到原数组中。\n\n    这个方法会先创建当前数组一个副本，然后将接收到的参数添加到这个副本的末尾，最后返回新构建的数组。在没有给 concat()方法传递参数的情况下，它只是复制当前数组并返回副本。 \n11、indexOf()：接收两个参数：要查找的项和（可选的）表示查找起点位置的索引。其中， 从数组的开头（位置 0）开始向后查找。 \n\n12、lastIndexOf：接收两个参数：要查找的项和（可选的）表示查找起点位置的索引。其中， 从数组的末尾开始向前查找。\n\n这两个方法都返回要查找的项在数组中的位置，或者在没找到的情况下返回-1。在比较第一个参数与数组中的每一项时，会使用全等操作符。\n\n13、forEach()：对数组进行遍历循环，对数组中的每一项运行给定函数。这个方法没有返回值。参数都是function类型，默认有传参，参数分别为：遍历的数组内容；对应的数组索引，数组本身。\n```js\nvar arr = [1,2,6,4];//1 0 true；2 1  true；6 2 true；4 3 true\narr.forEach(function (x,index,a){\n    console.log(x+\" \"+index+\" \"+(a===arr));\n})\n```\n14、map()：指“映射”，对数组中的每一项运行给定函数，返回每次函数调用的结果组成的数组。\n```js\nvar arr1 = [32,5,11,12];\nvar arr = arr1.map(function (x){\n\treturn x+3\n})\nconsole.log(arr);  //[35,8,14,15]\n```\n15、filter(): 用于过滤数组成员，满足条件的成员组成一个 新数组返回 原数组不变\n它的参数是一个函数，所有数组成员一次执行，返回结果为 true 的元素组成一个新数组返回\n第一个参数：当前成员\n第二个参数：当前成员的索引\n第三个参数：整个数组\n```js\nvar arr2 = [21,152,66,565];\nvar arr3 = arr2.filter(function (x,index){\n\treturn x % 3 == 0;\n})\nconsole.log(arr3);//[21,66];\n```\n15、every()：判断数组中每一项都是否满足条件，只有所有项都满足条件，才会返回true。\n\n16、some():判断数组中是否存在满足条件的项，只要有一项满足条件，就会返回true。\n```js\n //every\nvar arr4 = [26,641,15312,63,1];\nvar arr5 = arr4.every(function (x){\n\treturn x > 1;\n})\nconsole.log(arr5);//false\n//some\nvar arr7 = arr4.some(function (x){\n\treturn x > 1;\n})\nconsole.log(arr7);//true\n```\n\t\t\t\n17、reduce(): 将内部的返回值作为实参传递第一个形参，进行下一次运算\n```js\nvar arr =[1,2,3,5]\nvar sum = arr.reduce(function(a,b){\nreturn a+b;\n});\nconsole.log(sum); //1+2+3+5=11\n```","source":"_posts/js基础/字符串和数组常用方法.md","raw":"---\ntitle: 字符串和数组常用方法\ndate: 2021-02-27 21:17:00\ncategories: \"js\"\ntags: [\"字符串\",\"数组\",\"js\"]\n---\n# 字符串\n## 字符串的创建：\n```js\nvar str = \"abc\";\nvar str = new String();\n```\n将任意类型的值转换成字符串：\n```js\nVar a = 10;\nVar str = a.toString(); //string\nVar str1 = “”+a; //string\nVar str2 = String(a);//string\n```\n>　除了 slice() 和 substr() 方法里的负值是代表从右截取，其他方法里的负值一律作为0处理\n\n1. charCodeAt方法返回一个整数，代表指定位置字符的Unicode编码。\nStr.charCodeAt(index);如果指定位置没有字符，返回NaN；\n```js\nvar str = \"abc\";\nconsole.log(str.charCodeAt(3));//NaN\n```\n2. fromCharCode方法从一些Unicode字符串中返回一个字符串。 \n\n3. charAt方法返回指定索引位置处的字符。如果超出有效范围的索引值返回空字符串。\n\n4. slice方法返回字符串的片段。\n\n\n    strObj.slice(start[,end]) \n    \n\tstart下标从0开始的strObj指定部分起始索引。如果start为负，将它作为length+start处理，此处length为字符串的长度。 \n\t\n\tend小标从0开始的strObj指定部分结束索引。如果end为负，将它作为length+end处理，此处length为字符串的长度。\n```js\nvar str = \"abc\";\nvar str1 = str.slice(0,-2);\nvar str2 = str.slice(-1);\nconsole.log(str1,str2);//a c\n```\n5、substring方法返回位于String对象中指定位置的子字符串\n\n    strObj.substring(start,end) \n\n        start指明子字符串的起始位置，该索引从0开始起算。 \n        \t\n        end指明子字符串的结束位置，该索引从0开始起算。 \n        \t\n        substring方法使用start和end两者中的较小值作为子字符串的起始点。如果start或end为NaN或者为负数，那么将其替换为0。\n\t\n6、substr方法返回一个从指定位置开始的指定长度的子字符串。 \n\n\t\tstrObj.substr(start[,length]) \n\t\tstart所需的子字符串的起始位置。字符串中的第一个字符的索引为0。 \n\t\tlength在返回的子字符串中应包括的字符个数。 \n\t\tvar str = \"ABCDEF\"; \n\t\tstr.substr(2,4); //CDEF ；\n\t\t\n7、indexOf方法返回String对象内第一次出现子字符串位置。如果没有找到子字符串，则返回-1。 \n\nlastindexOf()方法从尾部开始寻找对象中第一次出现子字符串的位置\n\n\t\tstrObj.indexOf(substr[,startIndex]) \n\t\tsubstr要在String对象中查找的子字符串。 \n\t\tstartIndex该整数值指出在String对象内开始查找的索引。如果省略，则从字符串的开始处查找。 \n\t\tvar str = \"ABCDECDF\"; \n\t\tstr.indexOf(\"CD\"，1); // 由1位置从左向右查找 123... 结果：2 \n\t\t\n8、search方法返回与正则表达式查找内容匹配的第一个字符串的位置。 \n\n\t\tstrObj.search(reExp) \n\t\treExp包含正则表达式模式和可用标志的正则表达式对象。 \n\t\tvar str = \"ABCDECDF\"; \n\t\tstr.search(\"CD\"); // 或 str.search(/CD/i); 结果：2 \n\t\t\n9、concat方法返回字符串值，该值包含了两个或多个提供的字符串的连接。 \n\n\t\tstr.concat([string1[,string2...]]) \n\t\tstring1，string2要和所有其他指定的字符串进行连接的String对象或文字。 \n\t\tvar str = \"ABCDEF\"; \n\t\tstr.concat(\"ABCDEF\",\"ABC\"); \n\t\t结果：ABCDEFABCDEFABC\n10、Split将一个字符串分割为子字符串，然后将结果作为字符串数组返回。 \n\n\t\tstrObj.split([separator[,limit]]) \n\t\tseparator字符串或 正则表达式 对象，它标识了分隔字符串时使用的是一个还是\t多个字符。如果忽略该选项，返回包含整个字符串的单一元素数组。 \n\t\tlimit该值用来限制返回数组中的元素个数。 \n\t\tvar str = \"AA BB CC DD EE FF\"; \n\t\talert(str.split(\" \"，3)); \n\t\t结果： AA,BB,CC \n11、 toLowerCase方法用于将一个字符串全部转为小写\n\ntoUpperCase则是全部转为大写。\n\n它们都返回一个新字符串，不改变原字符串。\n```js\nconsole.log(\" hello word \".trim());\n//hello world\nconsole.log('Hello World'.toLowerCase());\n// \"hello world\"\nconsole.log('Hello World'.toUpperCase());\n// \"HELLO WORLD\"\n```\n12、trim(): 用于去除字符串两端的空白，返回一个新字符串 不改变原数据\n```js\nconsole.log(' hello world '.trim())； //hello word\n```\n13、replace 返回被替换的字符串\n```js\nstr.replace(rgExp/substr,replaceText)  \n```\n\n\n# 数组\n> 数组的概念：有序的元素的集合    使用数字作为索引的一个对象  索引为从0开始的整数\n\n## 创建方式\n\n1、构造数组  var arr = new Array（）；\n\n向数组中添加元素：数组[索引] = 值；\n读取数组  数组[索引]  当索引值比数组长度大时，会返回undefined；\n数组长度：数组.length;\n```js\nvar arr1 = new Array();\narr1[0] = 1;\narr1.length = 10;\nconsole.log(arr1,arr1.length); //如果修改的length大于原长度，则多出部分会空出来；\narr1.length = 2;\nconsole.log(arr1,arr1.length); //如果修改的length小于原长度，则多出的部分会删除；\n```\n\n2、字面量创建数组   var arr = []；\n\n中括号里边可以直接添加元素（可以是任意类型的数据类型）；\n\n## 数组的操作方法\n1、push（） 可以接收任意数量的参数，把他们逐个添加到数组末尾，并返回修改后数组的长度\n\n2、Pop（） 数组末尾移除最后一项，减少数组的LENGTH值，并返回被删除的元素\n\n3、Unshift（） 在数组的头部添加一个或者多个元素，返回增加后数组的长度\n\n4、Shift（）\t 从数组的头部删除一个元素并返回这个删除的元素，如果数组为空则返回undefined；\n\n5、Slice（）返回从原数组中指定开始下标到结束下标之间的项组成的新数组。\n\n    slice()方法可以接受一或两个参数，即要返回项的起始和结束位置。\n    在只有一个参数的情况下， slice()方法返回从该参数指定位置开始到当前数组末尾的所有项。\n    如果有两个参数，该方法返回起始和结束位置之间的项——但不包括结束位置的项。\n    var a = arr(0,2);\n    第二个参数可以是负值：则从后往前截取 -1：最后一个\n6、splice:\n\n    删除：可以删除任意数量的项，只需指定 2 个参数：要删除的第一项的位置和要删除的项数。例如， splice(0,2)会删除数组中的前两项。\n    \n    插入：可以向指定位置插入任意数量的项，只需提供 3 个参数：起始位置、 0（要删除的项数）和要插入的项。例如，splice(2,0,4,6)会从当前数组的位置 2 开始插入4和6。\n    \n    替换：可以向指定位置插入任意数量的项，且同时删除任意数量的项，只需指定 3 个参数：起始位置、要删除的项数和要插入的任意数量的项。插入的项数不必与删除的项数相等。例如，splice (2,1,4,6)会删除当前数组位置 2 的项，然后再从位置 2 开始插入4和6。\n    splice()方法始终都会返回一个数组，该数组中包含从原始数组中删除的项，如果没有删除任何项，则返回一个空数组。\n    \n7、join()\n\n    将数组的元素组成一个字符串\n    不会对原数据产生影响，会把转化后的字符串作为结果返回\n    在join（）中可以指定一个字符串作为参数，这个字符串将会作为数组中元素的连接符，如果不指定连接符，默认为逗号\n8、reverse():\n用来反转数组，前面的去后面，后面的去前面；\n\n9、Sort（） 对数组成员进行排序，默认按照字典顺序排序，原数组会改变\n```js\narr.sort(function (a,b){\nreturn a-b;//升序\n})\n```\nsort的参数函数本身接受两个参数，表示进行比较的两个数组成员。如果该函数的返回值大于0，表示第一个成员排在第二个成员后面；其他情况下，都是第一个元素排在第二个元素前面\n\n10、concat() ：将参数添加到原数组中。\n\n    这个方法会先创建当前数组一个副本，然后将接收到的参数添加到这个副本的末尾，最后返回新构建的数组。在没有给 concat()方法传递参数的情况下，它只是复制当前数组并返回副本。 \n11、indexOf()：接收两个参数：要查找的项和（可选的）表示查找起点位置的索引。其中， 从数组的开头（位置 0）开始向后查找。 \n\n12、lastIndexOf：接收两个参数：要查找的项和（可选的）表示查找起点位置的索引。其中， 从数组的末尾开始向前查找。\n\n这两个方法都返回要查找的项在数组中的位置，或者在没找到的情况下返回-1。在比较第一个参数与数组中的每一项时，会使用全等操作符。\n\n13、forEach()：对数组进行遍历循环，对数组中的每一项运行给定函数。这个方法没有返回值。参数都是function类型，默认有传参，参数分别为：遍历的数组内容；对应的数组索引，数组本身。\n```js\nvar arr = [1,2,6,4];//1 0 true；2 1  true；6 2 true；4 3 true\narr.forEach(function (x,index,a){\n    console.log(x+\" \"+index+\" \"+(a===arr));\n})\n```\n14、map()：指“映射”，对数组中的每一项运行给定函数，返回每次函数调用的结果组成的数组。\n```js\nvar arr1 = [32,5,11,12];\nvar arr = arr1.map(function (x){\n\treturn x+3\n})\nconsole.log(arr);  //[35,8,14,15]\n```\n15、filter(): 用于过滤数组成员，满足条件的成员组成一个 新数组返回 原数组不变\n它的参数是一个函数，所有数组成员一次执行，返回结果为 true 的元素组成一个新数组返回\n第一个参数：当前成员\n第二个参数：当前成员的索引\n第三个参数：整个数组\n```js\nvar arr2 = [21,152,66,565];\nvar arr3 = arr2.filter(function (x,index){\n\treturn x % 3 == 0;\n})\nconsole.log(arr3);//[21,66];\n```\n15、every()：判断数组中每一项都是否满足条件，只有所有项都满足条件，才会返回true。\n\n16、some():判断数组中是否存在满足条件的项，只要有一项满足条件，就会返回true。\n```js\n //every\nvar arr4 = [26,641,15312,63,1];\nvar arr5 = arr4.every(function (x){\n\treturn x > 1;\n})\nconsole.log(arr5);//false\n//some\nvar arr7 = arr4.some(function (x){\n\treturn x > 1;\n})\nconsole.log(arr7);//true\n```\n\t\t\t\n17、reduce(): 将内部的返回值作为实参传递第一个形参，进行下一次运算\n```js\nvar arr =[1,2,3,5]\nvar sum = arr.reduce(function(a,b){\nreturn a+b;\n});\nconsole.log(sum); //1+2+3+5=11\n```","slug":"js基础/字符串和数组常用方法","published":1,"updated":"2021-02-27T13:14:26.584Z","_id":"cklnqafv7000ktsdp5n6b6k1m","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h1><h2 id=\"字符串的创建：\"><a href=\"#字符串的创建：\" class=\"headerlink\" title=\"字符串的创建：\"></a>字符串的创建：</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&quot;abc&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"keyword\">new</span> <span class=\"built_in\">String</span>();</span><br></pre></td></tr></table></figure>\n<p>将任意类型的值转换成字符串：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Var a = <span class=\"number\">10</span>;</span><br><span class=\"line\">Var str = a.toString(); <span class=\"comment\">//string</span></span><br><span class=\"line\">Var str1 = “”+a; <span class=\"comment\">//string</span></span><br><span class=\"line\">Var str2 = <span class=\"built_in\">String</span>(a);<span class=\"comment\">//string</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>　除了 slice() 和 substr() 方法里的负值是代表从右截取，其他方法里的负值一律作为0处理</p>\n</blockquote>\n<ol>\n<li><p>charCodeAt方法返回一个整数，代表指定位置字符的Unicode编码。<br>Str.charCodeAt(index);如果指定位置没有字符，返回NaN；</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&quot;abc&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.charCodeAt(<span class=\"number\">3</span>));<span class=\"comment\">//NaN</span></span><br></pre></td></tr></table></figure></li>\n<li><p>fromCharCode方法从一些Unicode字符串中返回一个字符串。 </p>\n</li>\n<li><p>charAt方法返回指定索引位置处的字符。如果超出有效范围的索引值返回空字符串。</p>\n</li>\n<li><p>slice方法返回字符串的片段。</p>\n</li>\n</ol>\n<pre><code>strObj.slice(start[,end]) \n\nstart下标从0开始的strObj指定部分起始索引。如果start为负，将它作为length+start处理，此处length为字符串的长度。 \n\nend小标从0开始的strObj指定部分结束索引。如果end为负，将它作为length+end处理，此处length为字符串的长度。\n</code></pre>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&quot;abc&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> str1 = str.slice(<span class=\"number\">0</span>,-<span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> str2 = str.slice(-<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str1,str2);<span class=\"comment\">//a c</span></span><br></pre></td></tr></table></figure>\n<p>5、substring方法返回位于String对象中指定位置的子字符串</p>\n<pre><code>strObj.substring(start,end) \n\n    start指明子字符串的起始位置，该索引从0开始起算。 \n        \n    end指明子字符串的结束位置，该索引从0开始起算。 \n        \n    substring方法使用start和end两者中的较小值作为子字符串的起始点。如果start或end为NaN或者为负数，那么将其替换为0。\n</code></pre>\n<p>6、substr方法返回一个从指定位置开始的指定长度的子字符串。 </p>\n<pre><code>    strObj.substr(start[,length]) \n    start所需的子字符串的起始位置。字符串中的第一个字符的索引为0。 \n    length在返回的子字符串中应包括的字符个数。 \n    var str = &quot;ABCDEF&quot;; \n    str.substr(2,4); //CDEF ；\n    \n</code></pre>\n<p>7、indexOf方法返回String对象内第一次出现子字符串位置。如果没有找到子字符串，则返回-1。 </p>\n<p>lastindexOf()方法从尾部开始寻找对象中第一次出现子字符串的位置</p>\n<pre><code>    strObj.indexOf(substr[,startIndex]) \n    substr要在String对象中查找的子字符串。 \n    startIndex该整数值指出在String对象内开始查找的索引。如果省略，则从字符串的开始处查找。 \n    var str = &quot;ABCDECDF&quot;; \n    str.indexOf(&quot;CD&quot;，1); // 由1位置从左向右查找 123... 结果：2 \n    \n</code></pre>\n<p>8、search方法返回与正则表达式查找内容匹配的第一个字符串的位置。 </p>\n<pre><code>    strObj.search(reExp) \n    reExp包含正则表达式模式和可用标志的正则表达式对象。 \n    var str = &quot;ABCDECDF&quot;; \n    str.search(&quot;CD&quot;); // 或 str.search(/CD/i); 结果：2 \n    \n</code></pre>\n<p>9、concat方法返回字符串值，该值包含了两个或多个提供的字符串的连接。 </p>\n<pre><code>    str.concat([string1[,string2...]]) \n    string1，string2要和所有其他指定的字符串进行连接的String对象或文字。 \n    var str = &quot;ABCDEF&quot;; \n    str.concat(&quot;ABCDEF&quot;,&quot;ABC&quot;); \n    结果：ABCDEFABCDEFABC\n</code></pre>\n<p>10、Split将一个字符串分割为子字符串，然后将结果作为字符串数组返回。 </p>\n<pre><code>    strObj.split([separator[,limit]]) \n    separator字符串或 正则表达式 对象，它标识了分隔字符串时使用的是一个还是    多个字符。如果忽略该选项，返回包含整个字符串的单一元素数组。 \n    limit该值用来限制返回数组中的元素个数。 \n    var str = &quot;AA BB CC DD EE FF&quot;; \n    alert(str.split(&quot; &quot;，3)); \n    结果： AA,BB,CC \n</code></pre>\n<p>11、 toLowerCase方法用于将一个字符串全部转为小写</p>\n<p>toUpperCase则是全部转为大写。</p>\n<p>它们都返回一个新字符串，不改变原字符串。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&quot; hello word &quot;</span>.trim());</span><br><span class=\"line\"><span class=\"comment\">//hello world</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;Hello World&#x27;</span>.toLowerCase());</span><br><span class=\"line\"><span class=\"comment\">// &quot;hello world&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;Hello World&#x27;</span>.toUpperCase());</span><br><span class=\"line\"><span class=\"comment\">// &quot;HELLO WORLD&quot;</span></span><br></pre></td></tr></table></figure>\n<p>12、trim(): 用于去除字符串两端的空白，返回一个新字符串 不改变原数据</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27; hello world &#x27;</span>.trim())； <span class=\"comment\">//hello word</span></span><br></pre></td></tr></table></figure>\n<p>13、replace 返回被替换的字符串</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str.replace(rgExp/substr,replaceText)  </span><br></pre></td></tr></table></figure>\n\n<h1 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h1><blockquote>\n<p>数组的概念：有序的元素的集合    使用数字作为索引的一个对象  索引为从0开始的整数</p>\n</blockquote>\n<h2 id=\"创建方式\"><a href=\"#创建方式\" class=\"headerlink\" title=\"创建方式\"></a>创建方式</h2><p>1、构造数组  var arr = new Array（）；</p>\n<p>向数组中添加元素：数组[索引] = 值；<br>读取数组  数组[索引]  当索引值比数组长度大时，会返回undefined；<br>数组长度：数组.length;</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();</span><br><span class=\"line\">arr1[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">arr1.length = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr1,arr1.length); <span class=\"comment\">//如果修改的length大于原长度，则多出部分会空出来；</span></span><br><span class=\"line\">arr1.length = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr1,arr1.length); <span class=\"comment\">//如果修改的length小于原长度，则多出的部分会删除；</span></span><br></pre></td></tr></table></figure>\n<p>2、字面量创建数组   var arr = []；</p>\n<p>中括号里边可以直接添加元素（可以是任意类型的数据类型）；</p>\n<h2 id=\"数组的操作方法\"><a href=\"#数组的操作方法\" class=\"headerlink\" title=\"数组的操作方法\"></a>数组的操作方法</h2><p>1、push（） 可以接收任意数量的参数，把他们逐个添加到数组末尾，并返回修改后数组的长度</p>\n<p>2、Pop（） 数组末尾移除最后一项，减少数组的LENGTH值，并返回被删除的元素</p>\n<p>3、Unshift（） 在数组的头部添加一个或者多个元素，返回增加后数组的长度</p>\n<p>4、Shift（）     从数组的头部删除一个元素并返回这个删除的元素，如果数组为空则返回undefined；</p>\n<p>5、Slice（）返回从原数组中指定开始下标到结束下标之间的项组成的新数组。</p>\n<pre><code>slice()方法可以接受一或两个参数，即要返回项的起始和结束位置。\n在只有一个参数的情况下， slice()方法返回从该参数指定位置开始到当前数组末尾的所有项。\n如果有两个参数，该方法返回起始和结束位置之间的项——但不包括结束位置的项。\nvar a = arr(0,2);\n第二个参数可以是负值：则从后往前截取 -1：最后一个\n</code></pre>\n<p>6、splice:</p>\n<pre><code>删除：可以删除任意数量的项，只需指定 2 个参数：要删除的第一项的位置和要删除的项数。例如， splice(0,2)会删除数组中的前两项。\n\n插入：可以向指定位置插入任意数量的项，只需提供 3 个参数：起始位置、 0（要删除的项数）和要插入的项。例如，splice(2,0,4,6)会从当前数组的位置 2 开始插入4和6。\n\n替换：可以向指定位置插入任意数量的项，且同时删除任意数量的项，只需指定 3 个参数：起始位置、要删除的项数和要插入的任意数量的项。插入的项数不必与删除的项数相等。例如，splice (2,1,4,6)会删除当前数组位置 2 的项，然后再从位置 2 开始插入4和6。\nsplice()方法始终都会返回一个数组，该数组中包含从原始数组中删除的项，如果没有删除任何项，则返回一个空数组。\n</code></pre>\n<p>7、join()</p>\n<pre><code>将数组的元素组成一个字符串\n不会对原数据产生影响，会把转化后的字符串作为结果返回\n在join（）中可以指定一个字符串作为参数，这个字符串将会作为数组中元素的连接符，如果不指定连接符，默认为逗号\n</code></pre>\n<p>8、reverse():<br>用来反转数组，前面的去后面，后面的去前面；</p>\n<p>9、Sort（） 对数组成员进行排序，默认按照字典顺序排序，原数组会改变</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr.sort(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">a,b</span>)</span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> a-b;<span class=\"comment\">//升序</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>sort的参数函数本身接受两个参数，表示进行比较的两个数组成员。如果该函数的返回值大于0，表示第一个成员排在第二个成员后面；其他情况下，都是第一个元素排在第二个元素前面</p>\n<p>10、concat() ：将参数添加到原数组中。</p>\n<pre><code>这个方法会先创建当前数组一个副本，然后将接收到的参数添加到这个副本的末尾，最后返回新构建的数组。在没有给 concat()方法传递参数的情况下，它只是复制当前数组并返回副本。 \n</code></pre>\n<p>11、indexOf()：接收两个参数：要查找的项和（可选的）表示查找起点位置的索引。其中， 从数组的开头（位置 0）开始向后查找。 </p>\n<p>12、lastIndexOf：接收两个参数：要查找的项和（可选的）表示查找起点位置的索引。其中， 从数组的末尾开始向前查找。</p>\n<p>这两个方法都返回要查找的项在数组中的位置，或者在没找到的情况下返回-1。在比较第一个参数与数组中的每一项时，会使用全等操作符。</p>\n<p>13、forEach()：对数组进行遍历循环，对数组中的每一项运行给定函数。这个方法没有返回值。参数都是function类型，默认有传参，参数分别为：遍历的数组内容；对应的数组索引，数组本身。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">6</span>,<span class=\"number\">4</span>];<span class=\"comment\">//1 0 true；2 1  true；6 2 true；4 3 true</span></span><br><span class=\"line\">arr.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x,index,a</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(x+<span class=\"string\">&quot; &quot;</span>+index+<span class=\"string\">&quot; &quot;</span>+(a===arr));</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>14、map()：指“映射”，对数组中的每一项运行给定函数，返回每次函数调用的结果组成的数组。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr1 = [<span class=\"number\">32</span>,<span class=\"number\">5</span>,<span class=\"number\">11</span>,<span class=\"number\">12</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = arr1.map(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x+<span class=\"number\">3</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr);  <span class=\"comment\">//[35,8,14,15]</span></span><br></pre></td></tr></table></figure>\n<p>15、filter(): 用于过滤数组成员，满足条件的成员组成一个 新数组返回 原数组不变<br>它的参数是一个函数，所有数组成员一次执行，返回结果为 true 的元素组成一个新数组返回<br>第一个参数：当前成员<br>第二个参数：当前成员的索引<br>第三个参数：整个数组</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr2 = [<span class=\"number\">21</span>,<span class=\"number\">152</span>,<span class=\"number\">66</span>,<span class=\"number\">565</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr3 = arr2.filter(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x,index</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x % <span class=\"number\">3</span> == <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr3);<span class=\"comment\">//[21,66];</span></span><br></pre></td></tr></table></figure>\n<p>15、every()：判断数组中每一项都是否满足条件，只有所有项都满足条件，才会返回true。</p>\n<p>16、some():判断数组中是否存在满足条件的项，只要有一项满足条件，就会返回true。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">//every</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr4 = [<span class=\"number\">26</span>,<span class=\"number\">641</span>,<span class=\"number\">15312</span>,<span class=\"number\">63</span>,<span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr5 = arr4.every(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x &gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr5);<span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"comment\">//some</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr7 = arr4.some(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x &gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr7);<span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n<p>17、reduce(): 将内部的返回值作为实参传递第一个形参，进行下一次运算</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr =[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> sum = arr.reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)</span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> a+b;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sum); <span class=\"comment\">//1+2+3+5=11</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h1><h2 id=\"字符串的创建：\"><a href=\"#字符串的创建：\" class=\"headerlink\" title=\"字符串的创建：\"></a>字符串的创建：</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&quot;abc&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"keyword\">new</span> <span class=\"built_in\">String</span>();</span><br></pre></td></tr></table></figure>\n<p>将任意类型的值转换成字符串：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Var a = <span class=\"number\">10</span>;</span><br><span class=\"line\">Var str = a.toString(); <span class=\"comment\">//string</span></span><br><span class=\"line\">Var str1 = “”+a; <span class=\"comment\">//string</span></span><br><span class=\"line\">Var str2 = <span class=\"built_in\">String</span>(a);<span class=\"comment\">//string</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>　除了 slice() 和 substr() 方法里的负值是代表从右截取，其他方法里的负值一律作为0处理</p>\n</blockquote>\n<ol>\n<li><p>charCodeAt方法返回一个整数，代表指定位置字符的Unicode编码。<br>Str.charCodeAt(index);如果指定位置没有字符，返回NaN；</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&quot;abc&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.charCodeAt(<span class=\"number\">3</span>));<span class=\"comment\">//NaN</span></span><br></pre></td></tr></table></figure></li>\n<li><p>fromCharCode方法从一些Unicode字符串中返回一个字符串。 </p>\n</li>\n<li><p>charAt方法返回指定索引位置处的字符。如果超出有效范围的索引值返回空字符串。</p>\n</li>\n<li><p>slice方法返回字符串的片段。</p>\n</li>\n</ol>\n<pre><code>strObj.slice(start[,end]) \n\nstart下标从0开始的strObj指定部分起始索引。如果start为负，将它作为length+start处理，此处length为字符串的长度。 \n\nend小标从0开始的strObj指定部分结束索引。如果end为负，将它作为length+end处理，此处length为字符串的长度。\n</code></pre>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&quot;abc&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> str1 = str.slice(<span class=\"number\">0</span>,-<span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> str2 = str.slice(-<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str1,str2);<span class=\"comment\">//a c</span></span><br></pre></td></tr></table></figure>\n<p>5、substring方法返回位于String对象中指定位置的子字符串</p>\n<pre><code>strObj.substring(start,end) \n\n    start指明子字符串的起始位置，该索引从0开始起算。 \n        \n    end指明子字符串的结束位置，该索引从0开始起算。 \n        \n    substring方法使用start和end两者中的较小值作为子字符串的起始点。如果start或end为NaN或者为负数，那么将其替换为0。\n</code></pre>\n<p>6、substr方法返回一个从指定位置开始的指定长度的子字符串。 </p>\n<pre><code>    strObj.substr(start[,length]) \n    start所需的子字符串的起始位置。字符串中的第一个字符的索引为0。 \n    length在返回的子字符串中应包括的字符个数。 \n    var str = &quot;ABCDEF&quot;; \n    str.substr(2,4); //CDEF ；\n    \n</code></pre>\n<p>7、indexOf方法返回String对象内第一次出现子字符串位置。如果没有找到子字符串，则返回-1。 </p>\n<p>lastindexOf()方法从尾部开始寻找对象中第一次出现子字符串的位置</p>\n<pre><code>    strObj.indexOf(substr[,startIndex]) \n    substr要在String对象中查找的子字符串。 \n    startIndex该整数值指出在String对象内开始查找的索引。如果省略，则从字符串的开始处查找。 \n    var str = &quot;ABCDECDF&quot;; \n    str.indexOf(&quot;CD&quot;，1); // 由1位置从左向右查找 123... 结果：2 \n    \n</code></pre>\n<p>8、search方法返回与正则表达式查找内容匹配的第一个字符串的位置。 </p>\n<pre><code>    strObj.search(reExp) \n    reExp包含正则表达式模式和可用标志的正则表达式对象。 \n    var str = &quot;ABCDECDF&quot;; \n    str.search(&quot;CD&quot;); // 或 str.search(/CD/i); 结果：2 \n    \n</code></pre>\n<p>9、concat方法返回字符串值，该值包含了两个或多个提供的字符串的连接。 </p>\n<pre><code>    str.concat([string1[,string2...]]) \n    string1，string2要和所有其他指定的字符串进行连接的String对象或文字。 \n    var str = &quot;ABCDEF&quot;; \n    str.concat(&quot;ABCDEF&quot;,&quot;ABC&quot;); \n    结果：ABCDEFABCDEFABC\n</code></pre>\n<p>10、Split将一个字符串分割为子字符串，然后将结果作为字符串数组返回。 </p>\n<pre><code>    strObj.split([separator[,limit]]) \n    separator字符串或 正则表达式 对象，它标识了分隔字符串时使用的是一个还是    多个字符。如果忽略该选项，返回包含整个字符串的单一元素数组。 \n    limit该值用来限制返回数组中的元素个数。 \n    var str = &quot;AA BB CC DD EE FF&quot;; \n    alert(str.split(&quot; &quot;，3)); \n    结果： AA,BB,CC \n</code></pre>\n<p>11、 toLowerCase方法用于将一个字符串全部转为小写</p>\n<p>toUpperCase则是全部转为大写。</p>\n<p>它们都返回一个新字符串，不改变原字符串。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&quot; hello word &quot;</span>.trim());</span><br><span class=\"line\"><span class=\"comment\">//hello world</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;Hello World&#x27;</span>.toLowerCase());</span><br><span class=\"line\"><span class=\"comment\">// &quot;hello world&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;Hello World&#x27;</span>.toUpperCase());</span><br><span class=\"line\"><span class=\"comment\">// &quot;HELLO WORLD&quot;</span></span><br></pre></td></tr></table></figure>\n<p>12、trim(): 用于去除字符串两端的空白，返回一个新字符串 不改变原数据</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27; hello world &#x27;</span>.trim())； <span class=\"comment\">//hello word</span></span><br></pre></td></tr></table></figure>\n<p>13、replace 返回被替换的字符串</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str.replace(rgExp/substr,replaceText)  </span><br></pre></td></tr></table></figure>\n\n<h1 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h1><blockquote>\n<p>数组的概念：有序的元素的集合    使用数字作为索引的一个对象  索引为从0开始的整数</p>\n</blockquote>\n<h2 id=\"创建方式\"><a href=\"#创建方式\" class=\"headerlink\" title=\"创建方式\"></a>创建方式</h2><p>1、构造数组  var arr = new Array（）；</p>\n<p>向数组中添加元素：数组[索引] = 值；<br>读取数组  数组[索引]  当索引值比数组长度大时，会返回undefined；<br>数组长度：数组.length;</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();</span><br><span class=\"line\">arr1[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">arr1.length = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr1,arr1.length); <span class=\"comment\">//如果修改的length大于原长度，则多出部分会空出来；</span></span><br><span class=\"line\">arr1.length = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr1,arr1.length); <span class=\"comment\">//如果修改的length小于原长度，则多出的部分会删除；</span></span><br></pre></td></tr></table></figure>\n<p>2、字面量创建数组   var arr = []；</p>\n<p>中括号里边可以直接添加元素（可以是任意类型的数据类型）；</p>\n<h2 id=\"数组的操作方法\"><a href=\"#数组的操作方法\" class=\"headerlink\" title=\"数组的操作方法\"></a>数组的操作方法</h2><p>1、push（） 可以接收任意数量的参数，把他们逐个添加到数组末尾，并返回修改后数组的长度</p>\n<p>2、Pop（） 数组末尾移除最后一项，减少数组的LENGTH值，并返回被删除的元素</p>\n<p>3、Unshift（） 在数组的头部添加一个或者多个元素，返回增加后数组的长度</p>\n<p>4、Shift（）     从数组的头部删除一个元素并返回这个删除的元素，如果数组为空则返回undefined；</p>\n<p>5、Slice（）返回从原数组中指定开始下标到结束下标之间的项组成的新数组。</p>\n<pre><code>slice()方法可以接受一或两个参数，即要返回项的起始和结束位置。\n在只有一个参数的情况下， slice()方法返回从该参数指定位置开始到当前数组末尾的所有项。\n如果有两个参数，该方法返回起始和结束位置之间的项——但不包括结束位置的项。\nvar a = arr(0,2);\n第二个参数可以是负值：则从后往前截取 -1：最后一个\n</code></pre>\n<p>6、splice:</p>\n<pre><code>删除：可以删除任意数量的项，只需指定 2 个参数：要删除的第一项的位置和要删除的项数。例如， splice(0,2)会删除数组中的前两项。\n\n插入：可以向指定位置插入任意数量的项，只需提供 3 个参数：起始位置、 0（要删除的项数）和要插入的项。例如，splice(2,0,4,6)会从当前数组的位置 2 开始插入4和6。\n\n替换：可以向指定位置插入任意数量的项，且同时删除任意数量的项，只需指定 3 个参数：起始位置、要删除的项数和要插入的任意数量的项。插入的项数不必与删除的项数相等。例如，splice (2,1,4,6)会删除当前数组位置 2 的项，然后再从位置 2 开始插入4和6。\nsplice()方法始终都会返回一个数组，该数组中包含从原始数组中删除的项，如果没有删除任何项，则返回一个空数组。\n</code></pre>\n<p>7、join()</p>\n<pre><code>将数组的元素组成一个字符串\n不会对原数据产生影响，会把转化后的字符串作为结果返回\n在join（）中可以指定一个字符串作为参数，这个字符串将会作为数组中元素的连接符，如果不指定连接符，默认为逗号\n</code></pre>\n<p>8、reverse():<br>用来反转数组，前面的去后面，后面的去前面；</p>\n<p>9、Sort（） 对数组成员进行排序，默认按照字典顺序排序，原数组会改变</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr.sort(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">a,b</span>)</span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> a-b;<span class=\"comment\">//升序</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>sort的参数函数本身接受两个参数，表示进行比较的两个数组成员。如果该函数的返回值大于0，表示第一个成员排在第二个成员后面；其他情况下，都是第一个元素排在第二个元素前面</p>\n<p>10、concat() ：将参数添加到原数组中。</p>\n<pre><code>这个方法会先创建当前数组一个副本，然后将接收到的参数添加到这个副本的末尾，最后返回新构建的数组。在没有给 concat()方法传递参数的情况下，它只是复制当前数组并返回副本。 \n</code></pre>\n<p>11、indexOf()：接收两个参数：要查找的项和（可选的）表示查找起点位置的索引。其中， 从数组的开头（位置 0）开始向后查找。 </p>\n<p>12、lastIndexOf：接收两个参数：要查找的项和（可选的）表示查找起点位置的索引。其中， 从数组的末尾开始向前查找。</p>\n<p>这两个方法都返回要查找的项在数组中的位置，或者在没找到的情况下返回-1。在比较第一个参数与数组中的每一项时，会使用全等操作符。</p>\n<p>13、forEach()：对数组进行遍历循环，对数组中的每一项运行给定函数。这个方法没有返回值。参数都是function类型，默认有传参，参数分别为：遍历的数组内容；对应的数组索引，数组本身。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">6</span>,<span class=\"number\">4</span>];<span class=\"comment\">//1 0 true；2 1  true；6 2 true；4 3 true</span></span><br><span class=\"line\">arr.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x,index,a</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(x+<span class=\"string\">&quot; &quot;</span>+index+<span class=\"string\">&quot; &quot;</span>+(a===arr));</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>14、map()：指“映射”，对数组中的每一项运行给定函数，返回每次函数调用的结果组成的数组。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr1 = [<span class=\"number\">32</span>,<span class=\"number\">5</span>,<span class=\"number\">11</span>,<span class=\"number\">12</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = arr1.map(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x+<span class=\"number\">3</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr);  <span class=\"comment\">//[35,8,14,15]</span></span><br></pre></td></tr></table></figure>\n<p>15、filter(): 用于过滤数组成员，满足条件的成员组成一个 新数组返回 原数组不变<br>它的参数是一个函数，所有数组成员一次执行，返回结果为 true 的元素组成一个新数组返回<br>第一个参数：当前成员<br>第二个参数：当前成员的索引<br>第三个参数：整个数组</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr2 = [<span class=\"number\">21</span>,<span class=\"number\">152</span>,<span class=\"number\">66</span>,<span class=\"number\">565</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr3 = arr2.filter(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x,index</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x % <span class=\"number\">3</span> == <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr3);<span class=\"comment\">//[21,66];</span></span><br></pre></td></tr></table></figure>\n<p>15、every()：判断数组中每一项都是否满足条件，只有所有项都满足条件，才会返回true。</p>\n<p>16、some():判断数组中是否存在满足条件的项，只要有一项满足条件，就会返回true。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">//every</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr4 = [<span class=\"number\">26</span>,<span class=\"number\">641</span>,<span class=\"number\">15312</span>,<span class=\"number\">63</span>,<span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr5 = arr4.every(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x &gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr5);<span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"comment\">//some</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr7 = arr4.some(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x &gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr7);<span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n<p>17、reduce(): 将内部的返回值作为实参传递第一个形参，进行下一次运算</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr =[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> sum = arr.reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)</span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> a+b;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sum); <span class=\"comment\">//1+2+3+5=11</span></span><br></pre></td></tr></table></figure>"},{"title":"原型和原型链","date":"2021-02-27T13:17:00.000Z","_content":"> js中有一个话，叫万物皆对象，因为js是基于原型的\n\n## 原型\n\n当我们创建一个对象时 let obj = { age: 25 }，我们可以发现能使用很多种函数，但是我们明明没有定义过它们，对于这种情况你是否有过疑惑？\n\n当我们在浏览器中打印 obj 时你会发现，在 obj 上居然还有一个 __proto__ 属性，那么看来之前的疑问就和这个属性有关系了。\n\n其实每个 JS 对象都有 __proto__ 属性，这个属性指向了原型。这个属性在现在来说已经不推荐直接去使用它了，这只是浏览器在早期为了让我们访问到内部属性 [[prototype]] 来实现的一个东西。\n\n讲到这里好像还是没有弄明白什么是原型，接下来让我们再看看 __proto__ 里面有什么吧。\n\n\n看到这里你应该明白了，原型也是一个对象，并且这个对象中包含了很多函数，所以我们可以得出一个结论：对于 obj 来说，可以通过 __proto__ 找到一个原型对象，在该对象中定义了很多函数让我们来使用。\n\n在上面的图中我们还可以发现一个 constructor 属性，也就是构造函数\n\n\n打开 constructor 属性我们又可以发现其中还有一个 prototype 属性，并且这个属性对应的值和先前我们在 __proto__ 中看到的一模一样。所以我们又可以得出一个结论：原型的 constructor 属性指向构造函数，构造函数又通过 prototype 属性指回原型，但是并不是所有函数都具有这个属性，Function.prototype.bind() 就没有这个属性。\n\n其实原型就是那么简单，接下来我们再来看一张图，相信这张图能让你彻底明白原型和原型链\n\n\n看完这张图，我再来解释下什么是原型链吧。其实原型链就是多个对象通过 __proto__ 的方式连接了起来。为什么 obj 可以访问到 valueOf 函数，就是因为 obj 通过原型链找到了 valueOf 函数。\n\n## 继承\n类与类之间的关系  基类 父类 子类\n\n    //call&apply方法实现继承\n\t\t\tfunction Person(name,age){\n\t\t\t\tthis.name = name;\n\t\t\t\tthis.age = age;\n\t\t\t\tthis.sayHello = function (){\n\t\t\t\t\tconsole.log(this.name);\n\t\t\t\t}\n\t\t\t}\n\t\t\tfunction Male(name,age){\n\t\t\t\t//继承父类Person  call&apply 调用的是父类的构造函数\n    //\t\t\t\tPerson.call(this,name,age);\n\t\t\t\tPerson.apply(this,[name,age]);\n\t\t\t}\n\t\t\tvar male = new Male(\"ly\",20);\n\t\t\tmale.sayHello();\n\t\t\t\n\t\t\t\n\t\t\t//原型继承\n\t\t\t\n\t\t\t//\n\t\t\t\n\t\t\t//每一个构造函数都有一个原型对象(也就是Person.prototype)，每一个原型对象都有一个指针constructor指向构造函数，每一个实例都有一个内部指针（__proto__），指向原型对象，原型对象上的属性和方法能被实例所访问\n\t\t\t//这里不能用call&apply的原因是父类的构造函数里边什么也没有 现在要调用的是父类的原型对象\n\t\t\t/*function Person(){\n\t\t\t\t\n\t\t\t}\n\t\t\t//Person.prototype里的属性和方法可以被Person的实例访问到\n\t\t\tPerson.prototype.name = \"jhon\";\n\t\t\tPerson.prototype.age = 20;\n\t\t\tPerson.prototype.sayHello = function (){\n\t\t\t\tconsole.log(this.name);\n\t\t\t}\n\t\t\tfunction Male(){\n\t\t\t\tthis.sayHi=function (){\n\t\t\t\t\tconsole.log(\"aa\")\n\t\t\t\t}\n\t\t\t}\n\t\t\t//Male.prototype.__proto__ 指向Person.prototype\n\t\t\tMale.prototype = new Person();\n\t\t\t//Male.prototype = Person.prototype;\n\t\t\tvar male = new Male();\n\t\t\tmale.sayHello();\n\t\t\tconsole.log(male.__proto__);//正常情况下应该指向Male.prototype 但是现在指向Person.prototype\n\t\t\t//male.__proto__ -> Male.prototype   Male.prototype.__proto__ -> Person.prototype\n\t\t\t//当male调用sayhello方法时会找到Male.prototype，如果Male.prototype没有的话就会继续向它的父类找，直到找到Object.prototype停止，Object.prototype.__proto__为null\n\t\t\t\n\t\t\t//原型链  原型链上的属性和方法都能被实例所访问到 \n\t\t\t\n\t\t\tconsole.log(male.__proto__ == Male.prototype);//true\n\t\t\tconsole.log(Male.prototype.__proto__ == Person.prototype);//true\n\t\t\tmale.sayHi();\n\t\t\tvar obj = {};\n\t\t\t//将其他类型转换成字符串时，默认会调用toString方法，这个方法是顶层原型对象上的方法，可以改写,改写之后，转换的结果以改写结果为准\n\t\t\tobj.toString = function(){\n\t\t\t\treturn 111111;\n\t\t\t}\n\t\t\tdocument.write(obj);//111111*/\n\t\t\t\n\t\t\t//组合继承\n\t\t\t/*function Person(name,age){\n\t\t\t\tthis.name = name;\n\t\t\t\tthis.age = age;\n\t\t\t}\n\t\t\tPerson.prototype.sayHello = function (){\n\t\t\t\tconsole.log(this.name);\n\t\t\t}\n\t\t\tfunction Male(name,age){\n\t\t\t\tPerson.call(this,name,age);\n\t\t\t}\n\t\t\t//Male.prototype = new Person();\n\t\t\t//弊端在于Person.call的时候运行了一次构造函数Person，当Male.prototype = new Person()的时候又运行了一次\n\t\t\t\n    //\t\t\tMale.prototype = Person.prototype;\n    //\t\t\t//这时候Person.call指向的是Person里的name和age，而Male.prototype = Person.prototype指的是sayhello  弊端是这时候相当于传址，父类person的实例也能够访问到子类Male里的原型对象的方法，而这是不合道理的\n    //\t\t\tMale.prototype.sayHi = function(){\n    //\t\t\t\tconsole.log(\"aa\");\n    //\t\t\t}\n    //\t\t\tvar person = new Person();\n    //\t\t\tperson.sayHi();\n          \n\t\t\t//遍历person.prototype    call继承实例属性 这种方式继承原型方法\n\t\t\tfor(var i in Person.prototype){\n\t\t\t\tMale.prototype[i] = Person.prototype[i];\n\t\t\t}\n\t\t\tvar male = new Male(\"ly\",20);\n\t\t\tmale.sayHello();*/\n\t\t\t\n\t\t\t//寄生式组合继承  Object.create()\n\t\t\t/*var obj1 = {a:1};\n\t\t\tvar obj2 = {b:2};\n\t\t\tvar a = Object.create(obj1);\n\t\t\tconsole.log(a.__proto__);//结果是a:1  这时候的obj1是作为创建出来的实例a的原型对象存在 a.__proto__指obj1\n\t\t\tfunction Person(name,age){\n\t\t\t\tthis.name = name;\n\t\t\t\tthis.age = age;\n\t\t\t}\n\t\t\tPerson.prototype.sayHello = function (){\n\t\t\t\tconsole.log(this.name);\n\t\t\t}\n\t\t\tfunction Male(name,age){\n\t\t\t\tPerson.call(this,name,age);\n\t\t\t}\n\t\t\tMale.prototype = Object.create(Person.prototype);\n\t\t\tMale.prototype.constructor = Male;\n\t\t\tvar male = new Male(\"ly\",20);\n\t\t\tmale.sayHello();\n\t\t\tconsole.log(male.__proto__.constructor);//本来应该指向Male 但是现在指向了Person 需要加上Male.prototype.constructor = Male 让它的原型对象指向自己*/\n\t\t\t\n\t\t\t\n\t\t\t//ES6继承\n\t\t\tclass Person{\n\t\t\t\tconstructor(name,age){\n\t\t\t\t\tthis.name = name;\n\t\t\t\t\tthis.age = age;\n\t\t\t\t}\n\t\t\t\tsayHello(){\n\t\t\t\t\tconsole.log(this.name);\n\t\t\t\t}\n\t\t\t\t//static 是一个静态方法 也就是说foo可以认为是这个构造函数自带的一个方法\n\t\t\t\tstatic foo(){\n\t\t\t\t\tconsole.log(\"aa\");\n\t\t\t\t}\n\t\t\t}\n\t\t\tconsole.log(Person.prototype)\n\t\t\t//用到exends关键字和super方法\n\t\t\tclass Male extends Person{\n\t\t\t\tconstructor(name,age){\n\t\t\t\t\t//相当于拿到了Person的this.name和this.age 同时改变了this指向\n\t\t\t\t\tsuper(name,age)\n\t\t\t\t}\n\t\t\t\tsayHi(){\n\t\t\t\t\tsuper.sayHello();\n\t\t\t\t}\n\t\t\t}\n\t\t\tvar male = new Male(\"ly\",20);\n\t\t\tmale.sayHello();\n\t\t\tmale.sayHi();//结果一样","source":"_posts/js基础/原型和原型链.md","raw":"---\ntitle: 原型和原型链\ndate: 2021-02-27 21:17:00\ncategories: \"js\"\ntags: [\"原型\",\"原型链\",\"js\"]\n---\n> js中有一个话，叫万物皆对象，因为js是基于原型的\n\n## 原型\n\n当我们创建一个对象时 let obj = { age: 25 }，我们可以发现能使用很多种函数，但是我们明明没有定义过它们，对于这种情况你是否有过疑惑？\n\n当我们在浏览器中打印 obj 时你会发现，在 obj 上居然还有一个 __proto__ 属性，那么看来之前的疑问就和这个属性有关系了。\n\n其实每个 JS 对象都有 __proto__ 属性，这个属性指向了原型。这个属性在现在来说已经不推荐直接去使用它了，这只是浏览器在早期为了让我们访问到内部属性 [[prototype]] 来实现的一个东西。\n\n讲到这里好像还是没有弄明白什么是原型，接下来让我们再看看 __proto__ 里面有什么吧。\n\n\n看到这里你应该明白了，原型也是一个对象，并且这个对象中包含了很多函数，所以我们可以得出一个结论：对于 obj 来说，可以通过 __proto__ 找到一个原型对象，在该对象中定义了很多函数让我们来使用。\n\n在上面的图中我们还可以发现一个 constructor 属性，也就是构造函数\n\n\n打开 constructor 属性我们又可以发现其中还有一个 prototype 属性，并且这个属性对应的值和先前我们在 __proto__ 中看到的一模一样。所以我们又可以得出一个结论：原型的 constructor 属性指向构造函数，构造函数又通过 prototype 属性指回原型，但是并不是所有函数都具有这个属性，Function.prototype.bind() 就没有这个属性。\n\n其实原型就是那么简单，接下来我们再来看一张图，相信这张图能让你彻底明白原型和原型链\n\n\n看完这张图，我再来解释下什么是原型链吧。其实原型链就是多个对象通过 __proto__ 的方式连接了起来。为什么 obj 可以访问到 valueOf 函数，就是因为 obj 通过原型链找到了 valueOf 函数。\n\n## 继承\n类与类之间的关系  基类 父类 子类\n\n    //call&apply方法实现继承\n\t\t\tfunction Person(name,age){\n\t\t\t\tthis.name = name;\n\t\t\t\tthis.age = age;\n\t\t\t\tthis.sayHello = function (){\n\t\t\t\t\tconsole.log(this.name);\n\t\t\t\t}\n\t\t\t}\n\t\t\tfunction Male(name,age){\n\t\t\t\t//继承父类Person  call&apply 调用的是父类的构造函数\n    //\t\t\t\tPerson.call(this,name,age);\n\t\t\t\tPerson.apply(this,[name,age]);\n\t\t\t}\n\t\t\tvar male = new Male(\"ly\",20);\n\t\t\tmale.sayHello();\n\t\t\t\n\t\t\t\n\t\t\t//原型继承\n\t\t\t\n\t\t\t//\n\t\t\t\n\t\t\t//每一个构造函数都有一个原型对象(也就是Person.prototype)，每一个原型对象都有一个指针constructor指向构造函数，每一个实例都有一个内部指针（__proto__），指向原型对象，原型对象上的属性和方法能被实例所访问\n\t\t\t//这里不能用call&apply的原因是父类的构造函数里边什么也没有 现在要调用的是父类的原型对象\n\t\t\t/*function Person(){\n\t\t\t\t\n\t\t\t}\n\t\t\t//Person.prototype里的属性和方法可以被Person的实例访问到\n\t\t\tPerson.prototype.name = \"jhon\";\n\t\t\tPerson.prototype.age = 20;\n\t\t\tPerson.prototype.sayHello = function (){\n\t\t\t\tconsole.log(this.name);\n\t\t\t}\n\t\t\tfunction Male(){\n\t\t\t\tthis.sayHi=function (){\n\t\t\t\t\tconsole.log(\"aa\")\n\t\t\t\t}\n\t\t\t}\n\t\t\t//Male.prototype.__proto__ 指向Person.prototype\n\t\t\tMale.prototype = new Person();\n\t\t\t//Male.prototype = Person.prototype;\n\t\t\tvar male = new Male();\n\t\t\tmale.sayHello();\n\t\t\tconsole.log(male.__proto__);//正常情况下应该指向Male.prototype 但是现在指向Person.prototype\n\t\t\t//male.__proto__ -> Male.prototype   Male.prototype.__proto__ -> Person.prototype\n\t\t\t//当male调用sayhello方法时会找到Male.prototype，如果Male.prototype没有的话就会继续向它的父类找，直到找到Object.prototype停止，Object.prototype.__proto__为null\n\t\t\t\n\t\t\t//原型链  原型链上的属性和方法都能被实例所访问到 \n\t\t\t\n\t\t\tconsole.log(male.__proto__ == Male.prototype);//true\n\t\t\tconsole.log(Male.prototype.__proto__ == Person.prototype);//true\n\t\t\tmale.sayHi();\n\t\t\tvar obj = {};\n\t\t\t//将其他类型转换成字符串时，默认会调用toString方法，这个方法是顶层原型对象上的方法，可以改写,改写之后，转换的结果以改写结果为准\n\t\t\tobj.toString = function(){\n\t\t\t\treturn 111111;\n\t\t\t}\n\t\t\tdocument.write(obj);//111111*/\n\t\t\t\n\t\t\t//组合继承\n\t\t\t/*function Person(name,age){\n\t\t\t\tthis.name = name;\n\t\t\t\tthis.age = age;\n\t\t\t}\n\t\t\tPerson.prototype.sayHello = function (){\n\t\t\t\tconsole.log(this.name);\n\t\t\t}\n\t\t\tfunction Male(name,age){\n\t\t\t\tPerson.call(this,name,age);\n\t\t\t}\n\t\t\t//Male.prototype = new Person();\n\t\t\t//弊端在于Person.call的时候运行了一次构造函数Person，当Male.prototype = new Person()的时候又运行了一次\n\t\t\t\n    //\t\t\tMale.prototype = Person.prototype;\n    //\t\t\t//这时候Person.call指向的是Person里的name和age，而Male.prototype = Person.prototype指的是sayhello  弊端是这时候相当于传址，父类person的实例也能够访问到子类Male里的原型对象的方法，而这是不合道理的\n    //\t\t\tMale.prototype.sayHi = function(){\n    //\t\t\t\tconsole.log(\"aa\");\n    //\t\t\t}\n    //\t\t\tvar person = new Person();\n    //\t\t\tperson.sayHi();\n          \n\t\t\t//遍历person.prototype    call继承实例属性 这种方式继承原型方法\n\t\t\tfor(var i in Person.prototype){\n\t\t\t\tMale.prototype[i] = Person.prototype[i];\n\t\t\t}\n\t\t\tvar male = new Male(\"ly\",20);\n\t\t\tmale.sayHello();*/\n\t\t\t\n\t\t\t//寄生式组合继承  Object.create()\n\t\t\t/*var obj1 = {a:1};\n\t\t\tvar obj2 = {b:2};\n\t\t\tvar a = Object.create(obj1);\n\t\t\tconsole.log(a.__proto__);//结果是a:1  这时候的obj1是作为创建出来的实例a的原型对象存在 a.__proto__指obj1\n\t\t\tfunction Person(name,age){\n\t\t\t\tthis.name = name;\n\t\t\t\tthis.age = age;\n\t\t\t}\n\t\t\tPerson.prototype.sayHello = function (){\n\t\t\t\tconsole.log(this.name);\n\t\t\t}\n\t\t\tfunction Male(name,age){\n\t\t\t\tPerson.call(this,name,age);\n\t\t\t}\n\t\t\tMale.prototype = Object.create(Person.prototype);\n\t\t\tMale.prototype.constructor = Male;\n\t\t\tvar male = new Male(\"ly\",20);\n\t\t\tmale.sayHello();\n\t\t\tconsole.log(male.__proto__.constructor);//本来应该指向Male 但是现在指向了Person 需要加上Male.prototype.constructor = Male 让它的原型对象指向自己*/\n\t\t\t\n\t\t\t\n\t\t\t//ES6继承\n\t\t\tclass Person{\n\t\t\t\tconstructor(name,age){\n\t\t\t\t\tthis.name = name;\n\t\t\t\t\tthis.age = age;\n\t\t\t\t}\n\t\t\t\tsayHello(){\n\t\t\t\t\tconsole.log(this.name);\n\t\t\t\t}\n\t\t\t\t//static 是一个静态方法 也就是说foo可以认为是这个构造函数自带的一个方法\n\t\t\t\tstatic foo(){\n\t\t\t\t\tconsole.log(\"aa\");\n\t\t\t\t}\n\t\t\t}\n\t\t\tconsole.log(Person.prototype)\n\t\t\t//用到exends关键字和super方法\n\t\t\tclass Male extends Person{\n\t\t\t\tconstructor(name,age){\n\t\t\t\t\t//相当于拿到了Person的this.name和this.age 同时改变了this指向\n\t\t\t\t\tsuper(name,age)\n\t\t\t\t}\n\t\t\t\tsayHi(){\n\t\t\t\t\tsuper.sayHello();\n\t\t\t\t}\n\t\t\t}\n\t\t\tvar male = new Male(\"ly\",20);\n\t\t\tmale.sayHello();\n\t\t\tmale.sayHi();//结果一样","slug":"js基础/原型和原型链","published":1,"updated":"2021-02-27T13:26:46.857Z","_id":"cklnqw185000ytsdp4q0y478f","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>js中有一个话，叫万物皆对象，因为js是基于原型的</p>\n</blockquote>\n<h2 id=\"原型\"><a href=\"#原型\" class=\"headerlink\" title=\"原型\"></a>原型</h2><p>当我们创建一个对象时 let obj = { age: 25 }，我们可以发现能使用很多种函数，但是我们明明没有定义过它们，对于这种情况你是否有过疑惑？</p>\n<p>当我们在浏览器中打印 obj 时你会发现，在 obj 上居然还有一个 <strong>proto</strong> 属性，那么看来之前的疑问就和这个属性有关系了。</p>\n<p>其实每个 JS 对象都有 <strong>proto</strong> 属性，这个属性指向了原型。这个属性在现在来说已经不推荐直接去使用它了，这只是浏览器在早期为了让我们访问到内部属性 [[prototype]] 来实现的一个东西。</p>\n<p>讲到这里好像还是没有弄明白什么是原型，接下来让我们再看看 <strong>proto</strong> 里面有什么吧。</p>\n<p>看到这里你应该明白了，原型也是一个对象，并且这个对象中包含了很多函数，所以我们可以得出一个结论：对于 obj 来说，可以通过 <strong>proto</strong> 找到一个原型对象，在该对象中定义了很多函数让我们来使用。</p>\n<p>在上面的图中我们还可以发现一个 constructor 属性，也就是构造函数</p>\n<p>打开 constructor 属性我们又可以发现其中还有一个 prototype 属性，并且这个属性对应的值和先前我们在 <strong>proto</strong> 中看到的一模一样。所以我们又可以得出一个结论：原型的 constructor 属性指向构造函数，构造函数又通过 prototype 属性指回原型，但是并不是所有函数都具有这个属性，Function.prototype.bind() 就没有这个属性。</p>\n<p>其实原型就是那么简单，接下来我们再来看一张图，相信这张图能让你彻底明白原型和原型链</p>\n<p>看完这张图，我再来解释下什么是原型链吧。其实原型链就是多个对象通过 <strong>proto</strong> 的方式连接了起来。为什么 obj 可以访问到 valueOf 函数，就是因为 obj 通过原型链找到了 valueOf 函数。</p>\n<h2 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h2><p>类与类之间的关系  基类 父类 子类</p>\n<pre><code>//call&amp;apply方法实现继承\n        function Person(name,age)&#123;\n            this.name = name;\n            this.age = age;\n            this.sayHello = function ()&#123;\n                console.log(this.name);\n            &#125;\n        &#125;\n        function Male(name,age)&#123;\n            //继承父类Person  call&amp;apply 调用的是父类的构造函数\n//                Person.call(this,name,age);\n            Person.apply(this,[name,age]);\n        &#125;\n        var male = new Male(&quot;ly&quot;,20);\n        male.sayHello();\n        \n        \n        //原型继承\n        \n        //\n        \n        //每一个构造函数都有一个原型对象(也就是Person.prototype)，每一个原型对象都有一个指针constructor指向构造函数，每一个实例都有一个内部指针（__proto__），指向原型对象，原型对象上的属性和方法能被实例所访问\n        //这里不能用call&amp;apply的原因是父类的构造函数里边什么也没有 现在要调用的是父类的原型对象\n        /*function Person()&#123;\n            \n        &#125;\n        //Person.prototype里的属性和方法可以被Person的实例访问到\n        Person.prototype.name = &quot;jhon&quot;;\n        Person.prototype.age = 20;\n        Person.prototype.sayHello = function ()&#123;\n            console.log(this.name);\n        &#125;\n        function Male()&#123;\n            this.sayHi=function ()&#123;\n                console.log(&quot;aa&quot;)\n            &#125;\n        &#125;\n        //Male.prototype.__proto__ 指向Person.prototype\n        Male.prototype = new Person();\n        //Male.prototype = Person.prototype;\n        var male = new Male();\n        male.sayHello();\n        console.log(male.__proto__);//正常情况下应该指向Male.prototype 但是现在指向Person.prototype\n        //male.__proto__ -&gt; Male.prototype   Male.prototype.__proto__ -&gt; Person.prototype\n        //当male调用sayhello方法时会找到Male.prototype，如果Male.prototype没有的话就会继续向它的父类找，直到找到Object.prototype停止，Object.prototype.__proto__为null\n        \n        //原型链  原型链上的属性和方法都能被实例所访问到 \n        \n        console.log(male.__proto__ == Male.prototype);//true\n        console.log(Male.prototype.__proto__ == Person.prototype);//true\n        male.sayHi();\n        var obj = &#123;&#125;;\n        //将其他类型转换成字符串时，默认会调用toString方法，这个方法是顶层原型对象上的方法，可以改写,改写之后，转换的结果以改写结果为准\n        obj.toString = function()&#123;\n            return 111111;\n        &#125;\n        document.write(obj);//111111*/\n        \n        //组合继承\n        /*function Person(name,age)&#123;\n            this.name = name;\n            this.age = age;\n        &#125;\n        Person.prototype.sayHello = function ()&#123;\n            console.log(this.name);\n        &#125;\n        function Male(name,age)&#123;\n            Person.call(this,name,age);\n        &#125;\n        //Male.prototype = new Person();\n        //弊端在于Person.call的时候运行了一次构造函数Person，当Male.prototype = new Person()的时候又运行了一次\n        \n//            Male.prototype = Person.prototype;\n//            //这时候Person.call指向的是Person里的name和age，而Male.prototype = Person.prototype指的是sayhello  弊端是这时候相当于传址，父类person的实例也能够访问到子类Male里的原型对象的方法，而这是不合道理的\n//            Male.prototype.sayHi = function()&#123;\n//                console.log(&quot;aa&quot;);\n//            &#125;\n//            var person = new Person();\n//            person.sayHi();\n      \n        //遍历person.prototype    call继承实例属性 这种方式继承原型方法\n        for(var i in Person.prototype)&#123;\n            Male.prototype[i] = Person.prototype[i];\n        &#125;\n        var male = new Male(&quot;ly&quot;,20);\n        male.sayHello();*/\n        \n        //寄生式组合继承  Object.create()\n        /*var obj1 = &#123;a:1&#125;;\n        var obj2 = &#123;b:2&#125;;\n        var a = Object.create(obj1);\n        console.log(a.__proto__);//结果是a:1  这时候的obj1是作为创建出来的实例a的原型对象存在 a.__proto__指obj1\n        function Person(name,age)&#123;\n            this.name = name;\n            this.age = age;\n        &#125;\n        Person.prototype.sayHello = function ()&#123;\n            console.log(this.name);\n        &#125;\n        function Male(name,age)&#123;\n            Person.call(this,name,age);\n        &#125;\n        Male.prototype = Object.create(Person.prototype);\n        Male.prototype.constructor = Male;\n        var male = new Male(&quot;ly&quot;,20);\n        male.sayHello();\n        console.log(male.__proto__.constructor);//本来应该指向Male 但是现在指向了Person 需要加上Male.prototype.constructor = Male 让它的原型对象指向自己*/\n        \n        \n        //ES6继承\n        class Person&#123;\n            constructor(name,age)&#123;\n                this.name = name;\n                this.age = age;\n            &#125;\n            sayHello()&#123;\n                console.log(this.name);\n            &#125;\n            //static 是一个静态方法 也就是说foo可以认为是这个构造函数自带的一个方法\n            static foo()&#123;\n                console.log(&quot;aa&quot;);\n            &#125;\n        &#125;\n        console.log(Person.prototype)\n        //用到exends关键字和super方法\n        class Male extends Person&#123;\n            constructor(name,age)&#123;\n                //相当于拿到了Person的this.name和this.age 同时改变了this指向\n                super(name,age)\n            &#125;\n            sayHi()&#123;\n                super.sayHello();\n            &#125;\n        &#125;\n        var male = new Male(&quot;ly&quot;,20);\n        male.sayHello();\n        male.sayHi();//结果一样\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>js中有一个话，叫万物皆对象，因为js是基于原型的</p>\n</blockquote>\n<h2 id=\"原型\"><a href=\"#原型\" class=\"headerlink\" title=\"原型\"></a>原型</h2><p>当我们创建一个对象时 let obj = { age: 25 }，我们可以发现能使用很多种函数，但是我们明明没有定义过它们，对于这种情况你是否有过疑惑？</p>\n<p>当我们在浏览器中打印 obj 时你会发现，在 obj 上居然还有一个 <strong>proto</strong> 属性，那么看来之前的疑问就和这个属性有关系了。</p>\n<p>其实每个 JS 对象都有 <strong>proto</strong> 属性，这个属性指向了原型。这个属性在现在来说已经不推荐直接去使用它了，这只是浏览器在早期为了让我们访问到内部属性 [[prototype]] 来实现的一个东西。</p>\n<p>讲到这里好像还是没有弄明白什么是原型，接下来让我们再看看 <strong>proto</strong> 里面有什么吧。</p>\n<p>看到这里你应该明白了，原型也是一个对象，并且这个对象中包含了很多函数，所以我们可以得出一个结论：对于 obj 来说，可以通过 <strong>proto</strong> 找到一个原型对象，在该对象中定义了很多函数让我们来使用。</p>\n<p>在上面的图中我们还可以发现一个 constructor 属性，也就是构造函数</p>\n<p>打开 constructor 属性我们又可以发现其中还有一个 prototype 属性，并且这个属性对应的值和先前我们在 <strong>proto</strong> 中看到的一模一样。所以我们又可以得出一个结论：原型的 constructor 属性指向构造函数，构造函数又通过 prototype 属性指回原型，但是并不是所有函数都具有这个属性，Function.prototype.bind() 就没有这个属性。</p>\n<p>其实原型就是那么简单，接下来我们再来看一张图，相信这张图能让你彻底明白原型和原型链</p>\n<p>看完这张图，我再来解释下什么是原型链吧。其实原型链就是多个对象通过 <strong>proto</strong> 的方式连接了起来。为什么 obj 可以访问到 valueOf 函数，就是因为 obj 通过原型链找到了 valueOf 函数。</p>\n<h2 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h2><p>类与类之间的关系  基类 父类 子类</p>\n<pre><code>//call&amp;apply方法实现继承\n        function Person(name,age)&#123;\n            this.name = name;\n            this.age = age;\n            this.sayHello = function ()&#123;\n                console.log(this.name);\n            &#125;\n        &#125;\n        function Male(name,age)&#123;\n            //继承父类Person  call&amp;apply 调用的是父类的构造函数\n//                Person.call(this,name,age);\n            Person.apply(this,[name,age]);\n        &#125;\n        var male = new Male(&quot;ly&quot;,20);\n        male.sayHello();\n        \n        \n        //原型继承\n        \n        //\n        \n        //每一个构造函数都有一个原型对象(也就是Person.prototype)，每一个原型对象都有一个指针constructor指向构造函数，每一个实例都有一个内部指针（__proto__），指向原型对象，原型对象上的属性和方法能被实例所访问\n        //这里不能用call&amp;apply的原因是父类的构造函数里边什么也没有 现在要调用的是父类的原型对象\n        /*function Person()&#123;\n            \n        &#125;\n        //Person.prototype里的属性和方法可以被Person的实例访问到\n        Person.prototype.name = &quot;jhon&quot;;\n        Person.prototype.age = 20;\n        Person.prototype.sayHello = function ()&#123;\n            console.log(this.name);\n        &#125;\n        function Male()&#123;\n            this.sayHi=function ()&#123;\n                console.log(&quot;aa&quot;)\n            &#125;\n        &#125;\n        //Male.prototype.__proto__ 指向Person.prototype\n        Male.prototype = new Person();\n        //Male.prototype = Person.prototype;\n        var male = new Male();\n        male.sayHello();\n        console.log(male.__proto__);//正常情况下应该指向Male.prototype 但是现在指向Person.prototype\n        //male.__proto__ -&gt; Male.prototype   Male.prototype.__proto__ -&gt; Person.prototype\n        //当male调用sayhello方法时会找到Male.prototype，如果Male.prototype没有的话就会继续向它的父类找，直到找到Object.prototype停止，Object.prototype.__proto__为null\n        \n        //原型链  原型链上的属性和方法都能被实例所访问到 \n        \n        console.log(male.__proto__ == Male.prototype);//true\n        console.log(Male.prototype.__proto__ == Person.prototype);//true\n        male.sayHi();\n        var obj = &#123;&#125;;\n        //将其他类型转换成字符串时，默认会调用toString方法，这个方法是顶层原型对象上的方法，可以改写,改写之后，转换的结果以改写结果为准\n        obj.toString = function()&#123;\n            return 111111;\n        &#125;\n        document.write(obj);//111111*/\n        \n        //组合继承\n        /*function Person(name,age)&#123;\n            this.name = name;\n            this.age = age;\n        &#125;\n        Person.prototype.sayHello = function ()&#123;\n            console.log(this.name);\n        &#125;\n        function Male(name,age)&#123;\n            Person.call(this,name,age);\n        &#125;\n        //Male.prototype = new Person();\n        //弊端在于Person.call的时候运行了一次构造函数Person，当Male.prototype = new Person()的时候又运行了一次\n        \n//            Male.prototype = Person.prototype;\n//            //这时候Person.call指向的是Person里的name和age，而Male.prototype = Person.prototype指的是sayhello  弊端是这时候相当于传址，父类person的实例也能够访问到子类Male里的原型对象的方法，而这是不合道理的\n//            Male.prototype.sayHi = function()&#123;\n//                console.log(&quot;aa&quot;);\n//            &#125;\n//            var person = new Person();\n//            person.sayHi();\n      \n        //遍历person.prototype    call继承实例属性 这种方式继承原型方法\n        for(var i in Person.prototype)&#123;\n            Male.prototype[i] = Person.prototype[i];\n        &#125;\n        var male = new Male(&quot;ly&quot;,20);\n        male.sayHello();*/\n        \n        //寄生式组合继承  Object.create()\n        /*var obj1 = &#123;a:1&#125;;\n        var obj2 = &#123;b:2&#125;;\n        var a = Object.create(obj1);\n        console.log(a.__proto__);//结果是a:1  这时候的obj1是作为创建出来的实例a的原型对象存在 a.__proto__指obj1\n        function Person(name,age)&#123;\n            this.name = name;\n            this.age = age;\n        &#125;\n        Person.prototype.sayHello = function ()&#123;\n            console.log(this.name);\n        &#125;\n        function Male(name,age)&#123;\n            Person.call(this,name,age);\n        &#125;\n        Male.prototype = Object.create(Person.prototype);\n        Male.prototype.constructor = Male;\n        var male = new Male(&quot;ly&quot;,20);\n        male.sayHello();\n        console.log(male.__proto__.constructor);//本来应该指向Male 但是现在指向了Person 需要加上Male.prototype.constructor = Male 让它的原型对象指向自己*/\n        \n        \n        //ES6继承\n        class Person&#123;\n            constructor(name,age)&#123;\n                this.name = name;\n                this.age = age;\n            &#125;\n            sayHello()&#123;\n                console.log(this.name);\n            &#125;\n            //static 是一个静态方法 也就是说foo可以认为是这个构造函数自带的一个方法\n            static foo()&#123;\n                console.log(&quot;aa&quot;);\n            &#125;\n        &#125;\n        console.log(Person.prototype)\n        //用到exends关键字和super方法\n        class Male extends Person&#123;\n            constructor(name,age)&#123;\n                //相当于拿到了Person的this.name和this.age 同时改变了this指向\n                super(name,age)\n            &#125;\n            sayHi()&#123;\n                super.sayHello();\n            &#125;\n        &#125;\n        var male = new Male(&quot;ly&quot;,20);\n        male.sayHello();\n        male.sayHi();//结果一样\n</code></pre>\n"},{"title":"浅拷贝和深拷贝","date":"2021-02-27T13:29:00.000Z","_content":"\n## 浅拷贝和深拷贝\n\n\n\n### 浅拷贝\n\n\n\n首先可以通过对象的Object.assign来进行浅拷贝，很多人认为\n这个函数是用来深拷贝的。其实并不是，Object.assign \n只会拷贝所有的属性值到新的对象中，如果属性值是对象的话\n，拷贝的是地址，所以并不是深拷贝。\n\n```\n    let a = {\n      age: 1\n    }\n    let b = Object.assign({}, a)\n    a.age = 2\n    console.log(b.age) // 1    \n```\n另外我们还可以通过展开运算符 ... 来实现浅拷贝\n    \n```\nlet a = {\n  age: 1\n}\nlet b = { ...a }\na.age = 2\nconsole.log(b.age) // 1\n```\n通常浅拷贝就能解决大部分问题了，但是当我们遇到如下情况就可能需要使用到深拷贝了\n```\nlet a = {\n  age: 1,\n  jobs: {\n    first: 'FE'\n  }\n}\nlet b = { ...a }\na.jobs.first = 'native'\nconsole.log(b.jobs.first) // native\n```\n浅拷贝只解决了第一层的问题，如果接下去的值中还有对象的话，那么就又回到最开始的话题了，两者享有相同的地址。要解决这个问题，我们就得使用深拷贝了。\n\n---\n\n### 深拷贝\n\n\n\n这个问题通常可以通过 JSON.parse(JSON.stringify(object)) 来解决。\n```\nlet a = {\n  age: 1,\n  jobs: {\n    first: 'FE'\n  }\n}\nlet b = JSON.parse(JSON.stringify(a))\na.jobs.first = 'native'\nconsole.log(b.jobs.first) // FE\n```\n但是该方法也是有局限性的：\n\n+ 会忽略 undefined\n+ 会忽略 symbol\n+ 不能序列化函数\n+ 不能解决循环引用的对象\n>> [lodash 的深拷贝函数](https://lodash.com/docs/4.17.11#cloneDeep)\n```\nfunction deepClone(obj) {\n  function isObject(o) {\n    return (typeof o === 'object' || typeof o === 'function') && o !== null\n  }\n\n  if (!isObject(obj)) {\n    throw new Error('非对象')\n  }\n\n  let isArray = Array.isArray(obj)\n  let newObj = isArray ? [...obj] : { ...obj }\n  Reflect.ownKeys(newObj).forEach(key => {\n    newObj[key] = isObject(obj[key]) ? deepClone(obj[key]) : obj[key]\n  })\n\n  return newObj\n}\n```\n注：\n  Reflect.ownKeys(target)\n  返回一个包含所有自身属性（不包含继承属性）的数组。(类似于 Object.keys(), 但不会受enumerable影响).","source":"_posts/js基础/浅拷贝和深拷贝.md","raw":"---\ntitle: 浅拷贝和深拷贝\ndate: 2021-02-27 21:29:00\ncategories: \"js\"\ntags: [\"浅拷贝\",\"深拷贝\",\"js\"]\n---\n\n## 浅拷贝和深拷贝\n\n\n\n### 浅拷贝\n\n\n\n首先可以通过对象的Object.assign来进行浅拷贝，很多人认为\n这个函数是用来深拷贝的。其实并不是，Object.assign \n只会拷贝所有的属性值到新的对象中，如果属性值是对象的话\n，拷贝的是地址，所以并不是深拷贝。\n\n```\n    let a = {\n      age: 1\n    }\n    let b = Object.assign({}, a)\n    a.age = 2\n    console.log(b.age) // 1    \n```\n另外我们还可以通过展开运算符 ... 来实现浅拷贝\n    \n```\nlet a = {\n  age: 1\n}\nlet b = { ...a }\na.age = 2\nconsole.log(b.age) // 1\n```\n通常浅拷贝就能解决大部分问题了，但是当我们遇到如下情况就可能需要使用到深拷贝了\n```\nlet a = {\n  age: 1,\n  jobs: {\n    first: 'FE'\n  }\n}\nlet b = { ...a }\na.jobs.first = 'native'\nconsole.log(b.jobs.first) // native\n```\n浅拷贝只解决了第一层的问题，如果接下去的值中还有对象的话，那么就又回到最开始的话题了，两者享有相同的地址。要解决这个问题，我们就得使用深拷贝了。\n\n---\n\n### 深拷贝\n\n\n\n这个问题通常可以通过 JSON.parse(JSON.stringify(object)) 来解决。\n```\nlet a = {\n  age: 1,\n  jobs: {\n    first: 'FE'\n  }\n}\nlet b = JSON.parse(JSON.stringify(a))\na.jobs.first = 'native'\nconsole.log(b.jobs.first) // FE\n```\n但是该方法也是有局限性的：\n\n+ 会忽略 undefined\n+ 会忽略 symbol\n+ 不能序列化函数\n+ 不能解决循环引用的对象\n>> [lodash 的深拷贝函数](https://lodash.com/docs/4.17.11#cloneDeep)\n```\nfunction deepClone(obj) {\n  function isObject(o) {\n    return (typeof o === 'object' || typeof o === 'function') && o !== null\n  }\n\n  if (!isObject(obj)) {\n    throw new Error('非对象')\n  }\n\n  let isArray = Array.isArray(obj)\n  let newObj = isArray ? [...obj] : { ...obj }\n  Reflect.ownKeys(newObj).forEach(key => {\n    newObj[key] = isObject(obj[key]) ? deepClone(obj[key]) : obj[key]\n  })\n\n  return newObj\n}\n```\n注：\n  Reflect.ownKeys(target)\n  返回一个包含所有自身属性（不包含继承属性）的数组。(类似于 Object.keys(), 但不会受enumerable影响).","slug":"js基础/浅拷贝和深拷贝","published":1,"updated":"2021-02-27T13:54:48.925Z","_id":"cklnrgtbr0019tsdp5d883900","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"浅拷贝和深拷贝\"><a href=\"#浅拷贝和深拷贝\" class=\"headerlink\" title=\"浅拷贝和深拷贝\"></a>浅拷贝和深拷贝</h2><h3 id=\"浅拷贝\"><a href=\"#浅拷贝\" class=\"headerlink\" title=\"浅拷贝\"></a>浅拷贝</h3><p>首先可以通过对象的Object.assign来进行浅拷贝，很多人认为<br>这个函数是用来深拷贝的。其实并不是，Object.assign<br>只会拷贝所有的属性值到新的对象中，如果属性值是对象的话<br>，拷贝的是地址，所以并不是深拷贝。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let a &#x3D; &#123;</span><br><span class=\"line\">  age: 1</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let b &#x3D; Object.assign(&#123;&#125;, a)</span><br><span class=\"line\">a.age &#x3D; 2</span><br><span class=\"line\">console.log(b.age) &#x2F;&#x2F; 1    </span><br></pre></td></tr></table></figure>\n<p>另外我们还可以通过展开运算符 … 来实现浅拷贝</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let a &#x3D; &#123;</span><br><span class=\"line\">  age: 1</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let b &#x3D; &#123; ...a &#125;</span><br><span class=\"line\">a.age &#x3D; 2</span><br><span class=\"line\">console.log(b.age) &#x2F;&#x2F; 1</span><br></pre></td></tr></table></figure>\n<p>通常浅拷贝就能解决大部分问题了，但是当我们遇到如下情况就可能需要使用到深拷贝了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let a &#x3D; &#123;</span><br><span class=\"line\">  age: 1,</span><br><span class=\"line\">  jobs: &#123;</span><br><span class=\"line\">    first: &#39;FE&#39;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let b &#x3D; &#123; ...a &#125;</span><br><span class=\"line\">a.jobs.first &#x3D; &#39;native&#39;</span><br><span class=\"line\">console.log(b.jobs.first) &#x2F;&#x2F; native</span><br></pre></td></tr></table></figure>\n<p>浅拷贝只解决了第一层的问题，如果接下去的值中还有对象的话，那么就又回到最开始的话题了，两者享有相同的地址。要解决这个问题，我们就得使用深拷贝了。</p>\n<hr>\n<h3 id=\"深拷贝\"><a href=\"#深拷贝\" class=\"headerlink\" title=\"深拷贝\"></a>深拷贝</h3><p>这个问题通常可以通过 JSON.parse(JSON.stringify(object)) 来解决。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let a &#x3D; &#123;</span><br><span class=\"line\">  age: 1,</span><br><span class=\"line\">  jobs: &#123;</span><br><span class=\"line\">    first: &#39;FE&#39;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let b &#x3D; JSON.parse(JSON.stringify(a))</span><br><span class=\"line\">a.jobs.first &#x3D; &#39;native&#39;</span><br><span class=\"line\">console.log(b.jobs.first) &#x2F;&#x2F; FE</span><br></pre></td></tr></table></figure>\n<p>但是该方法也是有局限性的：</p>\n<ul>\n<li>会忽略 undefined</li>\n<li>会忽略 symbol</li>\n<li>不能序列化函数</li>\n<li>不能解决循环引用的对象<blockquote>\n<blockquote>\n<p><a href=\"https://lodash.com/docs/4.17.11#cloneDeep\">lodash 的深拷贝函数</a></p>\n</blockquote>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function deepClone(obj) &#123;</span><br><span class=\"line\">  function isObject(o) &#123;</span><br><span class=\"line\">    return (typeof o &#x3D;&#x3D;&#x3D; &#39;object&#39; || typeof o &#x3D;&#x3D;&#x3D; &#39;function&#39;) &amp;&amp; o !&#x3D;&#x3D; null</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  if (!isObject(obj)) &#123;</span><br><span class=\"line\">    throw new Error(&#39;非对象&#39;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  let isArray &#x3D; Array.isArray(obj)</span><br><span class=\"line\">  let newObj &#x3D; isArray ? [...obj] : &#123; ...obj &#125;</span><br><span class=\"line\">  Reflect.ownKeys(newObj).forEach(key &#x3D;&gt; &#123;</span><br><span class=\"line\">    newObj[key] &#x3D; isObject(obj[key]) ? deepClone(obj[key]) : obj[key]</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  return newObj</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n注：<br>Reflect.ownKeys(target)<br>返回一个包含所有自身属性（不包含继承属性）的数组。(类似于 Object.keys(), 但不会受enumerable影响).</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"浅拷贝和深拷贝\"><a href=\"#浅拷贝和深拷贝\" class=\"headerlink\" title=\"浅拷贝和深拷贝\"></a>浅拷贝和深拷贝</h2><h3 id=\"浅拷贝\"><a href=\"#浅拷贝\" class=\"headerlink\" title=\"浅拷贝\"></a>浅拷贝</h3><p>首先可以通过对象的Object.assign来进行浅拷贝，很多人认为<br>这个函数是用来深拷贝的。其实并不是，Object.assign<br>只会拷贝所有的属性值到新的对象中，如果属性值是对象的话<br>，拷贝的是地址，所以并不是深拷贝。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let a &#x3D; &#123;</span><br><span class=\"line\">  age: 1</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let b &#x3D; Object.assign(&#123;&#125;, a)</span><br><span class=\"line\">a.age &#x3D; 2</span><br><span class=\"line\">console.log(b.age) &#x2F;&#x2F; 1    </span><br></pre></td></tr></table></figure>\n<p>另外我们还可以通过展开运算符 … 来实现浅拷贝</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let a &#x3D; &#123;</span><br><span class=\"line\">  age: 1</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let b &#x3D; &#123; ...a &#125;</span><br><span class=\"line\">a.age &#x3D; 2</span><br><span class=\"line\">console.log(b.age) &#x2F;&#x2F; 1</span><br></pre></td></tr></table></figure>\n<p>通常浅拷贝就能解决大部分问题了，但是当我们遇到如下情况就可能需要使用到深拷贝了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let a &#x3D; &#123;</span><br><span class=\"line\">  age: 1,</span><br><span class=\"line\">  jobs: &#123;</span><br><span class=\"line\">    first: &#39;FE&#39;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let b &#x3D; &#123; ...a &#125;</span><br><span class=\"line\">a.jobs.first &#x3D; &#39;native&#39;</span><br><span class=\"line\">console.log(b.jobs.first) &#x2F;&#x2F; native</span><br></pre></td></tr></table></figure>\n<p>浅拷贝只解决了第一层的问题，如果接下去的值中还有对象的话，那么就又回到最开始的话题了，两者享有相同的地址。要解决这个问题，我们就得使用深拷贝了。</p>\n<hr>\n<h3 id=\"深拷贝\"><a href=\"#深拷贝\" class=\"headerlink\" title=\"深拷贝\"></a>深拷贝</h3><p>这个问题通常可以通过 JSON.parse(JSON.stringify(object)) 来解决。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let a &#x3D; &#123;</span><br><span class=\"line\">  age: 1,</span><br><span class=\"line\">  jobs: &#123;</span><br><span class=\"line\">    first: &#39;FE&#39;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let b &#x3D; JSON.parse(JSON.stringify(a))</span><br><span class=\"line\">a.jobs.first &#x3D; &#39;native&#39;</span><br><span class=\"line\">console.log(b.jobs.first) &#x2F;&#x2F; FE</span><br></pre></td></tr></table></figure>\n<p>但是该方法也是有局限性的：</p>\n<ul>\n<li>会忽略 undefined</li>\n<li>会忽略 symbol</li>\n<li>不能序列化函数</li>\n<li>不能解决循环引用的对象<blockquote>\n<blockquote>\n<p><a href=\"https://lodash.com/docs/4.17.11#cloneDeep\">lodash 的深拷贝函数</a></p>\n</blockquote>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function deepClone(obj) &#123;</span><br><span class=\"line\">  function isObject(o) &#123;</span><br><span class=\"line\">    return (typeof o &#x3D;&#x3D;&#x3D; &#39;object&#39; || typeof o &#x3D;&#x3D;&#x3D; &#39;function&#39;) &amp;&amp; o !&#x3D;&#x3D; null</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  if (!isObject(obj)) &#123;</span><br><span class=\"line\">    throw new Error(&#39;非对象&#39;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  let isArray &#x3D; Array.isArray(obj)</span><br><span class=\"line\">  let newObj &#x3D; isArray ? [...obj] : &#123; ...obj &#125;</span><br><span class=\"line\">  Reflect.ownKeys(newObj).forEach(key &#x3D;&gt; &#123;</span><br><span class=\"line\">    newObj[key] &#x3D; isObject(obj[key]) ? deepClone(obj[key]) : obj[key]</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  return newObj</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n注：<br>Reflect.ownKeys(target)<br>返回一个包含所有自身属性（不包含继承属性）的数组。(类似于 Object.keys(), 但不会受enumerable影响).</li>\n</ul>\n"},{"title":"js基础类型","date":"2021-02-25T13:22:00.000Z","_content":"## ES5\nEs5规定的基础类型为6种：number,string,undefined,null,boolean,object\n其中 number,string,undefined,boolean,null 被称为原始类型，object 被称为对象类型\n### 原始类型和对象类型的区别\n\n    原始类型存储的是值，而对象类型存储的是地址。在JS中创建一个对象类型A时，\n    会在浏览器内存中开辟一片空间来存放它的值，这个空间会拥有一个指针，\n    对象A的值是空间的指针也就是地址。当把A的值赋值给另一个对象B时，\n    并不是把A里的值赋值给B，而是把A的指针传给B，所以A和B的指针指向同一个地方，\n    当A或B中某一个的值发生改变时。另一个也会发生改变。\n\n#### 原始类型\n\n##### undefined\n\n在使用var声明变量，但未对其加以初始化时，这个变量的类型就是undefined，且其默认初始化值为undefined。\n对未声明与初始化的变量，直接使用，那么这个变量的类型也是undefined，但是没有默认初始化值。\n//undefined\nvar message;\nalert('已经声明但未初始化的变量message的类型是：' +typeof message)\nalert('未声明，也未初始化的变量age的类型是：'+ typeof age)\nmessage\n\nage\n\n【总结】因为js的变量都是用关键字var来声明的，变量的具体类型取决于他被赋予的变量值，而对于以上两种情况，虽然本质上有区别，但是都没有被初始化，所以其类型都是undefined。但是后者没有初始化值。所以当\nalert(age);//产生错误\n##### null\n\nnull类型的默认值是null，从逻辑角度讲，是表示一个空对象指针。\njs高级程序上有讲到，undefined类型是派生自null的，不严格的说二者都是指没有明确赋值的类型，但是细分之后，undefined类型，被用来形容未经初始化的变量，null类型被用来形容空对象指针。\n所以，如果定义的变量准备在将来用于保存对象（即复杂的数据类型object），那么就该将该变量初始化为null。\n区分，当一个变量声明后，未初始化，则该值为undefined，如果这个值是为了保存对象，则修改其默认初始化的值，改为null。 所以当检测其类型时，会显示类型为object。\n*所以有时候，当问到js基本数据类型时，会忽略null。\n//null\nvar car=null;\nalert('car的类型为：'typeof car)\n\n\ncar=null\n##### boolean\n\n即布尔类型，该类型有两个值：true false\nBloolean()函数，可以将其他类型的值转换为布尔类型。\n转换规则\n![布尔类型转换规则](boolean-rule.webp)\n\n规则\n这些转换规则对理解流程控制语句，如（if）语句自动执行相应的转换非常重要。\n##### number\n\n该类型的表示方法有两种形式，第一种是整数，第二种为浮点数。\n整数 可以通过十进制，八进制，十六进制的字面值来表示。\nvar intNum=55;//十进制\nvar octalNum=070;//八进制数，第一位必须是0，解析为56\nvar octalNum=079;//无效的8进制数，9超过了8进制数的范围，解析为79\nvar hexNum=0xA;//十六进制数，前两位必须是0x，后跟16进制数字（09及AF）\n浮点数\n1、该数值中必须包含一个小数点，且小数点后必须有一位数字，如果小数点后只有零，则该小数会被转化为整数。\n2、浮点数所占据的内存空间是整数的两倍。\n3、对极大极小的浮点数采用e表示法。\nvar floatNum=3.2e7；//3.2×10（7次幂）\nvar floatNum=3.2e-7；//3.2×10（-7次幂）\nNaN\n1、即非数值，是一个特殊的值，这个数值用于表示一个本来要返回数值的操作数，未返回数值的情况。比如任何数值除以0，本是不符合规范的，js里，这样的操作返回NaN（但是实际上，只有0除以0时返回NaN，其他则无穷值）。\n2、NaN有两个不同寻常的特点：任何涉及NaN的操作都会返回NaN，NaN值与任何值都不相等，包括本身。\n3、isNaN()函数，这个函数可以判断，传递的参数是否“不是数值”这里涉及数值转换的问题，例如“10”这个字符串就可以转换为10，但是“blue”这个字符串则无法转换为数字，所以isNaN(\"blue\")==true\n数值转换\n1、有三个函数可以把非数值转换为数值：Number()，parseInt()，parseFloat()。第一个可以用于任何数据类型，后两个，则专门用于把字符串转化为数值。\n2、这三个函数对于同样的输入有不同的效果。\n3、数值转换（另写一篇文章）\n##### string\n\n字符串类型是最熟悉不过的啦，至于用单引号，还是双引号，在js中还是没有差别的。记得成对出现。\nvar firstName='zakas';\n字符串中一些特殊的字面量，即转义序列。类似于c语言学过的那些、\ntoString()函数，每个值都有，但是null与undefined没有。一般情况下使用这个函数时，没有必要传递参数，但是调用数值的 toString()方法时，可以传递基数，默认传递的是10，代表十进制。\nString()函数可以将任何类型的值转换为字符串，包括null转换为'null'、undefined转换为'undefined'。\n复杂的数据类型\n\n##### object\n\n该类型实例化的对象，是一组数据和功能（函数）的集合。\n实例化对象的过程有两种，一种是通过new操作符，一种是通过对象字面量表示法。\nobject类型是最基本的类型，我们可以在其基础上继承出更多的类型，像我们知道的Array()、Date()、还有有意思的function()类型，都是从object继承的，而且这些类型都在程序员使用前被默认设置了属性和方法，供程序员调用。\n而以上类型又有一个笼统的称呼为引用类型。为什么是引用类型呢？\nvar obj=new Object();\n在学习C的时候，知道“ int a; int &ra=a;”，所以ra是a的引用，ra的类型为引用类型，系统并不为引用类型分配内存空间。\n但是，js所指的引用类型，在《js高级程序设计》这本书里，也确实是这样的概念，obj只是引用类型，是堆内存中一个对象的别称，本身并不占用内存。\n\n\n如图1\n\n但是这本书里，也说对引用类型的访问是按照引用访问，但是当\nvar obj2=obj;\n这样将obj的值复给obj2时，会将堆内存中object的地址赋给obj2，这句话，又貌似是在说，在声明一个引用类型时，是会将实例化对象地址存到栈内存中，然后通过地址访问堆内存。\n\n\n如图2\n\n还有一个难点，也是我在学习引用类型的时候困惑的地方，C的时候，引用是可以做参数传递的，而且，引用不能被赋值，即不能改变引用的值。但是js中，函数的参数都是值传递的，而对于js内的引用类型，其值，也就默认为栈内存中的地址。\n现在，对于创建对象的内存图，我查了广大网友的资料，大家默认图2,希望有对js引用类型理解更清晰的朋友，可以告诉我一下。谢谢啦！\n","source":"_posts/js基础类型.md","raw":"---\ntitle: js基础类型\ndate: 2021-02-25 21:22:00\ncategories: \"js\"\ntags: [\"js基础\"]\n---\n## ES5\nEs5规定的基础类型为6种：number,string,undefined,null,boolean,object\n其中 number,string,undefined,boolean,null 被称为原始类型，object 被称为对象类型\n### 原始类型和对象类型的区别\n\n    原始类型存储的是值，而对象类型存储的是地址。在JS中创建一个对象类型A时，\n    会在浏览器内存中开辟一片空间来存放它的值，这个空间会拥有一个指针，\n    对象A的值是空间的指针也就是地址。当把A的值赋值给另一个对象B时，\n    并不是把A里的值赋值给B，而是把A的指针传给B，所以A和B的指针指向同一个地方，\n    当A或B中某一个的值发生改变时。另一个也会发生改变。\n\n#### 原始类型\n\n##### undefined\n\n在使用var声明变量，但未对其加以初始化时，这个变量的类型就是undefined，且其默认初始化值为undefined。\n对未声明与初始化的变量，直接使用，那么这个变量的类型也是undefined，但是没有默认初始化值。\n//undefined\nvar message;\nalert('已经声明但未初始化的变量message的类型是：' +typeof message)\nalert('未声明，也未初始化的变量age的类型是：'+ typeof age)\nmessage\n\nage\n\n【总结】因为js的变量都是用关键字var来声明的，变量的具体类型取决于他被赋予的变量值，而对于以上两种情况，虽然本质上有区别，但是都没有被初始化，所以其类型都是undefined。但是后者没有初始化值。所以当\nalert(age);//产生错误\n##### null\n\nnull类型的默认值是null，从逻辑角度讲，是表示一个空对象指针。\njs高级程序上有讲到，undefined类型是派生自null的，不严格的说二者都是指没有明确赋值的类型，但是细分之后，undefined类型，被用来形容未经初始化的变量，null类型被用来形容空对象指针。\n所以，如果定义的变量准备在将来用于保存对象（即复杂的数据类型object），那么就该将该变量初始化为null。\n区分，当一个变量声明后，未初始化，则该值为undefined，如果这个值是为了保存对象，则修改其默认初始化的值，改为null。 所以当检测其类型时，会显示类型为object。\n*所以有时候，当问到js基本数据类型时，会忽略null。\n//null\nvar car=null;\nalert('car的类型为：'typeof car)\n\n\ncar=null\n##### boolean\n\n即布尔类型，该类型有两个值：true false\nBloolean()函数，可以将其他类型的值转换为布尔类型。\n转换规则\n![布尔类型转换规则](boolean-rule.webp)\n\n规则\n这些转换规则对理解流程控制语句，如（if）语句自动执行相应的转换非常重要。\n##### number\n\n该类型的表示方法有两种形式，第一种是整数，第二种为浮点数。\n整数 可以通过十进制，八进制，十六进制的字面值来表示。\nvar intNum=55;//十进制\nvar octalNum=070;//八进制数，第一位必须是0，解析为56\nvar octalNum=079;//无效的8进制数，9超过了8进制数的范围，解析为79\nvar hexNum=0xA;//十六进制数，前两位必须是0x，后跟16进制数字（09及AF）\n浮点数\n1、该数值中必须包含一个小数点，且小数点后必须有一位数字，如果小数点后只有零，则该小数会被转化为整数。\n2、浮点数所占据的内存空间是整数的两倍。\n3、对极大极小的浮点数采用e表示法。\nvar floatNum=3.2e7；//3.2×10（7次幂）\nvar floatNum=3.2e-7；//3.2×10（-7次幂）\nNaN\n1、即非数值，是一个特殊的值，这个数值用于表示一个本来要返回数值的操作数，未返回数值的情况。比如任何数值除以0，本是不符合规范的，js里，这样的操作返回NaN（但是实际上，只有0除以0时返回NaN，其他则无穷值）。\n2、NaN有两个不同寻常的特点：任何涉及NaN的操作都会返回NaN，NaN值与任何值都不相等，包括本身。\n3、isNaN()函数，这个函数可以判断，传递的参数是否“不是数值”这里涉及数值转换的问题，例如“10”这个字符串就可以转换为10，但是“blue”这个字符串则无法转换为数字，所以isNaN(\"blue\")==true\n数值转换\n1、有三个函数可以把非数值转换为数值：Number()，parseInt()，parseFloat()。第一个可以用于任何数据类型，后两个，则专门用于把字符串转化为数值。\n2、这三个函数对于同样的输入有不同的效果。\n3、数值转换（另写一篇文章）\n##### string\n\n字符串类型是最熟悉不过的啦，至于用单引号，还是双引号，在js中还是没有差别的。记得成对出现。\nvar firstName='zakas';\n字符串中一些特殊的字面量，即转义序列。类似于c语言学过的那些、\ntoString()函数，每个值都有，但是null与undefined没有。一般情况下使用这个函数时，没有必要传递参数，但是调用数值的 toString()方法时，可以传递基数，默认传递的是10，代表十进制。\nString()函数可以将任何类型的值转换为字符串，包括null转换为'null'、undefined转换为'undefined'。\n复杂的数据类型\n\n##### object\n\n该类型实例化的对象，是一组数据和功能（函数）的集合。\n实例化对象的过程有两种，一种是通过new操作符，一种是通过对象字面量表示法。\nobject类型是最基本的类型，我们可以在其基础上继承出更多的类型，像我们知道的Array()、Date()、还有有意思的function()类型，都是从object继承的，而且这些类型都在程序员使用前被默认设置了属性和方法，供程序员调用。\n而以上类型又有一个笼统的称呼为引用类型。为什么是引用类型呢？\nvar obj=new Object();\n在学习C的时候，知道“ int a; int &ra=a;”，所以ra是a的引用，ra的类型为引用类型，系统并不为引用类型分配内存空间。\n但是，js所指的引用类型，在《js高级程序设计》这本书里，也确实是这样的概念，obj只是引用类型，是堆内存中一个对象的别称，本身并不占用内存。\n\n\n如图1\n\n但是这本书里，也说对引用类型的访问是按照引用访问，但是当\nvar obj2=obj;\n这样将obj的值复给obj2时，会将堆内存中object的地址赋给obj2，这句话，又貌似是在说，在声明一个引用类型时，是会将实例化对象地址存到栈内存中，然后通过地址访问堆内存。\n\n\n如图2\n\n还有一个难点，也是我在学习引用类型的时候困惑的地方，C的时候，引用是可以做参数传递的，而且，引用不能被赋值，即不能改变引用的值。但是js中，函数的参数都是值传递的，而对于js内的引用类型，其值，也就默认为栈内存中的地址。\n现在，对于创建对象的内存图，我查了广大网友的资料，大家默认图2,希望有对js引用类型理解更清晰的朋友，可以告诉我一下。谢谢啦！\n","slug":"js基础类型","published":1,"updated":"2021-02-27T14:12:38.867Z","_id":"cklnsypsn0000jwdpcaahci04","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"ES5\"><a href=\"#ES5\" class=\"headerlink\" title=\"ES5\"></a>ES5</h2><p>Es5规定的基础类型为6种：number,string,undefined,null,boolean,object<br>其中 number,string,undefined,boolean,null 被称为原始类型，object 被称为对象类型</p>\n<h3 id=\"原始类型和对象类型的区别\"><a href=\"#原始类型和对象类型的区别\" class=\"headerlink\" title=\"原始类型和对象类型的区别\"></a>原始类型和对象类型的区别</h3><pre><code>原始类型存储的是值，而对象类型存储的是地址。在JS中创建一个对象类型A时，\n会在浏览器内存中开辟一片空间来存放它的值，这个空间会拥有一个指针，\n对象A的值是空间的指针也就是地址。当把A的值赋值给另一个对象B时，\n并不是把A里的值赋值给B，而是把A的指针传给B，所以A和B的指针指向同一个地方，\n当A或B中某一个的值发生改变时。另一个也会发生改变。\n</code></pre>\n<h4 id=\"原始类型\"><a href=\"#原始类型\" class=\"headerlink\" title=\"原始类型\"></a>原始类型</h4><h5 id=\"undefined\"><a href=\"#undefined\" class=\"headerlink\" title=\"undefined\"></a>undefined</h5><p>在使用var声明变量，但未对其加以初始化时，这个变量的类型就是undefined，且其默认初始化值为undefined。<br>对未声明与初始化的变量，直接使用，那么这个变量的类型也是undefined，但是没有默认初始化值。<br>//undefined<br>var message;<br>alert(‘已经声明但未初始化的变量message的类型是：’ +typeof message)<br>alert(‘未声明，也未初始化的变量age的类型是：’+ typeof age)<br>message</p>\n<p>age</p>\n<p>【总结】因为js的变量都是用关键字var来声明的，变量的具体类型取决于他被赋予的变量值，而对于以上两种情况，虽然本质上有区别，但是都没有被初始化，所以其类型都是undefined。但是后者没有初始化值。所以当<br>alert(age);//产生错误</p>\n<h5 id=\"null\"><a href=\"#null\" class=\"headerlink\" title=\"null\"></a>null</h5><p>null类型的默认值是null，从逻辑角度讲，是表示一个空对象指针。<br>js高级程序上有讲到，undefined类型是派生自null的，不严格的说二者都是指没有明确赋值的类型，但是细分之后，undefined类型，被用来形容未经初始化的变量，null类型被用来形容空对象指针。<br>所以，如果定义的变量准备在将来用于保存对象（即复杂的数据类型object），那么就该将该变量初始化为null。<br>区分，当一个变量声明后，未初始化，则该值为undefined，如果这个值是为了保存对象，则修改其默认初始化的值，改为null。 所以当检测其类型时，会显示类型为object。<br>*所以有时候，当问到js基本数据类型时，会忽略null。<br>//null<br>var car=null;<br>alert(‘car的类型为：’typeof car)</p>\n<p>car=null</p>\n<h5 id=\"boolean\"><a href=\"#boolean\" class=\"headerlink\" title=\"boolean\"></a>boolean</h5><p>即布尔类型，该类型有两个值：true false<br>Bloolean()函数，可以将其他类型的值转换为布尔类型。<br>转换规则<br><img src=\"/2021/02/25/js%E5%9F%BA%E7%A1%80%E7%B1%BB%E5%9E%8B/boolean-rule.webp\" alt=\"布尔类型转换规则\"></p>\n<p>规则<br>这些转换规则对理解流程控制语句，如（if）语句自动执行相应的转换非常重要。</p>\n<h5 id=\"number\"><a href=\"#number\" class=\"headerlink\" title=\"number\"></a>number</h5><p>该类型的表示方法有两种形式，第一种是整数，第二种为浮点数。<br>整数 可以通过十进制，八进制，十六进制的字面值来表示。<br>var intNum=55;//十进制<br>var octalNum=070;//八进制数，第一位必须是0，解析为56<br>var octalNum=079;//无效的8进制数，9超过了8进制数的范围，解析为79<br>var hexNum=0xA;//十六进制数，前两位必须是0x，后跟16进制数字（09及AF）<br>浮点数<br>1、该数值中必须包含一个小数点，且小数点后必须有一位数字，如果小数点后只有零，则该小数会被转化为整数。<br>2、浮点数所占据的内存空间是整数的两倍。<br>3、对极大极小的浮点数采用e表示法。<br>var floatNum=3.2e7；//3.2×10（7次幂）<br>var floatNum=3.2e-7；//3.2×10（-7次幂）<br>NaN<br>1、即非数值，是一个特殊的值，这个数值用于表示一个本来要返回数值的操作数，未返回数值的情况。比如任何数值除以0，本是不符合规范的，js里，这样的操作返回NaN（但是实际上，只有0除以0时返回NaN，其他则无穷值）。<br>2、NaN有两个不同寻常的特点：任何涉及NaN的操作都会返回NaN，NaN值与任何值都不相等，包括本身。<br>3、isNaN()函数，这个函数可以判断，传递的参数是否“不是数值”这里涉及数值转换的问题，例如“10”这个字符串就可以转换为10，但是“blue”这个字符串则无法转换为数字，所以isNaN(“blue”)==true<br>数值转换<br>1、有三个函数可以把非数值转换为数值：Number()，parseInt()，parseFloat()。第一个可以用于任何数据类型，后两个，则专门用于把字符串转化为数值。<br>2、这三个函数对于同样的输入有不同的效果。<br>3、数值转换（另写一篇文章）</p>\n<h5 id=\"string\"><a href=\"#string\" class=\"headerlink\" title=\"string\"></a>string</h5><p>字符串类型是最熟悉不过的啦，至于用单引号，还是双引号，在js中还是没有差别的。记得成对出现。<br>var firstName=’zakas’;<br>字符串中一些特殊的字面量，即转义序列。类似于c语言学过的那些、<br>toString()函数，每个值都有，但是null与undefined没有。一般情况下使用这个函数时，没有必要传递参数，但是调用数值的 toString()方法时，可以传递基数，默认传递的是10，代表十进制。<br>String()函数可以将任何类型的值转换为字符串，包括null转换为’null’、undefined转换为’undefined’。<br>复杂的数据类型</p>\n<h5 id=\"object\"><a href=\"#object\" class=\"headerlink\" title=\"object\"></a>object</h5><p>该类型实例化的对象，是一组数据和功能（函数）的集合。<br>实例化对象的过程有两种，一种是通过new操作符，一种是通过对象字面量表示法。<br>object类型是最基本的类型，我们可以在其基础上继承出更多的类型，像我们知道的Array()、Date()、还有有意思的function()类型，都是从object继承的，而且这些类型都在程序员使用前被默认设置了属性和方法，供程序员调用。<br>而以上类型又有一个笼统的称呼为引用类型。为什么是引用类型呢？<br>var obj=new Object();<br>在学习C的时候，知道“ int a; int &amp;ra=a;”，所以ra是a的引用，ra的类型为引用类型，系统并不为引用类型分配内存空间。<br>但是，js所指的引用类型，在《js高级程序设计》这本书里，也确实是这样的概念，obj只是引用类型，是堆内存中一个对象的别称，本身并不占用内存。</p>\n<p>如图1</p>\n<p>但是这本书里，也说对引用类型的访问是按照引用访问，但是当<br>var obj2=obj;<br>这样将obj的值复给obj2时，会将堆内存中object的地址赋给obj2，这句话，又貌似是在说，在声明一个引用类型时，是会将实例化对象地址存到栈内存中，然后通过地址访问堆内存。</p>\n<p>如图2</p>\n<p>还有一个难点，也是我在学习引用类型的时候困惑的地方，C的时候，引用是可以做参数传递的，而且，引用不能被赋值，即不能改变引用的值。但是js中，函数的参数都是值传递的，而对于js内的引用类型，其值，也就默认为栈内存中的地址。<br>现在，对于创建对象的内存图，我查了广大网友的资料，大家默认图2,希望有对js引用类型理解更清晰的朋友，可以告诉我一下。谢谢啦！</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"ES5\"><a href=\"#ES5\" class=\"headerlink\" title=\"ES5\"></a>ES5</h2><p>Es5规定的基础类型为6种：number,string,undefined,null,boolean,object<br>其中 number,string,undefined,boolean,null 被称为原始类型，object 被称为对象类型</p>\n<h3 id=\"原始类型和对象类型的区别\"><a href=\"#原始类型和对象类型的区别\" class=\"headerlink\" title=\"原始类型和对象类型的区别\"></a>原始类型和对象类型的区别</h3><pre><code>原始类型存储的是值，而对象类型存储的是地址。在JS中创建一个对象类型A时，\n会在浏览器内存中开辟一片空间来存放它的值，这个空间会拥有一个指针，\n对象A的值是空间的指针也就是地址。当把A的值赋值给另一个对象B时，\n并不是把A里的值赋值给B，而是把A的指针传给B，所以A和B的指针指向同一个地方，\n当A或B中某一个的值发生改变时。另一个也会发生改变。\n</code></pre>\n<h4 id=\"原始类型\"><a href=\"#原始类型\" class=\"headerlink\" title=\"原始类型\"></a>原始类型</h4><h5 id=\"undefined\"><a href=\"#undefined\" class=\"headerlink\" title=\"undefined\"></a>undefined</h5><p>在使用var声明变量，但未对其加以初始化时，这个变量的类型就是undefined，且其默认初始化值为undefined。<br>对未声明与初始化的变量，直接使用，那么这个变量的类型也是undefined，但是没有默认初始化值。<br>//undefined<br>var message;<br>alert(‘已经声明但未初始化的变量message的类型是：’ +typeof message)<br>alert(‘未声明，也未初始化的变量age的类型是：’+ typeof age)<br>message</p>\n<p>age</p>\n<p>【总结】因为js的变量都是用关键字var来声明的，变量的具体类型取决于他被赋予的变量值，而对于以上两种情况，虽然本质上有区别，但是都没有被初始化，所以其类型都是undefined。但是后者没有初始化值。所以当<br>alert(age);//产生错误</p>\n<h5 id=\"null\"><a href=\"#null\" class=\"headerlink\" title=\"null\"></a>null</h5><p>null类型的默认值是null，从逻辑角度讲，是表示一个空对象指针。<br>js高级程序上有讲到，undefined类型是派生自null的，不严格的说二者都是指没有明确赋值的类型，但是细分之后，undefined类型，被用来形容未经初始化的变量，null类型被用来形容空对象指针。<br>所以，如果定义的变量准备在将来用于保存对象（即复杂的数据类型object），那么就该将该变量初始化为null。<br>区分，当一个变量声明后，未初始化，则该值为undefined，如果这个值是为了保存对象，则修改其默认初始化的值，改为null。 所以当检测其类型时，会显示类型为object。<br>*所以有时候，当问到js基本数据类型时，会忽略null。<br>//null<br>var car=null;<br>alert(‘car的类型为：’typeof car)</p>\n<p>car=null</p>\n<h5 id=\"boolean\"><a href=\"#boolean\" class=\"headerlink\" title=\"boolean\"></a>boolean</h5><p>即布尔类型，该类型有两个值：true false<br>Bloolean()函数，可以将其他类型的值转换为布尔类型。<br>转换规则<br><img src=\"/2021/02/25/js%E5%9F%BA%E7%A1%80%E7%B1%BB%E5%9E%8B/boolean-rule.webp\" alt=\"布尔类型转换规则\"></p>\n<p>规则<br>这些转换规则对理解流程控制语句，如（if）语句自动执行相应的转换非常重要。</p>\n<h5 id=\"number\"><a href=\"#number\" class=\"headerlink\" title=\"number\"></a>number</h5><p>该类型的表示方法有两种形式，第一种是整数，第二种为浮点数。<br>整数 可以通过十进制，八进制，十六进制的字面值来表示。<br>var intNum=55;//十进制<br>var octalNum=070;//八进制数，第一位必须是0，解析为56<br>var octalNum=079;//无效的8进制数，9超过了8进制数的范围，解析为79<br>var hexNum=0xA;//十六进制数，前两位必须是0x，后跟16进制数字（09及AF）<br>浮点数<br>1、该数值中必须包含一个小数点，且小数点后必须有一位数字，如果小数点后只有零，则该小数会被转化为整数。<br>2、浮点数所占据的内存空间是整数的两倍。<br>3、对极大极小的浮点数采用e表示法。<br>var floatNum=3.2e7；//3.2×10（7次幂）<br>var floatNum=3.2e-7；//3.2×10（-7次幂）<br>NaN<br>1、即非数值，是一个特殊的值，这个数值用于表示一个本来要返回数值的操作数，未返回数值的情况。比如任何数值除以0，本是不符合规范的，js里，这样的操作返回NaN（但是实际上，只有0除以0时返回NaN，其他则无穷值）。<br>2、NaN有两个不同寻常的特点：任何涉及NaN的操作都会返回NaN，NaN值与任何值都不相等，包括本身。<br>3、isNaN()函数，这个函数可以判断，传递的参数是否“不是数值”这里涉及数值转换的问题，例如“10”这个字符串就可以转换为10，但是“blue”这个字符串则无法转换为数字，所以isNaN(“blue”)==true<br>数值转换<br>1、有三个函数可以把非数值转换为数值：Number()，parseInt()，parseFloat()。第一个可以用于任何数据类型，后两个，则专门用于把字符串转化为数值。<br>2、这三个函数对于同样的输入有不同的效果。<br>3、数值转换（另写一篇文章）</p>\n<h5 id=\"string\"><a href=\"#string\" class=\"headerlink\" title=\"string\"></a>string</h5><p>字符串类型是最熟悉不过的啦，至于用单引号，还是双引号，在js中还是没有差别的。记得成对出现。<br>var firstName=’zakas’;<br>字符串中一些特殊的字面量，即转义序列。类似于c语言学过的那些、<br>toString()函数，每个值都有，但是null与undefined没有。一般情况下使用这个函数时，没有必要传递参数，但是调用数值的 toString()方法时，可以传递基数，默认传递的是10，代表十进制。<br>String()函数可以将任何类型的值转换为字符串，包括null转换为’null’、undefined转换为’undefined’。<br>复杂的数据类型</p>\n<h5 id=\"object\"><a href=\"#object\" class=\"headerlink\" title=\"object\"></a>object</h5><p>该类型实例化的对象，是一组数据和功能（函数）的集合。<br>实例化对象的过程有两种，一种是通过new操作符，一种是通过对象字面量表示法。<br>object类型是最基本的类型，我们可以在其基础上继承出更多的类型，像我们知道的Array()、Date()、还有有意思的function()类型，都是从object继承的，而且这些类型都在程序员使用前被默认设置了属性和方法，供程序员调用。<br>而以上类型又有一个笼统的称呼为引用类型。为什么是引用类型呢？<br>var obj=new Object();<br>在学习C的时候，知道“ int a; int &amp;ra=a;”，所以ra是a的引用，ra的类型为引用类型，系统并不为引用类型分配内存空间。<br>但是，js所指的引用类型，在《js高级程序设计》这本书里，也确实是这样的概念，obj只是引用类型，是堆内存中一个对象的别称，本身并不占用内存。</p>\n<p>如图1</p>\n<p>但是这本书里，也说对引用类型的访问是按照引用访问，但是当<br>var obj2=obj;<br>这样将obj的值复给obj2时，会将堆内存中object的地址赋给obj2，这句话，又貌似是在说，在声明一个引用类型时，是会将实例化对象地址存到栈内存中，然后通过地址访问堆内存。</p>\n<p>如图2</p>\n<p>还有一个难点，也是我在学习引用类型的时候困惑的地方，C的时候，引用是可以做参数传递的，而且，引用不能被赋值，即不能改变引用的值。但是js中，函数的参数都是值传递的，而对于js内的引用类型，其值，也就默认为栈内存中的地址。<br>现在，对于创建对象的内存图，我查了广大网友的资料，大家默认图2,希望有对js引用类型理解更清晰的朋友，可以告诉我一下。谢谢啦！</p>\n"}],"PostAsset":[{"_id":"source/_posts/js基础类型/boolean-rule.webp","slug":"boolean-rule.webp","post":"cklnsypsn0000jwdpcaahci04","modified":0,"renderable":0}],"PostCategory":[{"post_id":"ckljei2mg0000p0dp49nd9hso","category_id":"ckljei2mm0002p0dp5wuu4ilu","_id":"ckljeoff90001jkdpa6h4di3l"},{"post_id":"cklnpqw0u0004tsdp68u9c0uy","category_id":"ckljei2mo0004p0dpc3rwd70m","_id":"cklnpqw0y000atsdp07hc49qa"},{"post_id":"cklnpqw0x0006tsdpdjgqgaxo","category_id":"cklnpqw0s0002tsdpdniw8men","_id":"cklnpqw0z000ctsdp6od1dfsk"},{"post_id":"cklnpqw0m0000tsdp473ray9r","category_id":"cklnpqw0s0002tsdpdniw8men","_id":"cklnpqw0z000etsdp5i2qbovj"},{"post_id":"cklnqw185000ytsdp4q0y478f","category_id":"cklm8tbg70001todpdkh65jds","_id":"cklnqxfku0017tsdp0dak9mez"},{"post_id":"cklnqafv7000ktsdp5n6b6k1m","category_id":"cklm8tbg70001todpdkh65jds","_id":"cklnqxifv0018tsdpf7lb3hm4"},{"post_id":"cklnrgtbr0019tsdp5d883900","category_id":"cklm8tbg70001todpdkh65jds","_id":"cklnrhl6g001btsdpafu76ko0"},{"post_id":"cklnpqw0q0001tsdph5hu6a3u","category_id":"ckljei2mo0004p0dpc3rwd70m","_id":"cklnrtmqt001itsdpbpvk1txd"},{"post_id":"cklnsypsn0000jwdpcaahci04","category_id":"cklm8tbg70001todpdkh65jds","_id":"cklnsypso0002jwdpdee646o1"}],"PostTag":[{"post_id":"ckljei2mg0000p0dp49nd9hso","tag_id":"ckljei2mn0003p0dpexz07p17","_id":"ckljeoff90000jkdp2kdia2qu"},{"post_id":"cklnpqw0u0004tsdp68u9c0uy","tag_id":"ckljei2mp0005p0dp8l7o7rsb","_id":"cklnpqw0z000dtsdp86sm7y48"},{"post_id":"cklnpqw0u0004tsdp68u9c0uy","tag_id":"ckljei2mp0008p0dphn4016mb","_id":"cklnpqw0z000ftsdp3vj348f5"},{"post_id":"cklnpqw0u0004tsdp68u9c0uy","tag_id":"ckljei2mq000ap0dp387a5n5k","_id":"cklnpqw0z000gtsdpgqz4dc18"},{"post_id":"cklnpqw0u0004tsdp68u9c0uy","tag_id":"ckljei2mq000bp0dpcwalctlk","_id":"cklnpqw0z000htsdp8fosbym8"},{"post_id":"cklnpqw0x0006tsdpdjgqgaxo","tag_id":"cklnpqw0u0003tsdp558z7tj2","_id":"cklnpqw0z000itsdp7p88arxd"},{"post_id":"cklnpqw0m0000tsdp473ray9r","tag_id":"cklnpqw0u0003tsdp558z7tj2","_id":"cklnpqw0z000jtsdp0bz82ls4"},{"post_id":"cklnqafv7000ktsdp5n6b6k1m","tag_id":"cklnqbumy000rtsdp8ic07ljx","_id":"cklnqbumz000vtsdp470y4whz"},{"post_id":"cklnqafv7000ktsdp5n6b6k1m","tag_id":"cklnqbumy000stsdp736ih0ct","_id":"cklnqbumz000wtsdp1w0g31hx"},{"post_id":"cklnqafv7000ktsdp5n6b6k1m","tag_id":"cklnqbumy000utsdp8dkt6wc5","_id":"cklnqbumz000xtsdp0hqf3mp2"},{"post_id":"cklnqw185000ytsdp4q0y478f","tag_id":"cklnqbumy000utsdp8dkt6wc5","_id":"cklnqwoep0012tsdp9cqz1qc9"},{"post_id":"cklnqw185000ytsdp4q0y478f","tag_id":"cklnqwwdh0013tsdp24yk6vrw","_id":"cklnqwwdh0015tsdp0bp07mro"},{"post_id":"cklnqw185000ytsdp4q0y478f","tag_id":"cklnqwwdh0014tsdp69v0319t","_id":"cklnqwwdh0016tsdpe8aag4z2"},{"post_id":"cklnrgtbr0019tsdp5d883900","tag_id":"cklnrhl6g001atsdpem7pc87q","_id":"cklnrhl6g001dtsdp8uchd2tt"},{"post_id":"cklnrgtbr0019tsdp5d883900","tag_id":"cklnrhl6g001ctsdp03gc37m2","_id":"cklnrhl6g001etsdpg6vid9b8"},{"post_id":"cklnrgtbr0019tsdp5d883900","tag_id":"cklnqbumy000utsdp8dkt6wc5","_id":"cklnrhl6g001ftsdpcatvecw0"},{"post_id":"cklnpqw0q0001tsdph5hu6a3u","tag_id":"ckljei2mp0005p0dp8l7o7rsb","_id":"cklnrtmqs001gtsdpdxyabrur"},{"post_id":"cklnpqw0q0001tsdph5hu6a3u","tag_id":"ckljei2mp0008p0dphn4016mb","_id":"cklnrtmqt001htsdp51lvhyfk"},{"post_id":"cklnpqw0q0001tsdph5hu6a3u","tag_id":"ckljei2mq000ap0dp387a5n5k","_id":"cklnrtmqt001jtsdphcmgdt6b"},{"post_id":"cklnpqw0q0001tsdph5hu6a3u","tag_id":"ckljei2mq000bp0dpcwalctlk","_id":"cklnrtmqt001ktsdpdyyb7t3n"},{"post_id":"cklnsypsn0000jwdpcaahci04","tag_id":"cklm8tbg80002todp4kwr3tgs","_id":"cklnsypso0001jwdpenbahycd"}],"Tag":[{"name":"git","_id":"ckljei2mn0003p0dpexz07p17"},{"name":"中等","_id":"ckljei2mp0005p0dp8l7o7rsb"},{"name":"leetcode","_id":"ckljei2mp0008p0dphn4016mb"},{"name":"每日打卡","_id":"ckljei2mq000ap0dp387a5n5k"},{"name":"算法","_id":"ckljei2mq000bp0dpcwalctlk"},{"name":"js基础","_id":"cklm8tbg80002todp4kwr3tgs"},{"name":"面试","_id":"cklnpqw0u0003tsdp558z7tj2"},{"name":"字符串","_id":"cklnqbumy000rtsdp8ic07ljx"},{"name":"数组","_id":"cklnqbumy000stsdp736ih0ct"},{"name":"js","_id":"cklnqbumy000utsdp8dkt6wc5"},{"name":"原型","_id":"cklnqwwdh0013tsdp24yk6vrw"},{"name":"原型链","_id":"cklnqwwdh0014tsdp69v0319t"},{"name":"浅拷贝","_id":"cklnrhl6g001atsdpem7pc87q"},{"name":"深拷贝","_id":"cklnrhl6g001ctsdp03gc37m2"}]}}